
RTOS test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f4c  08007400  08007400  00008400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800834c  0800834c  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000000  0800834c  0800834c  0000a07c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800834c  0800834c  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800834c  0800834c  0000934c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008350  08008350  00009350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008354  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002298  2000007c  080083d0  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002314  080083d0  0000a314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b98f  00000000  00000000  0000a0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b84  00000000  00000000  00025a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  000295b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e5  00000000  00000000  0002adc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4b6  00000000  00000000  0002c0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9c7  00000000  00000000  00046563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c0b3  00000000  00000000  00062f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fefdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ae4  00000000  00000000  000ff020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00105b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080073e8 	.word	0x080073e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080073e8 	.word	0x080073e8

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 ffa2 	bl	800109c <HAL_Init>

	  // initialise
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f878 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f968 	bl	8000430 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f8d0 	bl	8000304 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f93a 	bl	80003dc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000168:	f000 f90a 	bl	8000380 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 800016c:	f000 fad2 	bl	8000714 <SSD1306_Init>
  SSD1306_Clear();
 8000170:	f000 fcf1 	bl	8000b56 <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8000174:	f000 fb92 	bl	800089c <SSD1306_UpdateScreen>

  SSD1306_GotoXY (0,0);
 8000178:	2100      	movs	r1, #0
 800017a:	2000      	movs	r0, #0
 800017c:	f000 fc32 	bl	80009e4 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	4920      	ldr	r1, [pc, #128]	@ (8000204 <main+0xb4>)
 8000184:	4820      	ldr	r0, [pc, #128]	@ (8000208 <main+0xb8>)
 8000186:	f000 fcc1 	bl	8000b0c <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 800018a:	211e      	movs	r1, #30
 800018c:	200a      	movs	r0, #10
 800018e:	f000 fc29 	bl	80009e4 <SSD1306_GotoXY>
  SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 8000192:	2201      	movs	r2, #1
 8000194:	491b      	ldr	r1, [pc, #108]	@ (8000204 <main+0xb4>)
 8000196:	481d      	ldr	r0, [pc, #116]	@ (800020c <main+0xbc>)
 8000198:	f000 fcb8 	bl	8000b0c <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 800019c:	f000 fb7e 	bl	800089c <SSD1306_UpdateScreen>

  HAL_Delay(2000);
 80001a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001a4:	f000 ffac 	bl	8001100 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001a8:	f003 fedc 	bl	8003f64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001ac:	4a18      	ldr	r2, [pc, #96]	@ (8000210 <main+0xc0>)
 80001ae:	2100      	movs	r1, #0
 80001b0:	4818      	ldr	r0, [pc, #96]	@ (8000214 <main+0xc4>)
 80001b2:	f003 ff3d 	bl	8004030 <osThreadNew>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a17      	ldr	r2, [pc, #92]	@ (8000218 <main+0xc8>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* creation of pickButtonTask */
  pickButtonTaskHandle = osThreadNew(pickButton, NULL, &pickButtonTask_attributes);
 80001bc:	4a17      	ldr	r2, [pc, #92]	@ (800021c <main+0xcc>)
 80001be:	2100      	movs	r1, #0
 80001c0:	4817      	ldr	r0, [pc, #92]	@ (8000220 <main+0xd0>)
 80001c2:	f003 ff35 	bl	8004030 <osThreadNew>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4a16      	ldr	r2, [pc, #88]	@ (8000224 <main+0xd4>)
 80001ca:	6013      	str	r3, [r2, #0]

  /* creation of getADCTask */
  getADCTaskHandle = osThreadNew(getADC, NULL, &getADCTask_attributes);
 80001cc:	4a16      	ldr	r2, [pc, #88]	@ (8000228 <main+0xd8>)
 80001ce:	2100      	movs	r1, #0
 80001d0:	4816      	ldr	r0, [pc, #88]	@ (800022c <main+0xdc>)
 80001d2:	f003 ff2d 	bl	8004030 <osThreadNew>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4a15      	ldr	r2, [pc, #84]	@ (8000230 <main+0xe0>)
 80001da:	6013      	str	r3, [r2, #0]

  /* creation of dispLEDTask */
  dispLEDTaskHandle = osThreadNew(dispLED, NULL, &dispLEDTask_attributes);
 80001dc:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <main+0xe4>)
 80001de:	2100      	movs	r1, #0
 80001e0:	4815      	ldr	r0, [pc, #84]	@ (8000238 <main+0xe8>)
 80001e2:	f003 ff25 	bl	8004030 <osThreadNew>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4a14      	ldr	r2, [pc, #80]	@ (800023c <main+0xec>)
 80001ea:	6013      	str	r3, [r2, #0]

  /* creation of dispUARTTask */
  dispUARTTaskHandle = osThreadNew(dispUART, NULL, &dispUARTTask_attributes);
 80001ec:	4a14      	ldr	r2, [pc, #80]	@ (8000240 <main+0xf0>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	4814      	ldr	r0, [pc, #80]	@ (8000244 <main+0xf4>)
 80001f2:	f003 ff1d 	bl	8004030 <osThreadNew>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a13      	ldr	r2, [pc, #76]	@ (8000248 <main+0xf8>)
 80001fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001fc:	f003 fee4 	bl	8003fc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	bf00      	nop
 8000202:	e7fd      	b.n	8000200 <main+0xb0>
 8000204:	20000000 	.word	0x20000000
 8000208:	08007444 	.word	0x08007444
 800020c:	0800744c 	.word	0x0800744c
 8000210:	08008224 	.word	0x08008224
 8000214:	08000589 	.word	0x08000589
 8000218:	20000164 	.word	0x20000164
 800021c:	08008248 	.word	0x08008248
 8000220:	08000599 	.word	0x08000599
 8000224:	20000168 	.word	0x20000168
 8000228:	0800826c 	.word	0x0800826c
 800022c:	080005d1 	.word	0x080005d1
 8000230:	2000016c 	.word	0x2000016c
 8000234:	08008290 	.word	0x08008290
 8000238:	0800060d 	.word	0x0800060d
 800023c:	20000170 	.word	0x20000170
 8000240:	080082b4 	.word	0x080082b4
 8000244:	08000659 	.word	0x08000659
 8000248:	20000174 	.word	0x20000174

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b094      	sub	sp, #80	@ 0x50
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000256:	2228      	movs	r2, #40	@ 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f006 fbde 	bl	8006a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000280:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000298:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800029c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fc06 	bl	8002ab4 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ae:	f000 fa2b 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fe72 	bl	8002fb8 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002da:	f000 fa15 	bl	8000708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002de:	2302      	movs	r3, #2
 80002e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 f822 	bl	8003334 <HAL_RCCEx_PeriphCLKConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002f6:	f000 fa07 	bl	8000708 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3750      	adds	r7, #80	@ 0x50
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000316:	4a19      	ldr	r2, [pc, #100]	@ (800037c <MX_ADC1_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031a:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <MX_ADC1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000320:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000326:	4b14      	ldr	r3, [pc, #80]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <MX_ADC1_Init+0x74>)
 800032e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000332:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000334:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800033a:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <MX_ADC1_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000340:	480d      	ldr	r0, [pc, #52]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000342:	f000 ff01 	bl	8001148 <HAL_ADC_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800034c:	f000 f9dc 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000354:	2301      	movs	r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000362:	f001 f9b5 	bl	80016d0 <HAL_ADC_ConfigChannel>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800036c:	f000 f9cc 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000098 	.word	0x20000098
 800037c:	40012400 	.word	0x40012400

08000380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000384:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <MX_I2C1_Init+0x50>)
 8000386:	4a13      	ldr	r2, [pc, #76]	@ (80003d4 <MX_I2C1_Init+0x54>)
 8000388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800038a:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_I2C1_Init+0x50>)
 800038c:	4a12      	ldr	r2, [pc, #72]	@ (80003d8 <MX_I2C1_Init+0x58>)
 800038e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_I2C1_Init+0x50>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_I2C1_Init+0x50>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <MX_I2C1_Init+0x50>)
 800039e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003aa:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b6:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003bc:	4804      	ldr	r0, [pc, #16]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003be:	f001 fdaf 	bl	8001f20 <HAL_I2C_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003c8:	f000 f99e 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200000c8 	.word	0x200000c8
 80003d4:	40005400 	.word	0x40005400
 80003d8:	00061a80 	.word	0x00061a80

080003dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	@ (800042c <MX_USART1_UART_Init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003e6:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 8000414:	f003 fb44 	bl	8003aa0 <HAL_UART_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800041e:	f000 f973 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	2000011c 	.word	0x2000011c
 800042c:	40013800 	.word	0x40013800

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000444:	4b34      	ldr	r3, [pc, #208]	@ (8000518 <MX_GPIO_Init+0xe8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a33      	ldr	r2, [pc, #204]	@ (8000518 <MX_GPIO_Init+0xe8>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b31      	ldr	r3, [pc, #196]	@ (8000518 <MX_GPIO_Init+0xe8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0310 	and.w	r3, r3, #16
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b2e      	ldr	r3, [pc, #184]	@ (8000518 <MX_GPIO_Init+0xe8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a2d      	ldr	r2, [pc, #180]	@ (8000518 <MX_GPIO_Init+0xe8>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b2b      	ldr	r3, [pc, #172]	@ (8000518 <MX_GPIO_Init+0xe8>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b28      	ldr	r3, [pc, #160]	@ (8000518 <MX_GPIO_Init+0xe8>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a27      	ldr	r2, [pc, #156]	@ (8000518 <MX_GPIO_Init+0xe8>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b25      	ldr	r3, [pc, #148]	@ (8000518 <MX_GPIO_Init+0xe8>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b22      	ldr	r3, [pc, #136]	@ (8000518 <MX_GPIO_Init+0xe8>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a21      	ldr	r2, [pc, #132]	@ (8000518 <MX_GPIO_Init+0xe8>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b1f      	ldr	r3, [pc, #124]	@ (8000518 <MX_GPIO_Init+0xe8>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004aa:	481c      	ldr	r0, [pc, #112]	@ (800051c <MX_GPIO_Init+0xec>)
 80004ac:	f001 fd1f 	bl	8001eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2103      	movs	r1, #3
 80004b4:	481a      	ldr	r0, [pc, #104]	@ (8000520 <MX_GPIO_Init+0xf0>)
 80004b6:	f001 fd1a 	bl	8001eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80004ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	4812      	ldr	r0, [pc, #72]	@ (800051c <MX_GPIO_Init+0xec>)
 80004d4:	f001 fb70 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80004d8:	2303      	movs	r3, #3
 80004da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2302      	movs	r3, #2
 80004e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	480c      	ldr	r0, [pc, #48]	@ (8000520 <MX_GPIO_Init+0xf0>)
 80004f0:	f001 fb62 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80004f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fe:	2301      	movs	r3, #1
 8000500:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	@ (8000520 <MX_GPIO_Init+0xf0>)
 800050a:	f001 fb55 	bl	8001bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800050e:	bf00      	nop
 8000510:	3720      	adds	r7, #32
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40011000 	.word	0x40011000
 8000520:	40010c00 	.word	0x40010c00

08000524 <Menu_Display>:

/* USER CODE BEGIN 4 */


void Menu_Display(void)
{
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b08e      	sub	sp, #56	@ 0x38
 8000528:	af00      	add	r7, sp, #0
	uint8_t menu_1[] = "\r\n1. Voltage monitor read\r\n";
 800052a:	4b14      	ldr	r3, [pc, #80]	@ (800057c <Menu_Display+0x58>)
 800052c:	f107 041c 	add.w	r4, r7, #28
 8000530:	461d      	mov	r5, r3
 8000532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t menu_2[] = "2. Re-display Menu\r\n\r\n";
 800053e:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <Menu_Display+0x5c>)
 8000540:	1d3c      	adds	r4, r7, #4
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	e895 0003 	ldmia.w	r5, {r0, r1}
 800054c:	6020      	str	r0, [r4, #0]
 800054e:	3404      	adds	r4, #4
 8000550:	8021      	strh	r1, [r4, #0]
 8000552:	3402      	adds	r4, #2
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, menu_1, sizeof(menu_1), 30);
 8000558:	f107 011c 	add.w	r1, r7, #28
 800055c:	231e      	movs	r3, #30
 800055e:	221c      	movs	r2, #28
 8000560:	4808      	ldr	r0, [pc, #32]	@ (8000584 <Menu_Display+0x60>)
 8000562:	f003 faed 	bl	8003b40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, menu_2, sizeof(menu_2), 30);
 8000566:	1d39      	adds	r1, r7, #4
 8000568:	231e      	movs	r3, #30
 800056a:	2217      	movs	r2, #23
 800056c:	4805      	ldr	r0, [pc, #20]	@ (8000584 <Menu_Display+0x60>)
 800056e:	f003 fae7 	bl	8003b40 <HAL_UART_Transmit>

}
 8000572:	bf00      	nop
 8000574:	3738      	adds	r7, #56	@ 0x38
 8000576:	46bd      	mov	sp, r7
 8000578:	bdb0      	pop	{r4, r5, r7, pc}
 800057a:	bf00      	nop
 800057c:	08007458 	.word	0x08007458
 8000580:	08007474 	.word	0x08007474
 8000584:	2000011c 	.word	0x2000011c

08000588 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f003 fdf7 	bl	8004184 <osDelay>
 8000596:	e7fb      	b.n	8000590 <StartDefaultTask+0x8>

08000598 <pickButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pickButton */
void pickButton(void *argument)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pickButton */
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET)
 80005a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005a4:	4808      	ldr	r0, [pc, #32]	@ (80005c8 <pickButton+0x30>)
 80005a6:	f001 fc8b 	bl	8001ec0 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d106      	bne.n	80005be <pickButton+0x26>
	  {
		  osDelay(300);	// debounce
 80005b0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005b4:	f003 fde6 	bl	8004184 <osDelay>
		  button1_pressed = 1;
 80005b8:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <pickButton+0x34>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	601a      	str	r2, [r3, #0]
	  }


    osDelay(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f003 fde0 	bl	8004184 <osDelay>
	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET)
 80005c4:	e7ec      	b.n	80005a0 <pickButton+0x8>
 80005c6:	bf00      	nop
 80005c8:	40010c00 	.word	0x40010c00
 80005cc:	20000180 	.word	0x20000180

080005d0 <getADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADC */
void getADC(void *argument)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADC */
  /* Infinite loop */
  for(;;)
  {

	  HAL_ADC_Start(&hadc1);
 80005d8:	480a      	ldr	r0, [pc, #40]	@ (8000604 <getADC+0x34>)
 80005da:	f000 fe8d 	bl	80012f8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80005de:	210a      	movs	r1, #10
 80005e0:	4808      	ldr	r0, [pc, #32]	@ (8000604 <getADC+0x34>)
 80005e2:	f000 ff63 	bl	80014ac <HAL_ADC_PollForConversion>
	  x_val = (HAL_ADC_GetValue(&hadc1));
 80005e6:	4807      	ldr	r0, [pc, #28]	@ (8000604 <getADC+0x34>)
 80005e8:	f001 f866 	bl	80016b8 <HAL_ADC_GetValue>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a06      	ldr	r2, [pc, #24]	@ (8000608 <getADC+0x38>)
 80005f0:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 80005f2:	4804      	ldr	r0, [pc, #16]	@ (8000604 <getADC+0x34>)
 80005f4:	f000 ff2e 	bl	8001454 <HAL_ADC_Stop>

	  // process ADC values here


    osDelay(100);
 80005f8:	2064      	movs	r0, #100	@ 0x64
 80005fa:	f003 fdc3 	bl	8004184 <osDelay>
	  HAL_ADC_Start(&hadc1);
 80005fe:	bf00      	nop
 8000600:	e7ea      	b.n	80005d8 <getADC+0x8>
 8000602:	bf00      	nop
 8000604:	20000098 	.word	0x20000098
 8000608:	20000178 	.word	0x20000178

0800060c <dispLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispLED */
void dispLED(void *argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispLED */
  /* Infinite loop */
  for(;;)
  {
	  if(x_val > 4096/2){
 8000614:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <dispLED+0x44>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800061c:	d90a      	bls.n	8000634 <dispLED+0x28>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	2102      	movs	r1, #2
 8000622:	480c      	ldr	r0, [pc, #48]	@ (8000654 <dispLED+0x48>)
 8000624:	f001 fc63 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	2101      	movs	r1, #1
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <dispLED+0x48>)
 800062e:	f001 fc5e 	bl	8001eee <HAL_GPIO_WritePin>
 8000632:	e009      	b.n	8000648 <dispLED+0x3c>
	  }
	  else{
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2102      	movs	r1, #2
 8000638:	4806      	ldr	r0, [pc, #24]	@ (8000654 <dispLED+0x48>)
 800063a:	f001 fc58 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2101      	movs	r1, #1
 8000642:	4804      	ldr	r0, [pc, #16]	@ (8000654 <dispLED+0x48>)
 8000644:	f001 fc53 	bl	8001eee <HAL_GPIO_WritePin>
	  }
    osDelay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f003 fd9b 	bl	8004184 <osDelay>
	  if(x_val > 4096/2){
 800064e:	e7e1      	b.n	8000614 <dispLED+0x8>
 8000650:	20000178 	.word	0x20000178
 8000654:	40010c00 	.word	0x40010c00

08000658 <dispUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispUART */
void dispUART(void *argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN UARTmenu */
	  /* Infinite loop */

		Menu_Display();
 8000660:	f7ff ff60 	bl	8000524 <Menu_Display>

	  for(;;)
	  {
		  // select user input
		  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 8000664:	230a      	movs	r3, #10
 8000666:	2201      	movs	r2, #1
 8000668:	4917      	ldr	r1, [pc, #92]	@ (80006c8 <dispUART+0x70>)
 800066a:	4818      	ldr	r0, [pc, #96]	@ (80006cc <dispUART+0x74>)
 800066c:	f003 faeb 	bl	8003c46 <HAL_UART_Receive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d117      	bne.n	80006a6 <dispUART+0x4e>
		  {
			switch (choice) {
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <dispUART+0x70>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b31      	cmp	r3, #49	@ 0x31
 800067c:	d002      	beq.n	8000684 <dispUART+0x2c>
 800067e:	2b32      	cmp	r3, #50	@ 0x32
 8000680:	d00e      	beq.n	80006a0 <dispUART+0x48>
					break;
				case '2':
					Menu_Display();
					break;
				default:
					break;
 8000682:	e010      	b.n	80006a6 <dispUART+0x4e>
					sprintf(buffer, "Voltage = %d\r\n",x_val);
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <dispUART+0x78>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4912      	ldr	r1, [pc, #72]	@ (80006d4 <dispUART+0x7c>)
 800068c:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <dispUART+0x80>)
 800068e:	f006 f9a5 	bl	80069dc <siprintf>
					HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 20);
 8000692:	2314      	movs	r3, #20
 8000694:	2214      	movs	r2, #20
 8000696:	4910      	ldr	r1, [pc, #64]	@ (80006d8 <dispUART+0x80>)
 8000698:	480c      	ldr	r0, [pc, #48]	@ (80006cc <dispUART+0x74>)
 800069a:	f003 fa51 	bl	8003b40 <HAL_UART_Transmit>
					break;
 800069e:	e002      	b.n	80006a6 <dispUART+0x4e>
					Menu_Display();
 80006a0:	f7ff ff40 	bl	8000524 <Menu_Display>
					break;
 80006a4:	bf00      	nop
			}
		  }else{

		  }

		  if(button1_pressed)
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <dispUART+0x84>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d008      	beq.n	80006c0 <dispUART+0x68>
		  {
			  HAL_UART_Transmit(&huart1, (uint8_t*)"Button1 pressed\r\n", sizeof("Button1 pressed\r\n"), 10);
 80006ae:	230a      	movs	r3, #10
 80006b0:	2212      	movs	r2, #18
 80006b2:	490b      	ldr	r1, [pc, #44]	@ (80006e0 <dispUART+0x88>)
 80006b4:	4805      	ldr	r0, [pc, #20]	@ (80006cc <dispUART+0x74>)
 80006b6:	f003 fa43 	bl	8003b40 <HAL_UART_Transmit>
			  button1_pressed = 0;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <dispUART+0x84>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
		  }


	    osDelay(100);
 80006c0:	2064      	movs	r0, #100	@ 0x64
 80006c2:	f003 fd5f 	bl	8004184 <osDelay>
		  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 80006c6:	e7cd      	b.n	8000664 <dispUART+0xc>
 80006c8:	2000017c 	.word	0x2000017c
 80006cc:	2000011c 	.word	0x2000011c
 80006d0:	20000178 	.word	0x20000178
 80006d4:	0800748c 	.word	0x0800748c
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000180 	.word	0x20000180
 80006e0:	0800749c 	.word	0x0800749c

080006e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d101      	bne.n	80006fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006f6:	f000 fce7 	bl	80010c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40000800 	.word	0x40000800

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <Error_Handler+0x8>

08000714 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800071a:	f000 fa25 	bl	8000b68 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800071e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000722:	2201      	movs	r2, #1
 8000724:	2178      	movs	r1, #120	@ 0x78
 8000726:	485b      	ldr	r0, [pc, #364]	@ (8000894 <SSD1306_Init+0x180>)
 8000728:	f001 fe3c 	bl	80023a4 <HAL_I2C_IsDeviceReady>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000732:	2300      	movs	r3, #0
 8000734:	e0a9      	b.n	800088a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000736:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800073a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800073c:	e002      	b.n	8000744 <SSD1306_Init+0x30>
		p--;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3b01      	subs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f9      	bne.n	800073e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800074a:	22ae      	movs	r2, #174	@ 0xae
 800074c:	2100      	movs	r1, #0
 800074e:	2078      	movs	r0, #120	@ 0x78
 8000750:	f000 fa84 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000754:	2220      	movs	r2, #32
 8000756:	2100      	movs	r1, #0
 8000758:	2078      	movs	r0, #120	@ 0x78
 800075a:	f000 fa7f 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800075e:	2210      	movs	r2, #16
 8000760:	2100      	movs	r1, #0
 8000762:	2078      	movs	r0, #120	@ 0x78
 8000764:	f000 fa7a 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000768:	22b0      	movs	r2, #176	@ 0xb0
 800076a:	2100      	movs	r1, #0
 800076c:	2078      	movs	r0, #120	@ 0x78
 800076e:	f000 fa75 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000772:	22c8      	movs	r2, #200	@ 0xc8
 8000774:	2100      	movs	r1, #0
 8000776:	2078      	movs	r0, #120	@ 0x78
 8000778:	f000 fa70 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	2078      	movs	r0, #120	@ 0x78
 8000782:	f000 fa6b 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000786:	2210      	movs	r2, #16
 8000788:	2100      	movs	r1, #0
 800078a:	2078      	movs	r0, #120	@ 0x78
 800078c:	f000 fa66 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000790:	2240      	movs	r2, #64	@ 0x40
 8000792:	2100      	movs	r1, #0
 8000794:	2078      	movs	r0, #120	@ 0x78
 8000796:	f000 fa61 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800079a:	2281      	movs	r2, #129	@ 0x81
 800079c:	2100      	movs	r1, #0
 800079e:	2078      	movs	r0, #120	@ 0x78
 80007a0:	f000 fa5c 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80007a4:	22ff      	movs	r2, #255	@ 0xff
 80007a6:	2100      	movs	r1, #0
 80007a8:	2078      	movs	r0, #120	@ 0x78
 80007aa:	f000 fa57 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80007ae:	22a1      	movs	r2, #161	@ 0xa1
 80007b0:	2100      	movs	r1, #0
 80007b2:	2078      	movs	r0, #120	@ 0x78
 80007b4:	f000 fa52 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80007b8:	22a6      	movs	r2, #166	@ 0xa6
 80007ba:	2100      	movs	r1, #0
 80007bc:	2078      	movs	r0, #120	@ 0x78
 80007be:	f000 fa4d 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80007c2:	22a8      	movs	r2, #168	@ 0xa8
 80007c4:	2100      	movs	r1, #0
 80007c6:	2078      	movs	r0, #120	@ 0x78
 80007c8:	f000 fa48 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80007cc:	223f      	movs	r2, #63	@ 0x3f
 80007ce:	2100      	movs	r1, #0
 80007d0:	2078      	movs	r0, #120	@ 0x78
 80007d2:	f000 fa43 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007d6:	22a4      	movs	r2, #164	@ 0xa4
 80007d8:	2100      	movs	r1, #0
 80007da:	2078      	movs	r0, #120	@ 0x78
 80007dc:	f000 fa3e 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80007e0:	22d3      	movs	r2, #211	@ 0xd3
 80007e2:	2100      	movs	r1, #0
 80007e4:	2078      	movs	r0, #120	@ 0x78
 80007e6:	f000 fa39 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2078      	movs	r0, #120	@ 0x78
 80007f0:	f000 fa34 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80007f4:	22d5      	movs	r2, #213	@ 0xd5
 80007f6:	2100      	movs	r1, #0
 80007f8:	2078      	movs	r0, #120	@ 0x78
 80007fa:	f000 fa2f 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80007fe:	22f0      	movs	r2, #240	@ 0xf0
 8000800:	2100      	movs	r1, #0
 8000802:	2078      	movs	r0, #120	@ 0x78
 8000804:	f000 fa2a 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000808:	22d9      	movs	r2, #217	@ 0xd9
 800080a:	2100      	movs	r1, #0
 800080c:	2078      	movs	r0, #120	@ 0x78
 800080e:	f000 fa25 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000812:	2222      	movs	r2, #34	@ 0x22
 8000814:	2100      	movs	r1, #0
 8000816:	2078      	movs	r0, #120	@ 0x78
 8000818:	f000 fa20 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800081c:	22da      	movs	r2, #218	@ 0xda
 800081e:	2100      	movs	r1, #0
 8000820:	2078      	movs	r0, #120	@ 0x78
 8000822:	f000 fa1b 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000826:	2212      	movs	r2, #18
 8000828:	2100      	movs	r1, #0
 800082a:	2078      	movs	r0, #120	@ 0x78
 800082c:	f000 fa16 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000830:	22db      	movs	r2, #219	@ 0xdb
 8000832:	2100      	movs	r1, #0
 8000834:	2078      	movs	r0, #120	@ 0x78
 8000836:	f000 fa11 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800083a:	2220      	movs	r2, #32
 800083c:	2100      	movs	r1, #0
 800083e:	2078      	movs	r0, #120	@ 0x78
 8000840:	f000 fa0c 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000844:	228d      	movs	r2, #141	@ 0x8d
 8000846:	2100      	movs	r1, #0
 8000848:	2078      	movs	r0, #120	@ 0x78
 800084a:	f000 fa07 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800084e:	2214      	movs	r2, #20
 8000850:	2100      	movs	r1, #0
 8000852:	2078      	movs	r0, #120	@ 0x78
 8000854:	f000 fa02 	bl	8000c5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000858:	22af      	movs	r2, #175	@ 0xaf
 800085a:	2100      	movs	r1, #0
 800085c:	2078      	movs	r0, #120	@ 0x78
 800085e:	f000 f9fd 	bl	8000c5c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000862:	222e      	movs	r2, #46	@ 0x2e
 8000864:	2100      	movs	r1, #0
 8000866:	2078      	movs	r0, #120	@ 0x78
 8000868:	f000 f9f8 	bl	8000c5c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f843 	bl	80008f8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000872:	f000 f813 	bl	800089c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <SSD1306_Init+0x184>)
 8000878:	2200      	movs	r2, #0
 800087a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <SSD1306_Init+0x184>)
 800087e:	2200      	movs	r2, #0
 8000880:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000882:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <SSD1306_Init+0x184>)
 8000884:	2201      	movs	r2, #1
 8000886:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000888:	2301      	movs	r3, #1
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000c8 	.word	0x200000c8
 8000898:	20000584 	.word	0x20000584

0800089c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	e01d      	b.n	80008e4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	3b50      	subs	r3, #80	@ 0x50
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	2100      	movs	r1, #0
 80008b2:	2078      	movs	r0, #120	@ 0x78
 80008b4:	f000 f9d2 	bl	8000c5c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	2078      	movs	r0, #120	@ 0x78
 80008be:	f000 f9cd 	bl	8000c5c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80008c2:	2210      	movs	r2, #16
 80008c4:	2100      	movs	r1, #0
 80008c6:	2078      	movs	r0, #120	@ 0x78
 80008c8:	f000 f9c8 	bl	8000c5c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	01db      	lsls	r3, r3, #7
 80008d0:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <SSD1306_UpdateScreen+0x58>)
 80008d2:	441a      	add	r2, r3
 80008d4:	2380      	movs	r3, #128	@ 0x80
 80008d6:	2140      	movs	r1, #64	@ 0x40
 80008d8:	2078      	movs	r0, #120	@ 0x78
 80008da:	f000 f959 	bl	8000b90 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	3301      	adds	r3, #1
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b07      	cmp	r3, #7
 80008e8:	d9de      	bls.n	80008a8 <SSD1306_UpdateScreen+0xc>
	}
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000184 	.word	0x20000184

080008f8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d101      	bne.n	800090c <SSD1306_Fill+0x14>
 8000908:	2300      	movs	r3, #0
 800090a:	e000      	b.n	800090e <SSD1306_Fill+0x16>
 800090c:	23ff      	movs	r3, #255	@ 0xff
 800090e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000912:	4619      	mov	r1, r3
 8000914:	4803      	ldr	r0, [pc, #12]	@ (8000924 <SSD1306_Fill+0x2c>)
 8000916:	f006 f881 	bl	8006a1c <memset>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000184 	.word	0x20000184

08000928 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	460b      	mov	r3, r1
 8000934:	80bb      	strh	r3, [r7, #4]
 8000936:	4613      	mov	r3, r2
 8000938:	70fb      	strb	r3, [r7, #3]
	if (
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	2b7f      	cmp	r3, #127	@ 0x7f
 800093e:	d848      	bhi.n	80009d2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000940:	88bb      	ldrh	r3, [r7, #4]
 8000942:	2b3f      	cmp	r3, #63	@ 0x3f
 8000944:	d845      	bhi.n	80009d2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <SSD1306_DrawPixel+0xb4>)
 8000948:	791b      	ldrb	r3, [r3, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d006      	beq.n	800095c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800094e:	78fb      	ldrb	r3, [r7, #3]
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d11a      	bne.n	8000998 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000962:	88fa      	ldrh	r2, [r7, #6]
 8000964:	88bb      	ldrh	r3, [r7, #4]
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	b298      	uxth	r0, r3
 800096a:	4603      	mov	r3, r0
 800096c:	01db      	lsls	r3, r3, #7
 800096e:	4413      	add	r3, r2
 8000970:	4a1b      	ldr	r2, [pc, #108]	@ (80009e0 <SSD1306_DrawPixel+0xb8>)
 8000972:	5cd3      	ldrb	r3, [r2, r3]
 8000974:	b25a      	sxtb	r2, r3
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	f003 0307 	and.w	r3, r3, #7
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	b25b      	sxtb	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b259      	sxtb	r1, r3
 8000988:	88fa      	ldrh	r2, [r7, #6]
 800098a:	4603      	mov	r3, r0
 800098c:	01db      	lsls	r3, r3, #7
 800098e:	4413      	add	r3, r2
 8000990:	b2c9      	uxtb	r1, r1
 8000992:	4a13      	ldr	r2, [pc, #76]	@ (80009e0 <SSD1306_DrawPixel+0xb8>)
 8000994:	54d1      	strb	r1, [r2, r3]
 8000996:	e01d      	b.n	80009d4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000998:	88fa      	ldrh	r2, [r7, #6]
 800099a:	88bb      	ldrh	r3, [r7, #4]
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	b298      	uxth	r0, r3
 80009a0:	4603      	mov	r3, r0
 80009a2:	01db      	lsls	r3, r3, #7
 80009a4:	4413      	add	r3, r2
 80009a6:	4a0e      	ldr	r2, [pc, #56]	@ (80009e0 <SSD1306_DrawPixel+0xb8>)
 80009a8:	5cd3      	ldrb	r3, [r2, r3]
 80009aa:	b25a      	sxtb	r2, r3
 80009ac:	88bb      	ldrh	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	2101      	movs	r1, #1
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	4013      	ands	r3, r2
 80009c0:	b259      	sxtb	r1, r3
 80009c2:	88fa      	ldrh	r2, [r7, #6]
 80009c4:	4603      	mov	r3, r0
 80009c6:	01db      	lsls	r3, r3, #7
 80009c8:	4413      	add	r3, r2
 80009ca:	b2c9      	uxtb	r1, r1
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <SSD1306_DrawPixel+0xb8>)
 80009ce:	54d1      	strb	r1, [r2, r3]
 80009d0:	e000      	b.n	80009d4 <SSD1306_DrawPixel+0xac>
		return;
 80009d2:	bf00      	nop
	}
}
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20000584 	.word	0x20000584
 80009e0:	20000184 	.word	0x20000184

080009e4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	80fb      	strh	r3, [r7, #6]
 80009f0:	4613      	mov	r3, r2
 80009f2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80009f4:	4a05      	ldr	r2, [pc, #20]	@ (8000a0c <SSD1306_GotoXY+0x28>)
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <SSD1306_GotoXY+0x28>)
 80009fc:	88bb      	ldrh	r3, [r7, #4]
 80009fe:	8053      	strh	r3, [r2, #2]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000584 	.word	0x20000584

08000a10 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a20:	4b39      	ldr	r3, [pc, #228]	@ (8000b08 <SSD1306_Putc+0xf8>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
	if (
 8000a2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a2e:	dc07      	bgt.n	8000a40 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000a30:	4b35      	ldr	r3, [pc, #212]	@ (8000b08 <SSD1306_Putc+0xf8>)
 8000a32:	885b      	ldrh	r3, [r3, #2]
 8000a34:	461a      	mov	r2, r3
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	785b      	ldrb	r3, [r3, #1]
 8000a3a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a3e:	dd01      	ble.n	8000a44 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	e05d      	b.n	8000b00 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	e04b      	b.n	8000ae2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	3b20      	subs	r3, #32
 8000a52:	6839      	ldr	r1, [r7, #0]
 8000a54:	7849      	ldrb	r1, [r1, #1]
 8000a56:	fb01 f303 	mul.w	r3, r1, r3
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	440b      	add	r3, r1
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	4413      	add	r3, r2
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	e030      	b.n	8000ad0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d010      	beq.n	8000aa0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a7e:	4b22      	ldr	r3, [pc, #136]	@ (8000b08 <SSD1306_Putc+0xf8>)
 8000a80:	881a      	ldrh	r2, [r3, #0]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4413      	add	r3, r2
 8000a88:	b298      	uxth	r0, r3
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <SSD1306_Putc+0xf8>)
 8000a8c:	885a      	ldrh	r2, [r3, #2]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4413      	add	r3, r2
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	79ba      	ldrb	r2, [r7, #6]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f7ff ff45 	bl	8000928 <SSD1306_DrawPixel>
 8000a9e:	e014      	b.n	8000aca <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <SSD1306_Putc+0xf8>)
 8000aa2:	881a      	ldrh	r2, [r3, #0]
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b298      	uxth	r0, r3
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <SSD1306_Putc+0xf8>)
 8000aae:	885a      	ldrh	r2, [r3, #2]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b299      	uxth	r1, r3
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	bf0c      	ite	eq
 8000abe:	2301      	moveq	r3, #1
 8000ac0:	2300      	movne	r3, #0
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	f7ff ff2f 	bl	8000928 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	3301      	adds	r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d3c8      	bcc.n	8000a6e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	785b      	ldrb	r3, [r3, #1]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d3ad      	bcc.n	8000a4a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <SSD1306_Putc+0xf8>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	683a      	ldr	r2, [r7, #0]
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <SSD1306_Putc+0xf8>)
 8000afc:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000584 	.word	0x20000584

08000b0c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	4613      	mov	r3, r2
 8000b18:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000b1a:	e012      	b.n	8000b42 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	79fa      	ldrb	r2, [r7, #7]
 8000b22:	68b9      	ldr	r1, [r7, #8]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff73 	bl	8000a10 <SSD1306_Putc>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d002      	beq.n	8000b3c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	e008      	b.n	8000b4e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1e8      	bne.n	8000b1c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff fecc 	bl	80008f8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000b60:	f7ff fe9c 	bl	800089c <SSD1306_UpdateScreen>
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <ssd1306_I2C_Init+0x24>)
 8000b70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b72:	e002      	b.n	8000b7a <ssd1306_I2C_Init+0x12>
		p--;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1f9      	bne.n	8000b74 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	0003d090 	.word	0x0003d090

08000b90 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b0c7      	sub	sp, #284	@ 0x11c
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	4604      	mov	r4, r0
 8000b98:	4608      	mov	r0, r1
 8000b9a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000b9e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000ba2:	600a      	str	r2, [r1, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000baa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000bae:	4622      	mov	r2, r4
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bb6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000bba:	4602      	mov	r2, r0
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bc6:	460a      	mov	r2, r1
 8000bc8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000bca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bd2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bd6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000bda:	7812      	ldrb	r2, [r2, #0]
 8000bdc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000be4:	e015      	b.n	8000c12 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000be6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000bea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bee:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	441a      	add	r2, r3
 8000bf6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	7811      	ldrb	r1, [r2, #0]
 8000bfe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c02:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c06:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000c08:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c12:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c1c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000c20:	8812      	ldrh	r2, [r2, #0]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d8df      	bhi.n	8000be6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000c26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c2a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b299      	uxth	r1, r3
 8000c32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	f107 020c 	add.w	r2, r7, #12
 8000c44:	200a      	movs	r0, #10
 8000c46:	9000      	str	r0, [sp, #0]
 8000c48:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <ssd1306_I2C_WriteMulti+0xc8>)
 8000c4a:	f001 faad 	bl	80021a8 <HAL_I2C_Master_Transmit>
}
 8000c4e:	bf00      	nop
 8000c50:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	200000c8 	.word	0x200000c8

08000c5c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	460b      	mov	r3, r1
 8000c68:	71bb      	strb	r3, [r7, #6]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c72:	797b      	ldrb	r3, [r7, #5]
 8000c74:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	b299      	uxth	r1, r3
 8000c7a:	f107 020c 	add.w	r2, r7, #12
 8000c7e:	230a      	movs	r3, #10
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2302      	movs	r3, #2
 8000c84:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <ssd1306_I2C_Write+0x38>)
 8000c86:	f001 fa8f 	bl	80021a8 <HAL_I2C_Master_Transmit>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000c8 	.word	0x200000c8

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_MspInit+0x68>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a17      	ldr	r2, [pc, #92]	@ (8000d00 <HAL_MspInit+0x68>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_MspInit+0x68>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <HAL_MspInit+0x68>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a11      	ldr	r2, [pc, #68]	@ (8000d00 <HAL_MspInit+0x68>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_MspInit+0x68>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	210f      	movs	r1, #15
 8000cd2:	f06f 0001 	mvn.w	r0, #1
 8000cd6:	f000 ff44 	bl	8001b62 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_MspInit+0x6c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_MspInit+0x6c>)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010000 	.word	0x40010000

08000d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <HAL_ADC_MspInit+0x6c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d121      	bne.n	8000d6c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a0c      	ldr	r2, [pc, #48]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_ADC_MspInit+0x70>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_X_Pin;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_X_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_ADC_MspInit+0x74>)
 8000d68:	f000 ff26 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40012400 	.word	0x40012400
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010800 	.word	0x40010800

08000d80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a15      	ldr	r2, [pc, #84]	@ (8000df0 <HAL_I2C_MspInit+0x70>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d123      	bne.n	8000de8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a13      	ldr	r2, [pc, #76]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db8:	23c0      	movs	r3, #192	@ 0xc0
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbc:	2312      	movs	r3, #18
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <HAL_I2C_MspInit+0x78>)
 8000dcc:	f000 fef4 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dda:	61d3      	str	r3, [r2, #28]
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40005400 	.word	0x40005400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010c00 	.word	0x40010c00

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1c      	ldr	r2, [pc, #112]	@ (8000e88 <HAL_UART_MspInit+0x8c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d131      	bne.n	8000e80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <HAL_UART_MspInit+0x90>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a1a      	ldr	r2, [pc, #104]	@ (8000e8c <HAL_UART_MspInit+0x90>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_UART_MspInit+0x90>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_UART_MspInit+0x90>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a14      	ldr	r2, [pc, #80]	@ (8000e8c <HAL_UART_MspInit+0x90>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_UART_MspInit+0x90>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480b      	ldr	r0, [pc, #44]	@ (8000e90 <HAL_UART_MspInit+0x94>)
 8000e62:	f000 fea9 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <HAL_UART_MspInit+0x94>)
 8000e7c:	f000 fe9c 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40013800 	.word	0x40013800
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800

08000e94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08e      	sub	sp, #56	@ 0x38
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000eaa:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <HAL_InitTick+0xe8>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a33      	ldr	r2, [pc, #204]	@ (8000f7c <HAL_InitTick+0xe8>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b31      	ldr	r3, [pc, #196]	@ (8000f7c <HAL_InitTick+0xe8>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec2:	f107 0210 	add.w	r2, r7, #16
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 f9e3 	bl	8003298 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d103      	bne.n	8000ee4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000edc:	f002 f9b4 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 8000ee0:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ee2:	e004      	b.n	8000eee <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ee4:	f002 f9b0 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef0:	4a23      	ldr	r2, [pc, #140]	@ (8000f80 <HAL_InitTick+0xec>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0c9b      	lsrs	r3, r3, #18
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000efc:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <HAL_InitTick+0xf0>)
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <HAL_InitTick+0xf4>)
 8000f00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f02:	4b20      	ldr	r3, [pc, #128]	@ (8000f84 <HAL_InitTick+0xf0>)
 8000f04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f08:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f84 <HAL_InitTick+0xf0>)
 8000f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <HAL_InitTick+0xf0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <HAL_InitTick+0xf0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_InitTick+0xf0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f22:	4818      	ldr	r0, [pc, #96]	@ (8000f84 <HAL_InitTick+0xf0>)
 8000f24:	f002 fb72 	bl	800360c <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d11b      	bne.n	8000f6e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f36:	4813      	ldr	r0, [pc, #76]	@ (8000f84 <HAL_InitTick+0xf0>)
 8000f38:	f002 fbc0 	bl	80036bc <HAL_TIM_Base_Start_IT>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f42:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d111      	bne.n	8000f6e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f4a:	201e      	movs	r0, #30
 8000f4c:	f000 fe25 	bl	8001b9a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	d808      	bhi.n	8000f68 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f56:	2200      	movs	r2, #0
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	201e      	movs	r0, #30
 8000f5c:	f000 fe01 	bl	8001b62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f60:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <HAL_InitTick+0xf8>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e002      	b.n	8000f6e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3738      	adds	r7, #56	@ 0x38
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	431bde83 	.word	0x431bde83
 8000f84:	2000058c 	.word	0x2000058c
 8000f88:	40000800 	.word	0x40000800
 8000f8c:	20000020 	.word	0x20000020

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <NMI_Handler+0x4>

08000f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <TIM4_IRQHandler+0x10>)
 8000fca:	f002 fbc9 	bl	8003760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000058c 	.word	0x2000058c

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f005 fd66 	bl	8006ad8 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	@ (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20005000 	.word	0x20005000
 8001038:	00000400 	.word	0x00000400
 800103c:	200005d4 	.word	0x200005d4
 8001040:	20002318 	.word	0x20002318

08001044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001050:	f7ff fff8 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480b      	ldr	r0, [pc, #44]	@ (8001084 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001056:	490c      	ldr	r1, [pc, #48]	@ (8001088 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001058:	4a0c      	ldr	r2, [pc, #48]	@ (800108c <LoopFillZerobss+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800106c:	4c09      	ldr	r4, [pc, #36]	@ (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f005 fd33 	bl	8006ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107e:	f7ff f867 	bl	8000150 <main>
  bx lr
 8001082:	4770      	bx	lr
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800108c:	08008354 	.word	0x08008354
  ldr r2, =_sbss
 8001090:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001094:	20002314 	.word	0x20002314

08001098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_2_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <HAL_Init+0x28>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <HAL_Init+0x28>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 fd4d 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	200f      	movs	r0, #15
 80010b4:	f7ff feee 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fdee 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000

080010c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <HAL_IncTick+0x1c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <HAL_IncTick+0x20>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a03      	ldr	r2, [pc, #12]	@ (80010e8 <HAL_IncTick+0x20>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	20000024 	.word	0x20000024
 80010e8:	200005d8 	.word	0x200005d8

080010ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b02      	ldr	r3, [pc, #8]	@ (80010fc <HAL_GetTick+0x10>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	200005d8 	.word	0x200005d8

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff fff0 	bl	80010ec <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffe0 	bl	80010ec <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000024 	.word	0x20000024

08001148 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e0be      	b.n	80012e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001174:	2b00      	cmp	r3, #0
 8001176:	d109      	bne.n	800118c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fdbe 	bl	8000d08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 fbf1 	bl	8001974 <ADC_ConversionStop_Disable>
 8001192:	4603      	mov	r3, r0
 8001194:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 8099 	bne.w	80012d6 <HAL_ADC_Init+0x18e>
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 8095 	bne.w	80012d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011b4:	f023 0302 	bic.w	r3, r3, #2
 80011b8:	f043 0202 	orr.w	r2, r3, #2
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7b1b      	ldrb	r3, [r3, #12]
 80011ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011e0:	d003      	beq.n	80011ea <HAL_ADC_Init+0xa2>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d102      	bne.n	80011f0 <HAL_ADC_Init+0xa8>
 80011ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ee:	e000      	b.n	80011f2 <HAL_ADC_Init+0xaa>
 80011f0:	2300      	movs	r3, #0
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7d1b      	ldrb	r3, [r3, #20]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d119      	bne.n	8001234 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7b1b      	ldrb	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d109      	bne.n	800121c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	3b01      	subs	r3, #1
 800120e:	035a      	lsls	r2, r3, #13
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	e00b      	b.n	8001234 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001220:	f043 0220 	orr.w	r2, r3, #32
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122c:	f043 0201 	orr.w	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	430a      	orrs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <HAL_ADC_Init+0x1a8>)
 8001250:	4013      	ands	r3, r2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	430b      	orrs	r3, r1
 800125a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001264:	d003      	beq.n	800126e <HAL_ADC_Init+0x126>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d104      	bne.n	8001278 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	3b01      	subs	r3, #1
 8001274:	051b      	lsls	r3, r3, #20
 8001276:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	430a      	orrs	r2, r1
 800128a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_ADC_Init+0x1ac>)
 8001294:	4013      	ands	r3, r2
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	429a      	cmp	r2, r3
 800129a:	d10b      	bne.n	80012b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a6:	f023 0303 	bic.w	r3, r3, #3
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012b2:	e018      	b.n	80012e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b8:	f023 0312 	bic.w	r3, r3, #18
 80012bc:	f043 0210 	orr.w	r2, r3, #16
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c8:	f043 0201 	orr.w	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012d4:	e007      	b.n	80012e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012da:	f043 0210 	orr.w	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	ffe1f7fd 	.word	0xffe1f7fd
 80012f4:	ff1f0efe 	.word	0xff1f0efe

080012f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_ADC_Start+0x1a>
 800130e:	2302      	movs	r3, #2
 8001310:	e098      	b.n	8001444 <HAL_ADC_Start+0x14c>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fad0 	bl	80018c0 <ADC_Enable>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 8087 	bne.w	800143a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a41      	ldr	r2, [pc, #260]	@ (800144c <HAL_ADC_Start+0x154>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d105      	bne.n	8001356 <HAL_ADC_Start+0x5e>
 800134a:	4b41      	ldr	r3, [pc, #260]	@ (8001450 <HAL_ADC_Start+0x158>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d115      	bne.n	8001382 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136c:	2b00      	cmp	r3, #0
 800136e:	d026      	beq.n	80013be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001374:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001378:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001380:	e01d      	b.n	80013be <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a2f      	ldr	r2, [pc, #188]	@ (8001450 <HAL_ADC_Start+0x158>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d004      	beq.n	80013a2 <HAL_ADC_Start+0xaa>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a2b      	ldr	r2, [pc, #172]	@ (800144c <HAL_ADC_Start+0x154>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10d      	bne.n	80013be <HAL_ADC_Start+0xc6>
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_ADC_Start+0x158>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ce:	f023 0206 	bic.w	r2, r3, #6
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013d6:	e002      	b.n	80013de <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f06f 0202 	mvn.w	r2, #2
 80013ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013fa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013fe:	d113      	bne.n	8001428 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001404:	4a11      	ldr	r2, [pc, #68]	@ (800144c <HAL_ADC_Start+0x154>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d105      	bne.n	8001416 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <HAL_ADC_Start+0x158>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001412:	2b00      	cmp	r3, #0
 8001414:	d108      	bne.n	8001428 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	e00c      	b.n	8001442 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	e003      	b.n	8001442 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40012800 	.word	0x40012800
 8001450:	40012400 	.word	0x40012400

08001454 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_ADC_Stop+0x1a>
 800146a:	2302      	movs	r3, #2
 800146c:	e01a      	b.n	80014a4 <HAL_ADC_Stop+0x50>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fa7c 	bl	8001974 <ADC_ConversionStop_Disable>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014c2:	f7ff fe13 	bl	80010ec <HAL_GetTick>
 80014c6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	f043 0220 	orr.w	r2, r3, #32
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0d3      	b.n	8001696 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d131      	bne.n	8001560 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001502:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001506:	2b00      	cmp	r3, #0
 8001508:	d12a      	bne.n	8001560 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800150a:	e021      	b.n	8001550 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001512:	d01d      	beq.n	8001550 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_ADC_PollForConversion+0x7e>
 800151a:	f7ff fde7 	bl	80010ec <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d212      	bcs.n	8001550 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10b      	bne.n	8001550 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	f043 0204 	orr.w	r2, r3, #4
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0a2      	b.n	8001696 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0d6      	beq.n	800150c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800155e:	e070      	b.n	8001642 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001560:	4b4f      	ldr	r3, [pc, #316]	@ (80016a0 <HAL_ADC_PollForConversion+0x1f4>)
 8001562:	681c      	ldr	r4, [r3, #0]
 8001564:	2002      	movs	r0, #2
 8001566:	f001 ff9b 	bl	80034a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800156a:	4603      	mov	r3, r0
 800156c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6919      	ldr	r1, [r3, #16]
 8001576:	4b4b      	ldr	r3, [pc, #300]	@ (80016a4 <HAL_ADC_PollForConversion+0x1f8>)
 8001578:	400b      	ands	r3, r1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d118      	bne.n	80015b0 <HAL_ADC_PollForConversion+0x104>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68d9      	ldr	r1, [r3, #12]
 8001584:	4b48      	ldr	r3, [pc, #288]	@ (80016a8 <HAL_ADC_PollForConversion+0x1fc>)
 8001586:	400b      	ands	r3, r1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d111      	bne.n	80015b0 <HAL_ADC_PollForConversion+0x104>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6919      	ldr	r1, [r3, #16]
 8001592:	4b46      	ldr	r3, [pc, #280]	@ (80016ac <HAL_ADC_PollForConversion+0x200>)
 8001594:	400b      	ands	r3, r1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d108      	bne.n	80015ac <HAL_ADC_PollForConversion+0x100>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68d9      	ldr	r1, [r3, #12]
 80015a0:	4b43      	ldr	r3, [pc, #268]	@ (80016b0 <HAL_ADC_PollForConversion+0x204>)
 80015a2:	400b      	ands	r3, r1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_ADC_PollForConversion+0x100>
 80015a8:	2314      	movs	r3, #20
 80015aa:	e020      	b.n	80015ee <HAL_ADC_PollForConversion+0x142>
 80015ac:	2329      	movs	r3, #41	@ 0x29
 80015ae:	e01e      	b.n	80015ee <HAL_ADC_PollForConversion+0x142>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6919      	ldr	r1, [r3, #16]
 80015b6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ac <HAL_ADC_PollForConversion+0x200>)
 80015b8:	400b      	ands	r3, r1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <HAL_ADC_PollForConversion+0x120>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68d9      	ldr	r1, [r3, #12]
 80015c4:	4b3a      	ldr	r3, [pc, #232]	@ (80016b0 <HAL_ADC_PollForConversion+0x204>)
 80015c6:	400b      	ands	r3, r1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00d      	beq.n	80015e8 <HAL_ADC_PollForConversion+0x13c>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6919      	ldr	r1, [r3, #16]
 80015d2:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <HAL_ADC_PollForConversion+0x208>)
 80015d4:	400b      	ands	r3, r1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <HAL_ADC_PollForConversion+0x140>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68d9      	ldr	r1, [r3, #12]
 80015e0:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_ADC_PollForConversion+0x208>)
 80015e2:	400b      	ands	r3, r1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_ADC_PollForConversion+0x140>
 80015e8:	2354      	movs	r3, #84	@ 0x54
 80015ea:	e000      	b.n	80015ee <HAL_ADC_PollForConversion+0x142>
 80015ec:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015f4:	e021      	b.n	800163a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d01a      	beq.n	8001634 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d007      	beq.n	8001614 <HAL_ADC_PollForConversion+0x168>
 8001604:	f7ff fd72 	bl	80010ec <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d20f      	bcs.n	8001634 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d90b      	bls.n	8001634 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001620:	f043 0204 	orr.w	r2, r3, #4
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e030      	b.n	8001696 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	429a      	cmp	r2, r3
 8001640:	d8d9      	bhi.n	80015f6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f06f 0212 	mvn.w	r2, #18
 800164a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001650:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001662:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001666:	d115      	bne.n	8001694 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800166c:	2b00      	cmp	r3, #0
 800166e:	d111      	bne.n	8001694 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001674:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000001c 	.word	0x2000001c
 80016a4:	24924924 	.word	0x24924924
 80016a8:	00924924 	.word	0x00924924
 80016ac:	12492492 	.word	0x12492492
 80016b0:	00492492 	.word	0x00492492
 80016b4:	00249249 	.word	0x00249249

080016b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x20>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e0dc      	b.n	80018aa <HAL_ADC_ConfigChannel+0x1da>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b06      	cmp	r3, #6
 80016fe:	d81c      	bhi.n	800173a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b05      	subs	r3, #5
 8001712:	221f      	movs	r2, #31
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	4019      	ands	r1, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	3b05      	subs	r3, #5
 800172c:	fa00 f203 	lsl.w	r2, r0, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	635a      	str	r2, [r3, #52]	@ 0x34
 8001738:	e03c      	b.n	80017b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d81c      	bhi.n	800177c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	3b23      	subs	r3, #35	@ 0x23
 8001754:	221f      	movs	r2, #31
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	4019      	ands	r1, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	3b23      	subs	r3, #35	@ 0x23
 800176e:	fa00 f203 	lsl.w	r2, r0, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	631a      	str	r2, [r3, #48]	@ 0x30
 800177a:	e01b      	b.n	80017b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	3b41      	subs	r3, #65	@ 0x41
 800178e:	221f      	movs	r2, #31
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	4019      	ands	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b41      	subs	r3, #65	@ 0x41
 80017a8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d91c      	bls.n	80017f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68d9      	ldr	r1, [r3, #12]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	3b1e      	subs	r3, #30
 80017ce:	2207      	movs	r2, #7
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4019      	ands	r1, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	6898      	ldr	r0, [r3, #8]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	3b1e      	subs	r3, #30
 80017e8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	e019      	b.n	800182a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6919      	ldr	r1, [r3, #16]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	2207      	movs	r2, #7
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4019      	ands	r1, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6898      	ldr	r0, [r3, #8]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	fa00 f203 	lsl.w	r2, r0, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b10      	cmp	r3, #16
 8001830:	d003      	beq.n	800183a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001836:	2b11      	cmp	r3, #17
 8001838:	d132      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d125      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d126      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001860:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b10      	cmp	r3, #16
 8001868:	d11a      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800186a:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a13      	ldr	r2, [pc, #76]	@ (80018bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	0c9a      	lsrs	r2, r3, #18
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001880:	e002      	b.n	8001888 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3b01      	subs	r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f9      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x1b2>
 800188e:	e007      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	f043 0220 	orr.w	r2, r3, #32
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	40012400 	.word	0x40012400
 80018b8:	2000001c 	.word	0x2000001c
 80018bc:	431bde83 	.word	0x431bde83

080018c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d040      	beq.n	8001960 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018ee:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <ADC_Enable+0xac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <ADC_Enable+0xb0>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	0c9b      	lsrs	r3, r3, #18
 80018fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018fc:	e002      	b.n	8001904 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	3b01      	subs	r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f9      	bne.n	80018fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800190a:	f7ff fbef 	bl	80010ec <HAL_GetTick>
 800190e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001910:	e01f      	b.n	8001952 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001912:	f7ff fbeb 	bl	80010ec <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d918      	bls.n	8001952 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b01      	cmp	r3, #1
 800192c:	d011      	beq.n	8001952 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	f043 0210 	orr.w	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193e:	f043 0201 	orr.w	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e007      	b.n	8001962 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d1d8      	bne.n	8001912 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000001c 	.word	0x2000001c
 8001970:	431bde83 	.word	0x431bde83

08001974 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b01      	cmp	r3, #1
 800198c:	d12e      	bne.n	80019ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800199e:	f7ff fba5 	bl	80010ec <HAL_GetTick>
 80019a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019a4:	e01b      	b.n	80019de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019a6:	f7ff fba1 	bl	80010ec <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d914      	bls.n	80019de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d10d      	bne.n	80019de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c6:	f043 0210 	orr.w	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e007      	b.n	80019ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d0dc      	beq.n	80019a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	60d3      	str	r3, [r2, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db0b      	blt.n	8001a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4906      	ldr	r1, [pc, #24]	@ (8001a90 <__NVIC_EnableIRQ+0x34>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	@ (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	@ (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	@ 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff4f 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff64 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ffb2 	bl	8001ae8 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff81 	bl	8001a94 <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff57 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b08b      	sub	sp, #44	@ 0x2c
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	e169      	b.n	8001ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 8158 	bne.w	8001e9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a9a      	ldr	r2, [pc, #616]	@ (8001e58 <HAL_GPIO_Init+0x2a0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d05e      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a98      	ldr	r2, [pc, #608]	@ (8001e58 <HAL_GPIO_Init+0x2a0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d875      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001bfa:	4a98      	ldr	r2, [pc, #608]	@ (8001e5c <HAL_GPIO_Init+0x2a4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d058      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c00:	4a96      	ldr	r2, [pc, #600]	@ (8001e5c <HAL_GPIO_Init+0x2a4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d86f      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c06:	4a96      	ldr	r2, [pc, #600]	@ (8001e60 <HAL_GPIO_Init+0x2a8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d052      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c0c:	4a94      	ldr	r2, [pc, #592]	@ (8001e60 <HAL_GPIO_Init+0x2a8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d869      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c12:	4a94      	ldr	r2, [pc, #592]	@ (8001e64 <HAL_GPIO_Init+0x2ac>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d04c      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c18:	4a92      	ldr	r2, [pc, #584]	@ (8001e64 <HAL_GPIO_Init+0x2ac>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d863      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c1e:	4a92      	ldr	r2, [pc, #584]	@ (8001e68 <HAL_GPIO_Init+0x2b0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d046      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c24:	4a90      	ldr	r2, [pc, #576]	@ (8001e68 <HAL_GPIO_Init+0x2b0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d85d      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d82a      	bhi.n	8001c84 <HAL_GPIO_Init+0xcc>
 8001c2e:	2b12      	cmp	r3, #18
 8001c30:	d859      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c32:	a201      	add	r2, pc, #4	@ (adr r2, 8001c38 <HAL_GPIO_Init+0x80>)
 8001c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c38:	08001cb3 	.word	0x08001cb3
 8001c3c:	08001c8d 	.word	0x08001c8d
 8001c40:	08001c9f 	.word	0x08001c9f
 8001c44:	08001ce1 	.word	0x08001ce1
 8001c48:	08001ce7 	.word	0x08001ce7
 8001c4c:	08001ce7 	.word	0x08001ce7
 8001c50:	08001ce7 	.word	0x08001ce7
 8001c54:	08001ce7 	.word	0x08001ce7
 8001c58:	08001ce7 	.word	0x08001ce7
 8001c5c:	08001ce7 	.word	0x08001ce7
 8001c60:	08001ce7 	.word	0x08001ce7
 8001c64:	08001ce7 	.word	0x08001ce7
 8001c68:	08001ce7 	.word	0x08001ce7
 8001c6c:	08001ce7 	.word	0x08001ce7
 8001c70:	08001ce7 	.word	0x08001ce7
 8001c74:	08001ce7 	.word	0x08001ce7
 8001c78:	08001ce7 	.word	0x08001ce7
 8001c7c:	08001c95 	.word	0x08001c95
 8001c80:	08001ca9 	.word	0x08001ca9
 8001c84:	4a79      	ldr	r2, [pc, #484]	@ (8001e6c <HAL_GPIO_Init+0x2b4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c8a:	e02c      	b.n	8001ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	623b      	str	r3, [r7, #32]
          break;
 8001c92:	e029      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e024      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	623b      	str	r3, [r7, #32]
          break;
 8001ca6:	e01f      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	330c      	adds	r3, #12
 8001cae:	623b      	str	r3, [r7, #32]
          break;
 8001cb0:	e01a      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	623b      	str	r3, [r7, #32]
          break;
 8001cbe:	e013      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	611a      	str	r2, [r3, #16]
          break;
 8001cd2:	e009      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	615a      	str	r2, [r3, #20]
          break;
 8001cde:	e003      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          break;
 8001ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2bff      	cmp	r3, #255	@ 0xff
 8001cec:	d801      	bhi.n	8001cf2 <HAL_GPIO_Init+0x13a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	e001      	b.n	8001cf6 <HAL_GPIO_Init+0x13e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	@ 0xff
 8001cfc:	d802      	bhi.n	8001d04 <HAL_GPIO_Init+0x14c>
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	e002      	b.n	8001d0a <HAL_GPIO_Init+0x152>
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	3b08      	subs	r3, #8
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	210f      	movs	r1, #15
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	6a39      	ldr	r1, [r7, #32]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	431a      	orrs	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80b1 	beq.w	8001e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d38:	4b4d      	ldr	r3, [pc, #308]	@ (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b4a      	ldr	r3, [pc, #296]	@ (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d50:	4a48      	ldr	r2, [pc, #288]	@ (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a40      	ldr	r2, [pc, #256]	@ (8001e78 <HAL_GPIO_Init+0x2c0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_GPIO_Init+0x1ec>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e7c <HAL_GPIO_Init+0x2c4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00d      	beq.n	8001da0 <HAL_GPIO_Init+0x1e8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3e      	ldr	r2, [pc, #248]	@ (8001e80 <HAL_GPIO_Init+0x2c8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d007      	beq.n	8001d9c <HAL_GPIO_Init+0x1e4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d101      	bne.n	8001d98 <HAL_GPIO_Init+0x1e0>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e006      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001d98:	2304      	movs	r3, #4
 8001d9a:	e004      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001da4:	2300      	movs	r3, #0
 8001da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da8:	f002 0203 	and.w	r2, r2, #3
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	4093      	lsls	r3, r2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001db6:	492f      	ldr	r1, [pc, #188]	@ (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	492c      	ldr	r1, [pc, #176]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dde:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4928      	ldr	r1, [pc, #160]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df8:	4b23      	ldr	r3, [pc, #140]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	4922      	ldr	r1, [pc, #136]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60cb      	str	r3, [r1, #12]
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e06:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	491e      	ldr	r1, [pc, #120]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e20:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4918      	ldr	r1, [pc, #96]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e2e:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4914      	ldr	r1, [pc, #80]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d021      	beq.n	8001e8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	490e      	ldr	r1, [pc, #56]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e021      	b.n	8001e9a <HAL_GPIO_Init+0x2e2>
 8001e56:	bf00      	nop
 8001e58:	10320000 	.word	0x10320000
 8001e5c:	10310000 	.word	0x10310000
 8001e60:	10220000 	.word	0x10220000
 8001e64:	10210000 	.word	0x10210000
 8001e68:	10120000 	.word	0x10120000
 8001e6c:	10110000 	.word	0x10110000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40010800 	.word	0x40010800
 8001e7c:	40010c00 	.word	0x40010c00
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40011400 	.word	0x40011400
 8001e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4909      	ldr	r1, [pc, #36]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f47f ae8e 	bne.w	8001bcc <HAL_GPIO_Init+0x14>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	372c      	adds	r7, #44	@ 0x2c
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e001      	b.n	8001ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	807b      	strh	r3, [r7, #2]
 8001efa:	4613      	mov	r3, r2
 8001efc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001efe:	787b      	ldrb	r3, [r7, #1]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f04:	887a      	ldrh	r2, [r7, #2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0a:	e003      	b.n	8001f14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	041a      	lsls	r2, r3, #16
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	611a      	str	r2, [r3, #16]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e12b      	b.n	800218a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe ff1a 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	@ 0x24
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f84:	f001 f960 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 8001f88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a81      	ldr	r2, [pc, #516]	@ (8002194 <HAL_I2C_Init+0x274>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d807      	bhi.n	8001fa4 <HAL_I2C_Init+0x84>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a80      	ldr	r2, [pc, #512]	@ (8002198 <HAL_I2C_Init+0x278>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	bf94      	ite	ls
 8001f9c:	2301      	movls	r3, #1
 8001f9e:	2300      	movhi	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e006      	b.n	8001fb2 <HAL_I2C_Init+0x92>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a7d      	ldr	r2, [pc, #500]	@ (800219c <HAL_I2C_Init+0x27c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	bf94      	ite	ls
 8001fac:	2301      	movls	r3, #1
 8001fae:	2300      	movhi	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0e7      	b.n	800218a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a78      	ldr	r2, [pc, #480]	@ (80021a0 <HAL_I2C_Init+0x280>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0c9b      	lsrs	r3, r3, #18
 8001fc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a6a      	ldr	r2, [pc, #424]	@ (8002194 <HAL_I2C_Init+0x274>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d802      	bhi.n	8001ff4 <HAL_I2C_Init+0xd4>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	e009      	b.n	8002008 <HAL_I2C_Init+0xe8>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	4a69      	ldr	r2, [pc, #420]	@ (80021a4 <HAL_I2C_Init+0x284>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	3301      	adds	r3, #1
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	430b      	orrs	r3, r1
 800200e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800201a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	495c      	ldr	r1, [pc, #368]	@ (8002194 <HAL_I2C_Init+0x274>)
 8002024:	428b      	cmp	r3, r1
 8002026:	d819      	bhi.n	800205c <HAL_I2C_Init+0x13c>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1e59      	subs	r1, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fbb1 f3f3 	udiv	r3, r1, r3
 8002036:	1c59      	adds	r1, r3, #1
 8002038:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800203c:	400b      	ands	r3, r1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_I2C_Init+0x138>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1e59      	subs	r1, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002050:	3301      	adds	r3, #1
 8002052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002056:	e051      	b.n	80020fc <HAL_I2C_Init+0x1dc>
 8002058:	2304      	movs	r3, #4
 800205a:	e04f      	b.n	80020fc <HAL_I2C_Init+0x1dc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d111      	bne.n	8002088 <HAL_I2C_Init+0x168>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e58      	subs	r0, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	440b      	add	r3, r1
 8002072:	fbb0 f3f3 	udiv	r3, r0, r3
 8002076:	3301      	adds	r3, #1
 8002078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e012      	b.n	80020ae <HAL_I2C_Init+0x18e>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1e58      	subs	r0, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	0099      	lsls	r1, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	fbb0 f3f3 	udiv	r3, r0, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Init+0x196>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e022      	b.n	80020fc <HAL_I2C_Init+0x1dc>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10e      	bne.n	80020dc <HAL_I2C_Init+0x1bc>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1e58      	subs	r0, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	440b      	add	r3, r1
 80020cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020da:	e00f      	b.n	80020fc <HAL_I2C_Init+0x1dc>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1e58      	subs	r0, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	0099      	lsls	r1, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	6809      	ldr	r1, [r1, #0]
 8002100:	4313      	orrs	r3, r2
 8002102:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800212a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6911      	ldr	r1, [r2, #16]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68d2      	ldr	r2, [r2, #12]
 8002136:	4311      	orrs	r1, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	430b      	orrs	r3, r1
 800213e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	000186a0 	.word	0x000186a0
 8002198:	001e847f 	.word	0x001e847f
 800219c:	003d08ff 	.word	0x003d08ff
 80021a0:	431bde83 	.word	0x431bde83
 80021a4:	10624dd3 	.word	0x10624dd3

080021a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	461a      	mov	r2, r3
 80021b4:	460b      	mov	r3, r1
 80021b6:	817b      	strh	r3, [r7, #10]
 80021b8:	4613      	mov	r3, r2
 80021ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7fe ff96 	bl	80010ec <HAL_GetTick>
 80021c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	f040 80e0 	bne.w	8002390 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2319      	movs	r3, #25
 80021d6:	2201      	movs	r2, #1
 80021d8:	4970      	ldr	r1, [pc, #448]	@ (800239c <HAL_I2C_Master_Transmit+0x1f4>)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fa92 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021e6:	2302      	movs	r3, #2
 80021e8:	e0d3      	b.n	8002392 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_I2C_Master_Transmit+0x50>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e0cc      	b.n	8002392 <HAL_I2C_Master_Transmit+0x1ea>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d007      	beq.n	800221e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0201 	orr.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800222c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2221      	movs	r2, #33	@ 0x21
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2210      	movs	r2, #16
 800223a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	893a      	ldrh	r2, [r7, #8]
 800224e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4a50      	ldr	r2, [pc, #320]	@ (80023a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800225e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002260:	8979      	ldrh	r1, [r7, #10]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	6a3a      	ldr	r2, [r7, #32]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f9ca 	bl	8002600 <I2C_MasterRequestWrite>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e08d      	b.n	8002392 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800228c:	e066      	b.n	800235c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	6a39      	ldr	r1, [r7, #32]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fb50 	bl	8002938 <I2C_WaitOnTXEFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d107      	bne.n	80022b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e06b      	b.n	8002392 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	781a      	ldrb	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d11b      	bne.n	8002330 <HAL_I2C_Master_Transmit+0x188>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d017      	beq.n	8002330 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	6a39      	ldr	r1, [r7, #32]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fb47 	bl	80029c8 <I2C_WaitOnBTFFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	2b04      	cmp	r3, #4
 8002346:	d107      	bne.n	8002358 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002356:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e01a      	b.n	8002392 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002360:	2b00      	cmp	r3, #0
 8002362:	d194      	bne.n	800228e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	e000      	b.n	8002392 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002390:	2302      	movs	r3, #2
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	00100002 	.word	0x00100002
 80023a0:	ffff0000 	.word	0xffff0000

080023a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	460b      	mov	r3, r1
 80023b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7fe fe9a 	bl	80010ec <HAL_GetTick>
 80023b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	f040 8111 	bne.w	80025ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2319      	movs	r3, #25
 80023d2:	2201      	movs	r2, #1
 80023d4:	4988      	ldr	r1, [pc, #544]	@ (80025f8 <HAL_I2C_IsDeviceReady+0x254>)
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f994 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80023e2:	2302      	movs	r3, #2
 80023e4:	e104      	b.n	80025f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_I2C_IsDeviceReady+0x50>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e0fd      	b.n	80025f0 <HAL_I2C_IsDeviceReady+0x24c>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b01      	cmp	r3, #1
 8002408:	d007      	beq.n	800241a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002428:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2224      	movs	r2, #36	@ 0x24
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a70      	ldr	r2, [pc, #448]	@ (80025fc <HAL_I2C_IsDeviceReady+0x258>)
 800243c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800244c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f952 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002474:	d103      	bne.n	800247e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800247c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0b6      	b.n	80025f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002490:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe fe2b 	bl	80010ec <HAL_GetTick>
 8002496:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024c6:	e025      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024c8:	f7fe fe10 	bl	80010ec <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d302      	bcc.n	80024de <HAL_I2C_IsDeviceReady+0x13a>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	22a0      	movs	r2, #160	@ 0xa0
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2ba0      	cmp	r3, #160	@ 0xa0
 800251e:	d005      	beq.n	800252c <HAL_I2C_IsDeviceReady+0x188>
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_I2C_IsDeviceReady+0x188>
 8002526:	7dbb      	ldrb	r3, [r7, #22]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0cd      	beq.n	80024c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b02      	cmp	r3, #2
 8002540:	d129      	bne.n	8002596 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002550:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2319      	movs	r3, #25
 800256e:	2201      	movs	r2, #1
 8002570:	4921      	ldr	r1, [pc, #132]	@ (80025f8 <HAL_I2C_IsDeviceReady+0x254>)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f8c6 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e036      	b.n	80025f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e02c      	b.n	80025f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2319      	movs	r3, #25
 80025b6:	2201      	movs	r2, #1
 80025b8:	490f      	ldr	r1, [pc, #60]	@ (80025f8 <HAL_I2C_IsDeviceReady+0x254>)
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f8a2 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e012      	b.n	80025f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	f4ff af32 	bcc.w	800243e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	00100002 	.word	0x00100002
 80025fc:	ffff0000 	.word	0xffff0000

08002600 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	460b      	mov	r3, r1
 800260e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d006      	beq.n	800262a <I2C_MasterRequestWrite+0x2a>
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d003      	beq.n	800262a <I2C_MasterRequestWrite+0x2a>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002628:	d108      	bne.n	800263c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e00b      	b.n	8002654 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	2b12      	cmp	r3, #18
 8002642:	d107      	bne.n	8002654 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f84f 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00d      	beq.n	8002688 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800267a:	d103      	bne.n	8002684 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e035      	b.n	80026f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002690:	d108      	bne.n	80026a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	e01b      	b.n	80026dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026a4:	897b      	ldrh	r3, [r7, #10]
 80026a6:	11db      	asrs	r3, r3, #7
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f003 0306 	and.w	r3, r3, #6
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f063 030f 	orn	r3, r3, #15
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	490e      	ldr	r1, [pc, #56]	@ (80026fc <I2C_MasterRequestWrite+0xfc>)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f898 	bl	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e010      	b.n	80026f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4907      	ldr	r1, [pc, #28]	@ (8002700 <I2C_MasterRequestWrite+0x100>)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f888 	bl	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	00010008 	.word	0x00010008
 8002700:	00010002 	.word	0x00010002

08002704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002714:	e048      	b.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d044      	beq.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7fe fce5 	bl	80010ec <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d139      	bne.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	0c1b      	lsrs	r3, r3, #16
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d10d      	bne.n	800275a <I2C_WaitOnFlagUntilTimeout+0x56>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	43da      	mvns	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4013      	ands	r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	e00c      	b.n	8002774 <I2C_WaitOnFlagUntilTimeout+0x70>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	43da      	mvns	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	4013      	ands	r3, r2
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	429a      	cmp	r2, r3
 8002778:	d116      	bne.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e023      	b.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	0c1b      	lsrs	r3, r3, #16
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10d      	bne.n	80027ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	e00c      	b.n	80027e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	43da      	mvns	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d093      	beq.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002806:	e071      	b.n	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002816:	d123      	bne.n	8002860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002826:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002830:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e067      	b.n	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d041      	beq.n	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002868:	f7fe fc40 	bl	80010ec <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	d302      	bcc.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d136      	bne.n	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10c      	bne.n	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4013      	ands	r3, r2
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	bf14      	ite	ne
 800289a:	2301      	movne	r3, #1
 800289c:	2300      	moveq	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	e00b      	b.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	43da      	mvns	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4013      	ands	r3, r2
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f043 0220 	orr.w	r2, r3, #32
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e021      	b.n	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	0c1b      	lsrs	r3, r3, #16
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10c      	bne.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e00b      	b.n	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4013      	ands	r3, r2
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	bf14      	ite	ne
 8002922:	2301      	movne	r3, #1
 8002924:	2300      	moveq	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	f47f af6d 	bne.w	8002808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002944:	e034      	b.n	80029b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f886 	bl	8002a58 <I2C_IsAcknowledgeFailed>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e034      	b.n	80029c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d028      	beq.n	80029b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295e:	f7fe fbc5 	bl	80010ec <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	429a      	cmp	r2, r3
 800296c:	d302      	bcc.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d11d      	bne.n	80029b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297e:	2b80      	cmp	r3, #128	@ 0x80
 8002980:	d016      	beq.n	80029b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ba:	2b80      	cmp	r3, #128	@ 0x80
 80029bc:	d1c3      	bne.n	8002946 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029d4:	e034      	b.n	8002a40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 f83e 	bl	8002a58 <I2C_IsAcknowledgeFailed>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e034      	b.n	8002a50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d028      	beq.n	8002a40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7fe fb7d 	bl	80010ec <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d11d      	bne.n	8002a40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d016      	beq.n	8002a40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e007      	b.n	8002a50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d1c3      	bne.n	80029d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6e:	d11b      	bne.n	8002aa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	f043 0204 	orr.w	r2, r3, #4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e272      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8087 	beq.w	8002be2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad4:	4b92      	ldr	r3, [pc, #584]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d00c      	beq.n	8002afa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ae0:	4b8f      	ldr	r3, [pc, #572]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d112      	bne.n	8002b12 <HAL_RCC_OscConfig+0x5e>
 8002aec:	4b8c      	ldr	r3, [pc, #560]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af8:	d10b      	bne.n	8002b12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afa:	4b89      	ldr	r3, [pc, #548]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d06c      	beq.n	8002be0 <HAL_RCC_OscConfig+0x12c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d168      	bne.n	8002be0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e24c      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x76>
 8002b1c:	4b80      	ldr	r3, [pc, #512]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a7f      	ldr	r2, [pc, #508]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	e02e      	b.n	8002b88 <HAL_RCC_OscConfig+0xd4>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x98>
 8002b32:	4b7b      	ldr	r3, [pc, #492]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a7a      	ldr	r2, [pc, #488]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b78      	ldr	r3, [pc, #480]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a77      	ldr	r2, [pc, #476]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0xd4>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0xbc>
 8002b56:	4b72      	ldr	r3, [pc, #456]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a71      	ldr	r2, [pc, #452]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b6f      	ldr	r3, [pc, #444]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6e      	ldr	r2, [pc, #440]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0xd4>
 8002b70:	4b6b      	ldr	r3, [pc, #428]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a6a      	ldr	r2, [pc, #424]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b68      	ldr	r3, [pc, #416]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a67      	ldr	r2, [pc, #412]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe faac 	bl	80010ec <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe faa8 	bl	80010ec <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e200      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b5d      	ldr	r3, [pc, #372]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0xe4>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fa98 	bl	80010ec <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fa94 	bl	80010ec <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	@ 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1ec      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	4b53      	ldr	r3, [pc, #332]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x10c>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d063      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bee:	4b4c      	ldr	r3, [pc, #304]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bfa:	4b49      	ldr	r3, [pc, #292]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d11c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x18c>
 8002c06:	4b46      	ldr	r3, [pc, #280]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	4b43      	ldr	r3, [pc, #268]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x176>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1c0      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4939      	ldr	r1, [pc, #228]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	e03a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c48:	4b36      	ldr	r3, [pc, #216]	@ (8002d24 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fa4d 	bl	80010ec <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c56:	f7fe fa49 	bl	80010ec <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1a1      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	4b2d      	ldr	r3, [pc, #180]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b2a      	ldr	r3, [pc, #168]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4927      	ldr	r1, [pc, #156]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
 8002c88:	e015      	b.n	8002cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	4b26      	ldr	r3, [pc, #152]	@ (8002d24 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fa2c 	bl	80010ec <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe fa28 	bl	80010ec <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e180      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d03a      	beq.n	8002d38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d019      	beq.n	8002cfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fa0c 	bl	80010ec <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fa08 	bl	80010ec <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e160      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	f000 fafe 	bl	80032f8 <RCC_Delay>
 8002cfc:	e01c      	b.n	8002d38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d04:	f7fe f9f2 	bl	80010ec <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0a:	e00f      	b.n	8002d2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7fe f9ee 	bl	80010ec <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d908      	bls.n	8002d2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e146      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	42420000 	.word	0x42420000
 8002d28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2c:	4b92      	ldr	r3, [pc, #584]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e9      	bne.n	8002d0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80a6 	beq.w	8002e92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10d      	bne.n	8002d72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	4b88      	ldr	r3, [pc, #544]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4a87      	ldr	r2, [pc, #540]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	61d3      	str	r3, [r2, #28]
 8002d62:	4b85      	ldr	r3, [pc, #532]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d72:	4b82      	ldr	r3, [pc, #520]	@ (8002f7c <HAL_RCC_OscConfig+0x4c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f7c <HAL_RCC_OscConfig+0x4c8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7e      	ldr	r2, [pc, #504]	@ (8002f7c <HAL_RCC_OscConfig+0x4c8>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe f9af 	bl	80010ec <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7fe f9ab 	bl	80010ec <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b64      	cmp	r3, #100	@ 0x64
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e103      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	4b75      	ldr	r3, [pc, #468]	@ (8002f7c <HAL_RCC_OscConfig+0x4c8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x312>
 8002db8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a6e      	ldr	r2, [pc, #440]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	e02d      	b.n	8002e22 <HAL_RCC_OscConfig+0x36e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x334>
 8002dce:	4b6a      	ldr	r3, [pc, #424]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a69      	ldr	r2, [pc, #420]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6213      	str	r3, [r2, #32]
 8002dda:	4b67      	ldr	r3, [pc, #412]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a66      	ldr	r2, [pc, #408]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	6213      	str	r3, [r2, #32]
 8002de6:	e01c      	b.n	8002e22 <HAL_RCC_OscConfig+0x36e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x356>
 8002df0:	4b61      	ldr	r3, [pc, #388]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4a60      	ldr	r2, [pc, #384]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6213      	str	r3, [r2, #32]
 8002dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	4a5d      	ldr	r2, [pc, #372]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6213      	str	r3, [r2, #32]
 8002e08:	e00b      	b.n	8002e22 <HAL_RCC_OscConfig+0x36e>
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6213      	str	r3, [r2, #32]
 8002e16:	4b58      	ldr	r3, [pc, #352]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4a57      	ldr	r2, [pc, #348]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d015      	beq.n	8002e56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe f95f 	bl	80010ec <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe f95b 	bl	80010ec <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0b1      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e48:	4b4b      	ldr	r3, [pc, #300]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ee      	beq.n	8002e32 <HAL_RCC_OscConfig+0x37e>
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e56:	f7fe f949 	bl	80010ec <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe f945 	bl	80010ec <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e09b      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e74:	4b40      	ldr	r3, [pc, #256]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ee      	bne.n	8002e5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d105      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e86:	4b3c      	ldr	r3, [pc, #240]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8087 	beq.w	8002faa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e9c:	4b36      	ldr	r3, [pc, #216]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d061      	beq.n	8002f6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d146      	bne.n	8002f3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	4b33      	ldr	r3, [pc, #204]	@ (8002f80 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fe f919 	bl	80010ec <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7fe f915 	bl	80010ec <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e06d      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed0:	4b29      	ldr	r3, [pc, #164]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee4:	d108      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ee6:	4b24      	ldr	r3, [pc, #144]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	4921      	ldr	r1, [pc, #132]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a19      	ldr	r1, [r3, #32]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	491b      	ldr	r1, [pc, #108]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f10:	4b1b      	ldr	r3, [pc, #108]	@ (8002f80 <HAL_RCC_OscConfig+0x4cc>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f16:	f7fe f8e9 	bl	80010ec <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1e:	f7fe f8e5 	bl	80010ec <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e03d      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f30:	4b11      	ldr	r3, [pc, #68]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x46a>
 8002f3c:	e035      	b.n	8002faa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3e:	4b10      	ldr	r3, [pc, #64]	@ (8002f80 <HAL_RCC_OscConfig+0x4cc>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7fe f8d2 	bl	80010ec <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe f8ce 	bl	80010ec <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e026      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x498>
 8002f6a:	e01e      	b.n	8002faa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e019      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_RCC_OscConfig+0x500>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0d0      	b.n	800316e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d910      	bls.n	8002ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b67      	ldr	r3, [pc, #412]	@ (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 0207 	bic.w	r2, r3, #7
 8002fe2:	4965      	ldr	r1, [pc, #404]	@ (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b63      	ldr	r3, [pc, #396]	@ (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0b8      	b.n	800316e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d020      	beq.n	800304a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003014:	4b59      	ldr	r3, [pc, #356]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a58      	ldr	r2, [pc, #352]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800301e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800302c:	4b53      	ldr	r3, [pc, #332]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a52      	ldr	r2, [pc, #328]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003036:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003038:	4b50      	ldr	r3, [pc, #320]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	494d      	ldr	r1, [pc, #308]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d040      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b47      	ldr	r3, [pc, #284]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d115      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e07f      	b.n	800316e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003076:	4b41      	ldr	r3, [pc, #260]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e073      	b.n	800316e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003086:	4b3d      	ldr	r3, [pc, #244]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06b      	b.n	800316e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003096:	4b39      	ldr	r3, [pc, #228]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f023 0203 	bic.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4936      	ldr	r1, [pc, #216]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a8:	f7fe f820 	bl	80010ec <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b0:	f7fe f81c 	bl	80010ec <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e053      	b.n	800316e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 020c 	and.w	r2, r3, #12
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d1eb      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d8:	4b27      	ldr	r3, [pc, #156]	@ (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d210      	bcs.n	8003108 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b24      	ldr	r3, [pc, #144]	@ (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 0207 	bic.w	r2, r3, #7
 80030ee:	4922      	ldr	r1, [pc, #136]	@ (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e032      	b.n	800316e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003114:	4b19      	ldr	r3, [pc, #100]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4916      	ldr	r1, [pc, #88]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003132:	4b12      	ldr	r3, [pc, #72]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	490e      	ldr	r1, [pc, #56]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003146:	f000 f821 	bl	800318c <HAL_RCC_GetSysClockFreq>
 800314a:	4602      	mov	r2, r0
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	490a      	ldr	r1, [pc, #40]	@ (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 8003158:	5ccb      	ldrb	r3, [r1, r3]
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	4a09      	ldr	r2, [pc, #36]	@ (8003184 <HAL_RCC_ClockConfig+0x1cc>)
 8003160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003162:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <HAL_RCC_ClockConfig+0x1d0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fe94 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40022000 	.word	0x40022000
 800317c:	40021000 	.word	0x40021000
 8003180:	080082d8 	.word	0x080082d8
 8003184:	2000001c 	.word	0x2000001c
 8003188:	20000020 	.word	0x20000020

0800318c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x94>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d002      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x30>
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x36>
 80031ba:	e027      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031bc:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x98>)
 80031be:	613b      	str	r3, [r7, #16]
      break;
 80031c0:	e027      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	0c9b      	lsrs	r3, r3, #18
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	4a17      	ldr	r2, [pc, #92]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031cc:	5cd3      	ldrb	r3, [r2, r3]
 80031ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d010      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031da:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x94>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	0c5b      	lsrs	r3, r3, #17
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	4a11      	ldr	r2, [pc, #68]	@ (800322c <HAL_RCC_GetSysClockFreq+0xa0>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ee:	fb03 f202 	mul.w	r2, r3, r2
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e004      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003230 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003200:	fb02 f303 	mul.w	r3, r2, r3
 8003204:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	613b      	str	r3, [r7, #16]
      break;
 800320a:	e002      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x98>)
 800320e:	613b      	str	r3, [r7, #16]
      break;
 8003210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003212:	693b      	ldr	r3, [r7, #16]
}
 8003214:	4618      	mov	r0, r3
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	007a1200 	.word	0x007a1200
 8003228:	080082f0 	.word	0x080082f0
 800322c:	08008300 	.word	0x08008300
 8003230:	003d0900 	.word	0x003d0900

08003234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003238:	4b02      	ldr	r3, [pc, #8]	@ (8003244 <HAL_RCC_GetHCLKFreq+0x10>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr
 8003244:	2000001c 	.word	0x2000001c

08003248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800324c:	f7ff fff2 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4903      	ldr	r1, [pc, #12]	@ (800326c <HAL_RCC_GetPCLK1Freq+0x24>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	080082e8 	.word	0x080082e8

08003270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003274:	f7ff ffde 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	0adb      	lsrs	r3, r3, #11
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	@ (8003294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	080082e8 	.word	0x080082e8

08003298 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	220f      	movs	r2, #15
 80032a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032a8:	4b11      	ldr	r3, [pc, #68]	@ (80032f0 <HAL_RCC_GetClockConfig+0x58>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0203 	and.w	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032b4:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <HAL_RCC_GetClockConfig+0x58>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_RCC_GetClockConfig+0x58>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80032cc:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <HAL_RCC_GetClockConfig+0x58>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	08db      	lsrs	r3, r3, #3
 80032d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <HAL_RCC_GetClockConfig+0x5c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0207 	and.w	r2, r3, #7
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40022000 	.word	0x40022000

080032f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003300:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <RCC_Delay+0x34>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <RCC_Delay+0x38>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0a5b      	lsrs	r3, r3, #9
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003314:	bf00      	nop
  }
  while (Delay --);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1e5a      	subs	r2, r3, #1
 800331a:	60fa      	str	r2, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f9      	bne.n	8003314 <RCC_Delay+0x1c>
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	2000001c 	.word	0x2000001c
 8003330:	10624dd3 	.word	0x10624dd3

08003334 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d07d      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003350:	2300      	movs	r3, #0
 8003352:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003354:	4b4f      	ldr	r3, [pc, #316]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	4b4c      	ldr	r3, [pc, #304]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	4a4b      	ldr	r2, [pc, #300]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336a:	61d3      	str	r3, [r2, #28]
 800336c:	4b49      	ldr	r3, [pc, #292]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003378:	2301      	movs	r3, #1
 800337a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	4b46      	ldr	r3, [pc, #280]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d118      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003388:	4b43      	ldr	r3, [pc, #268]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a42      	ldr	r2, [pc, #264]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003394:	f7fd feaa 	bl	80010ec <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339a:	e008      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fd fea6 	bl	80010ec <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	@ 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e06d      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033ba:	4b36      	ldr	r3, [pc, #216]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d02e      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d027      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033e2:	4b2e      	ldr	r3, [pc, #184]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e8:	4b2c      	ldr	r3, [pc, #176]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033ee:	4a29      	ldr	r2, [pc, #164]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d014      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fd fe75 	bl	80010ec <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fd fe71 	bl	80010ec <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e036      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341c:	4b1d      	ldr	r3, [pc, #116]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ee      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003428:	4b1a      	ldr	r3, [pc, #104]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4917      	ldr	r1, [pc, #92]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	4313      	orrs	r3, r2
 8003438:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003440:	4b14      	ldr	r3, [pc, #80]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	4a13      	ldr	r2, [pc, #76]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800344a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003458:	4b0e      	ldr	r3, [pc, #56]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	490b      	ldr	r1, [pc, #44]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003476:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4904      	ldr	r1, [pc, #16]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	40007000 	.word	0x40007000
 800349c:	42420440 	.word	0x42420440

080034a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	2300      	movs	r3, #0
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	f200 808a 	bhi.w	80035de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d045      	beq.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d075      	beq.n	80035c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80034d6:	e082      	b.n	80035de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80034d8:	4b46      	ldr	r3, [pc, #280]	@ (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80034de:	4b45      	ldr	r3, [pc, #276]	@ (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d07b      	beq.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	0c9b      	lsrs	r3, r3, #18
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	4a41      	ldr	r2, [pc, #260]	@ (80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80034f4:	5cd3      	ldrb	r3, [r2, r3]
 80034f6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003502:	4b3c      	ldr	r3, [pc, #240]	@ (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	0c5b      	lsrs	r3, r3, #17
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	4a3b      	ldr	r2, [pc, #236]	@ (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800351c:	4a38      	ldr	r2, [pc, #224]	@ (8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	fbb2 f2f3 	udiv	r2, r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e004      	b.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4a34      	ldr	r2, [pc, #208]	@ (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003538:	4b2e      	ldr	r3, [pc, #184]	@ (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003540:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003544:	d102      	bne.n	800354c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	61bb      	str	r3, [r7, #24]
      break;
 800354a:	e04a      	b.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4a2d      	ldr	r2, [pc, #180]	@ (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	61bb      	str	r3, [r7, #24]
      break;
 800355a:	e042      	b.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800355c:	4b25      	ldr	r3, [pc, #148]	@ (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800356c:	d108      	bne.n	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e01f      	b.n	80035c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800358a:	d109      	bne.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800358c:	4b19      	ldr	r3, [pc, #100]	@ (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003598:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e00f      	b.n	80035c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035aa:	d11c      	bne.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80035ac:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d016      	beq.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80035b8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80035bc:	61bb      	str	r3, [r7, #24]
      break;
 80035be:	e012      	b.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80035c0:	e011      	b.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80035c2:	f7ff fe55 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 80035c6:	4602      	mov	r2, r0
 80035c8:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	0b9b      	lsrs	r3, r3, #14
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	3301      	adds	r3, #1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	61bb      	str	r3, [r7, #24]
      break;
 80035dc:	e004      	b.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80035e6:	bf00      	nop
    }
  }
  return (frequency);
 80035e8:	69bb      	ldr	r3, [r7, #24]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3720      	adds	r7, #32
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	08008304 	.word	0x08008304
 80035fc:	08008314 	.word	0x08008314
 8003600:	007a1200 	.word	0x007a1200
 8003604:	003d0900 	.word	0x003d0900
 8003608:	aaaaaaab 	.word	0xaaaaaaab

0800360c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e041      	b.n	80036a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f839 	bl	80036aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f000 f9b4 	bl	80039b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d001      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e03a      	b.n	800374a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a18      	ldr	r2, [pc, #96]	@ (8003754 <HAL_TIM_Base_Start_IT+0x98>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00e      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x58>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fe:	d009      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x58>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a14      	ldr	r2, [pc, #80]	@ (8003758 <HAL_TIM_Base_Start_IT+0x9c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x58>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a13      	ldr	r2, [pc, #76]	@ (800375c <HAL_TIM_Base_Start_IT+0xa0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d111      	bne.n	8003738 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b06      	cmp	r3, #6
 8003724:	d010      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003736:	e007      	b.n	8003748 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40000400 	.word	0x40000400
 800375c:	40000800 	.word	0x40000800

08003760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0202 	mvn.w	r2, #2
 800378c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8ed 	bl	8003982 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8e0 	bl	8003970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f8ef 	bl	8003994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0204 	mvn.w	r2, #4
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f8c3 	bl	8003982 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8b6 	bl	8003970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8c5 	bl	8003994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b08      	cmp	r3, #8
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b08      	cmp	r3, #8
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0208 	mvn.w	r2, #8
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f899 	bl	8003982 <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f88c 	bl	8003970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f89b 	bl	8003994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b10      	cmp	r3, #16
 8003870:	d122      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b10      	cmp	r3, #16
 800387e:	d11b      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0210 	mvn.w	r2, #16
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2208      	movs	r2, #8
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f86f 	bl	8003982 <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f862 	bl	8003970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f871 	bl	8003994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d107      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0201 	mvn.w	r2, #1
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fc ff00 	bl	80006e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ee:	2b80      	cmp	r3, #128	@ 0x80
 80038f0:	d10e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fc:	2b80      	cmp	r3, #128	@ 0x80
 80038fe:	d107      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8bf 	bl	8003a8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d10e      	bne.n	800393c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003928:	2b40      	cmp	r3, #64	@ 0x40
 800392a:	d107      	bne.n	800393c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f835 	bl	80039a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b20      	cmp	r3, #32
 8003948:	d10e      	bne.n	8003968 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b20      	cmp	r3, #32
 8003956:	d107      	bne.n	8003968 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0220 	mvn.w	r2, #32
 8003960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f88a 	bl	8003a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a29      	ldr	r2, [pc, #164]	@ (8003a70 <TIM_Base_SetConfig+0xb8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00b      	beq.n	80039e8 <TIM_Base_SetConfig+0x30>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d6:	d007      	beq.n	80039e8 <TIM_Base_SetConfig+0x30>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a26      	ldr	r2, [pc, #152]	@ (8003a74 <TIM_Base_SetConfig+0xbc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_Base_SetConfig+0x30>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a25      	ldr	r2, [pc, #148]	@ (8003a78 <TIM_Base_SetConfig+0xc0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d108      	bne.n	80039fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003a70 <TIM_Base_SetConfig+0xb8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0x62>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0x62>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <TIM_Base_SetConfig+0xbc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0x62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a18      	ldr	r2, [pc, #96]	@ (8003a78 <TIM_Base_SetConfig+0xc0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a07      	ldr	r2, [pc, #28]	@ (8003a70 <TIM_Base_SetConfig+0xb8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800

08003a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr

08003a8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e042      	b.n	8003b38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd f998 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	@ 0x24
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f9af 	bl	8003e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	@ 0x28
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d16d      	bne.n	8003c3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_UART_Transmit+0x2c>
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e066      	b.n	8003c3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2221      	movs	r2, #33	@ 0x21
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd fab5 	bl	80010ec <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	88fa      	ldrh	r2, [r7, #6]
 8003b8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b98:	d108      	bne.n	8003bac <HAL_UART_Transmit+0x6c>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e003      	b.n	8003bb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bb4:	e02a      	b.n	8003c0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2180      	movs	r1, #128	@ 0x80
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f8d2 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e036      	b.n	8003c3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	3302      	adds	r3, #2
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	e007      	b.n	8003bfe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	781a      	ldrb	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1cf      	bne.n	8003bb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2140      	movs	r1, #64	@ 0x40
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f8a2 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e006      	b.n	8003c3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b08a      	sub	sp, #40	@ 0x28
 8003c4a:	af02      	add	r7, sp, #8
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d17c      	bne.n	8003d60 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_UART_Receive+0x2c>
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e075      	b.n	8003d62 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2222      	movs	r2, #34	@ 0x22
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8a:	f7fd fa2f 	bl	80010ec <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca4:	d108      	bne.n	8003cb8 <HAL_UART_Receive+0x72>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e003      	b.n	8003cc0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cc0:	e043      	b.n	8003d4a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2120      	movs	r1, #32
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f84c 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e042      	b.n	8003d62 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e01f      	b.n	8003d3c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d04:	d007      	beq.n	8003d16 <HAL_UART_Receive+0xd0>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <HAL_UART_Receive+0xde>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e008      	b.n	8003d36 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1b6      	bne.n	8003cc2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
  }
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b090      	sub	sp, #64	@ 0x40
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	4613      	mov	r3, r2
 8003d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7a:	e050      	b.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d04c      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d8a:	f7fd f9af 	bl	80010ec <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d241      	bcs.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dba:	637a      	str	r2, [r7, #52]	@ 0x34
 8003dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003dc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e5      	bne.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3314      	adds	r3, #20
 8003dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3314      	adds	r3, #20
 8003dec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003dee:	623a      	str	r2, [r7, #32]
 8003df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	69f9      	ldr	r1, [r7, #28]
 8003df4:	6a3a      	ldr	r2, [r7, #32]
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e5      	bne.n	8003dce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e00f      	b.n	8003e3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4013      	ands	r3, r2
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	bf0c      	ite	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	2300      	movne	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d09f      	beq.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3740      	adds	r7, #64	@ 0x40
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003e82:	f023 030c 	bic.w	r3, r3, #12
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8003f5c <UART_SetConfig+0x114>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d103      	bne.n	8003eb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003eb0:	f7ff f9de 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	e002      	b.n	8003ebe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7ff f9c6 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 8003ebc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	4a22      	ldr	r2, [pc, #136]	@ (8003f60 <UART_SetConfig+0x118>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	0119      	lsls	r1, r3, #4
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <UART_SetConfig+0x118>)
 8003ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2064      	movs	r0, #100	@ 0x64
 8003efe:	fb00 f303 	mul.w	r3, r0, r3
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	3332      	adds	r3, #50	@ 0x32
 8003f08:	4a15      	ldr	r2, [pc, #84]	@ (8003f60 <UART_SetConfig+0x118>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f14:	4419      	add	r1, r3
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009a      	lsls	r2, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <UART_SetConfig+0x118>)
 8003f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2064      	movs	r0, #100	@ 0x64
 8003f36:	fb00 f303 	mul.w	r3, r0, r3
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	3332      	adds	r3, #50	@ 0x32
 8003f40:	4a07      	ldr	r2, [pc, #28]	@ (8003f60 <UART_SetConfig+0x118>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	440a      	add	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40013800 	.word	0x40013800
 8003f60:	51eb851f 	.word	0x51eb851f

08003f64 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f6a:	f3ef 8305 	mrs	r3, IPSR
 8003f6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10f      	bne.n	8003f96 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f76:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7a:	607b      	str	r3, [r7, #4]
  return(result);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <osKernelInitialize+0x32>
 8003f82:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <osKernelInitialize+0x60>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d109      	bne.n	8003f9e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f8e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f96:	f06f 0305 	mvn.w	r3, #5
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	e00c      	b.n	8003fb8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f9e:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <osKernelInitialize+0x60>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d105      	bne.n	8003fb2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003fa6:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <osKernelInitialize+0x60>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e002      	b.n	8003fb8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	200005dc 	.word	0x200005dc

08003fc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fce:	f3ef 8305 	mrs	r3, IPSR
 8003fd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fda:	f3ef 8310 	mrs	r3, PRIMASK
 8003fde:	607b      	str	r3, [r7, #4]
  return(result);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <osKernelStart+0x32>
 8003fe6:	4b11      	ldr	r3, [pc, #68]	@ (800402c <osKernelStart+0x64>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d109      	bne.n	8004002 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fee:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003ffa:	f06f 0305 	mvn.w	r3, #5
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	e00e      	b.n	8004020 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004002:	4b0a      	ldr	r3, [pc, #40]	@ (800402c <osKernelStart+0x64>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d107      	bne.n	800401a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800400a:	4b08      	ldr	r3, [pc, #32]	@ (800402c <osKernelStart+0x64>)
 800400c:	2202      	movs	r2, #2
 800400e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004010:	f001 f8a8 	bl	8005164 <vTaskStartScheduler>
      stat = osOK;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e002      	b.n	8004020 <osKernelStart+0x58>
    } else {
      stat = osError;
 800401a:	f04f 33ff 	mov.w	r3, #4294967295
 800401e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	200005dc 	.word	0x200005dc

08004030 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b092      	sub	sp, #72	@ 0x48
 8004034:	af04      	add	r7, sp, #16
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004040:	f3ef 8305 	mrs	r3, IPSR
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004048:	2b00      	cmp	r3, #0
 800404a:	f040 8094 	bne.w	8004176 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404e:	f3ef 8310 	mrs	r3, PRIMASK
 8004052:	623b      	str	r3, [r7, #32]
  return(result);
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f040 808d 	bne.w	8004176 <osThreadNew+0x146>
 800405c:	4b48      	ldr	r3, [pc, #288]	@ (8004180 <osThreadNew+0x150>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d106      	bne.n	8004072 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004064:	f3ef 8311 	mrs	r3, BASEPRI
 8004068:	61fb      	str	r3, [r7, #28]
  return(result);
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 8082 	bne.w	8004176 <osThreadNew+0x146>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d07e      	beq.n	8004176 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004078:	2380      	movs	r3, #128	@ 0x80
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800407c:	2318      	movs	r3, #24
 800407e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004080:	2300      	movs	r3, #0
 8004082:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004084:	f107 031b 	add.w	r3, r7, #27
 8004088:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d045      	beq.n	8004122 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <osThreadNew+0x74>
        name = attr->name;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <osThreadNew+0x9a>
 80040b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ba:	2b38      	cmp	r3, #56	@ 0x38
 80040bc:	d805      	bhi.n	80040ca <osThreadNew+0x9a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <osThreadNew+0x9e>
        return (NULL);
 80040ca:	2300      	movs	r3, #0
 80040cc:	e054      	b.n	8004178 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00e      	beq.n	8004104 <osThreadNew+0xd4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2ba7      	cmp	r3, #167	@ 0xa7
 80040ec:	d90a      	bls.n	8004104 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <osThreadNew+0xd4>
        mem = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004102:	e010      	b.n	8004126 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10c      	bne.n	8004126 <osThreadNew+0xf6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d108      	bne.n	8004126 <osThreadNew+0xf6>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d104      	bne.n	8004126 <osThreadNew+0xf6>
          mem = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004120:	e001      	b.n	8004126 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	2b01      	cmp	r3, #1
 800412a:	d110      	bne.n	800414e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004134:	9202      	str	r2, [sp, #8]
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004140:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fe24 	bl	8004d90 <xTaskCreateStatic>
 8004148:	4603      	mov	r3, r0
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e013      	b.n	8004176 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800414e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d110      	bne.n	8004176 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	b29a      	uxth	r2, r3
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fe71 	bl	8004e4e <xTaskCreate>
 800416c:	4603      	mov	r3, r0
 800416e:	2b01      	cmp	r3, #1
 8004170:	d001      	beq.n	8004176 <osThreadNew+0x146>
          hTask = NULL;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004176:	697b      	ldr	r3, [r7, #20]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3738      	adds	r7, #56	@ 0x38
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	200005dc 	.word	0x200005dc

08004184 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800418c:	f3ef 8305 	mrs	r3, IPSR
 8004190:	613b      	str	r3, [r7, #16]
  return(result);
 8004192:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10f      	bne.n	80041b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004198:	f3ef 8310 	mrs	r3, PRIMASK
 800419c:	60fb      	str	r3, [r7, #12]
  return(result);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <osDelay+0x34>
 80041a4:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <osDelay+0x58>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d109      	bne.n	80041c0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041ac:	f3ef 8311 	mrs	r3, BASEPRI
 80041b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <osDelay+0x3c>
    stat = osErrorISR;
 80041b8:	f06f 0305 	mvn.w	r3, #5
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e007      	b.n	80041d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 ff94 	bl	80050f8 <vTaskDelay>
    }
  }

  return (stat);
 80041d0:	697b      	ldr	r3, [r7, #20]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	200005dc 	.word	0x200005dc

080041e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a06      	ldr	r2, [pc, #24]	@ (8004208 <vApplicationGetIdleTaskMemory+0x28>)
 80041f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4a05      	ldr	r2, [pc, #20]	@ (800420c <vApplicationGetIdleTaskMemory+0x2c>)
 80041f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2280      	movs	r2, #128	@ 0x80
 80041fc:	601a      	str	r2, [r3, #0]
}
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr
 8004208:	200005e0 	.word	0x200005e0
 800420c:	20000688 	.word	0x20000688

08004210 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4a07      	ldr	r2, [pc, #28]	@ (800423c <vApplicationGetTimerTaskMemory+0x2c>)
 8004220:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4a06      	ldr	r2, [pc, #24]	@ (8004240 <vApplicationGetTimerTaskMemory+0x30>)
 8004226:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800422e:	601a      	str	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000888 	.word	0x20000888
 8004240:	20000930 	.word	0x20000930

08004244 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f103 0208 	add.w	r2, r3, #8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f103 0208 	add.w	r2, r3, #8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f103 0208 	add.w	r2, r3, #8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f6:	d103      	bne.n	8004300 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e00c      	b.n	800431a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3308      	adds	r3, #8
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e002      	b.n	800430e <vListInsert+0x2e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	429a      	cmp	r2, r3
 8004318:	d2f6      	bcs.n	8004308 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	601a      	str	r2, [r3, #0]
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6892      	ldr	r2, [r2, #8]
 8004366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6852      	ldr	r2, [r2, #4]
 8004370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	429a      	cmp	r2, r3
 800437a:	d103      	bne.n	8004384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	1e5a      	subs	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr
	...

080043a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043ca:	bf00      	nop
 80043cc:	bf00      	nop
 80043ce:	e7fd      	b.n	80043cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043d0:	f002 f824 	bl	800641c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043dc:	68f9      	ldr	r1, [r7, #12]
 80043de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	441a      	add	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004400:	3b01      	subs	r3, #1
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	441a      	add	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	22ff      	movs	r2, #255	@ 0xff
 8004414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	22ff      	movs	r2, #255	@ 0xff
 800441c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d114      	bne.n	8004450 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01a      	beq.n	8004464 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3310      	adds	r3, #16
 8004432:	4618      	mov	r0, r3
 8004434:	f001 f936 	bl	80056a4 <xTaskRemoveFromEventList>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d012      	beq.n	8004464 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800443e:	4b0d      	ldr	r3, [pc, #52]	@ (8004474 <xQueueGenericReset+0xd0>)
 8004440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	e009      	b.n	8004464 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3310      	adds	r3, #16
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fef5 	bl	8004244 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3324      	adds	r3, #36	@ 0x24
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fef0 	bl	8004244 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004464:	f002 f80a 	bl	800647c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004468:	2301      	movs	r3, #1
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	e000ed04 	.word	0xe000ed04

08004478 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08e      	sub	sp, #56	@ 0x38
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	e7fd      	b.n	80044be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <xQueueGenericCreateStatic+0x56>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <xQueueGenericCreateStatic+0x5a>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <xQueueGenericCreateStatic+0x5c>
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10b      	bne.n	80044f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	623b      	str	r3, [r7, #32]
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d102      	bne.n	80044fc <xQueueGenericCreateStatic+0x84>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <xQueueGenericCreateStatic+0x88>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <xQueueGenericCreateStatic+0x8a>
 8004500:	2300      	movs	r3, #0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	61fb      	str	r3, [r7, #28]
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	e7fd      	b.n	800451a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800451e:	2350      	movs	r3, #80	@ 0x50
 8004520:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b50      	cmp	r3, #80	@ 0x50
 8004526:	d00b      	beq.n	8004540 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	61bb      	str	r3, [r7, #24]
}
 800453a:	bf00      	nop
 800453c:	bf00      	nop
 800453e:	e7fd      	b.n	800453c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00d      	beq.n	8004566 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800454a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004552:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	4613      	mov	r3, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f805 	bl	8004570 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004568:	4618      	mov	r0, r3
 800456a:	3730      	adds	r7, #48	@ 0x30
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e002      	b.n	8004592 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800459e:	2101      	movs	r1, #1
 80045a0:	69b8      	ldr	r0, [r7, #24]
 80045a2:	f7ff feff 	bl	80043a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08e      	sub	sp, #56	@ 0x38
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045c6:	2300      	movs	r3, #0
 80045c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <xQueueGenericSend+0x34>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <xQueueGenericSend+0x42>
 80045f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <xQueueGenericSend+0x46>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <xQueueGenericSend+0x48>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <xQueueGenericSend+0x64>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d103      	bne.n	800462a <xQueueGenericSend+0x72>
 8004622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <xQueueGenericSend+0x76>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <xQueueGenericSend+0x78>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <xQueueGenericSend+0x94>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	623b      	str	r3, [r7, #32]
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	e7fd      	b.n	8004648 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800464c:	f001 f9f4 	bl	8005a38 <xTaskGetSchedulerState>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <xQueueGenericSend+0xa4>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <xQueueGenericSend+0xa8>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <xQueueGenericSend+0xaa>
 8004660:	2300      	movs	r3, #0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10b      	bne.n	800467e <xQueueGenericSend+0xc6>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	61fb      	str	r3, [r7, #28]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800467e:	f001 fecd 	bl	800641c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468a:	429a      	cmp	r2, r3
 800468c:	d302      	bcc.n	8004694 <xQueueGenericSend+0xdc>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d129      	bne.n	80046e8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800469a:	f000 fa0d 	bl	8004ab8 <prvCopyDataToQueue>
 800469e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d010      	beq.n	80046ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046aa:	3324      	adds	r3, #36	@ 0x24
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fff9 	bl	80056a4 <xTaskRemoveFromEventList>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d013      	beq.n	80046e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046b8:	4b3f      	ldr	r3, [pc, #252]	@ (80047b8 <xQueueGenericSend+0x200>)
 80046ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	e00a      	b.n	80046e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046d0:	4b39      	ldr	r3, [pc, #228]	@ (80047b8 <xQueueGenericSend+0x200>)
 80046d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046e0:	f001 fecc 	bl	800647c <vPortExitCritical>
				return pdPASS;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e063      	b.n	80047b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046ee:	f001 fec5 	bl	800647c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e05c      	b.n	80047b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	4618      	mov	r0, r3
 8004702:	f001 f833 	bl	800576c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004706:	2301      	movs	r3, #1
 8004708:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800470a:	f001 feb7 	bl	800647c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800470e:	f000 fd99 	bl	8005244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004712:	f001 fe83 	bl	800641c <vPortEnterCritical>
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800471c:	b25b      	sxtb	r3, r3
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d103      	bne.n	800472c <xQueueGenericSend+0x174>
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800472c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004732:	b25b      	sxtb	r3, r3
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d103      	bne.n	8004742 <xQueueGenericSend+0x18a>
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004742:	f001 fe9b 	bl	800647c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004746:	1d3a      	adds	r2, r7, #4
 8004748:	f107 0314 	add.w	r3, r7, #20
 800474c:	4611      	mov	r1, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f001 f822 	bl	8005798 <xTaskCheckForTimeOut>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d124      	bne.n	80047a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800475a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800475c:	f000 faa4 	bl	8004ca8 <prvIsQueueFull>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d018      	beq.n	8004798 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	3310      	adds	r3, #16
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f000 ff46 	bl	8005600 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004776:	f000 fa2f 	bl	8004bd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800477a:	f000 fd71 	bl	8005260 <xTaskResumeAll>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	f47f af7c 	bne.w	800467e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004786:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <xQueueGenericSend+0x200>)
 8004788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	e772      	b.n	800467e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800479a:	f000 fa1d 	bl	8004bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800479e:	f000 fd5f 	bl	8005260 <xTaskResumeAll>
 80047a2:	e76c      	b.n	800467e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047a6:	f000 fa17 	bl	8004bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047aa:	f000 fd59 	bl	8005260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047ae:	2300      	movs	r3, #0
		}
	}
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3738      	adds	r7, #56	@ 0x38
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	e000ed04 	.word	0xe000ed04

080047bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08e      	sub	sp, #56	@ 0x38
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80047ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <xQueueGenericSendFromISR+0x3e>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <xQueueGenericSendFromISR+0x42>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <xQueueGenericSendFromISR+0x44>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	623b      	str	r3, [r7, #32]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d103      	bne.n	800482a <xQueueGenericSendFromISR+0x6e>
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <xQueueGenericSendFromISR+0x72>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <xQueueGenericSendFromISR+0x74>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10b      	bne.n	800484c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	61fb      	str	r3, [r7, #28]
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	e7fd      	b.n	8004848 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800484c:	f001 fea8 	bl	80065a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004850:	f3ef 8211 	mrs	r2, BASEPRI
 8004854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	61ba      	str	r2, [r7, #24]
 8004866:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004868:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800486a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004874:	429a      	cmp	r2, r3
 8004876:	d302      	bcc.n	800487e <xQueueGenericSendFromISR+0xc2>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d12c      	bne.n	80048d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800488e:	f000 f913 	bl	8004ab8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004892:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d112      	bne.n	80048c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800489c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d016      	beq.n	80048d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a6:	3324      	adds	r3, #36	@ 0x24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fefb 	bl	80056a4 <xTaskRemoveFromEventList>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00e      	beq.n	80048d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	e007      	b.n	80048d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048c6:	3301      	adds	r3, #1
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	b25a      	sxtb	r2, r3
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80048d2:	2301      	movs	r3, #1
 80048d4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80048d6:	e001      	b.n	80048dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34
 80048dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3738      	adds	r7, #56	@ 0x38
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	@ 0x30
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004900:	2300      	movs	r3, #0
 8004902:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <xQueueReceive+0x32>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	623b      	str	r3, [r7, #32]
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	e7fd      	b.n	8004922 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <xQueueReceive+0x40>
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <xQueueReceive+0x44>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <xQueueReceive+0x46>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <xQueueReceive+0x62>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	61fb      	str	r3, [r7, #28]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004956:	f001 f86f 	bl	8005a38 <xTaskGetSchedulerState>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <xQueueReceive+0x72>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <xQueueReceive+0x76>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <xQueueReceive+0x78>
 800496a:	2300      	movs	r3, #0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10b      	bne.n	8004988 <xQueueReceive+0x94>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	61bb      	str	r3, [r7, #24]
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004988:	f001 fd48 	bl	800641c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01f      	beq.n	80049d8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800499c:	f000 f8f6 	bl	8004b8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	1e5a      	subs	r2, r3, #1
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00f      	beq.n	80049d0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	3310      	adds	r3, #16
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fe75 	bl	80056a4 <xTaskRemoveFromEventList>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049c0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ab4 <xQueueReceive+0x1c0>)
 80049c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049d0:	f001 fd54 	bl	800647c <vPortExitCritical>
				return pdPASS;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e069      	b.n	8004aac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049de:	f001 fd4d 	bl	800647c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e062      	b.n	8004aac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049ec:	f107 0310 	add.w	r3, r7, #16
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 febb 	bl	800576c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049f6:	2301      	movs	r3, #1
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049fa:	f001 fd3f 	bl	800647c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049fe:	f000 fc21 	bl	8005244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a02:	f001 fd0b 	bl	800641c <vPortEnterCritical>
 8004a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a0c:	b25b      	sxtb	r3, r3
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d103      	bne.n	8004a1c <xQueueReceive+0x128>
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a22:	b25b      	sxtb	r3, r3
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d103      	bne.n	8004a32 <xQueueReceive+0x13e>
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a32:	f001 fd23 	bl	800647c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a36:	1d3a      	adds	r2, r7, #4
 8004a38:	f107 0310 	add.w	r3, r7, #16
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 feaa 	bl	8005798 <xTaskCheckForTimeOut>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d123      	bne.n	8004a92 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a4c:	f000 f916 	bl	8004c7c <prvIsQueueEmpty>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d017      	beq.n	8004a86 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a58:	3324      	adds	r3, #36	@ 0x24
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fdce 	bl	8005600 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a66:	f000 f8b7 	bl	8004bd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a6a:	f000 fbf9 	bl	8005260 <xTaskResumeAll>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d189      	bne.n	8004988 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004a74:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab4 <xQueueReceive+0x1c0>)
 8004a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	e780      	b.n	8004988 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a88:	f000 f8a6 	bl	8004bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a8c:	f000 fbe8 	bl	8005260 <xTaskResumeAll>
 8004a90:	e77a      	b.n	8004988 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a94:	f000 f8a0 	bl	8004bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a98:	f000 fbe2 	bl	8005260 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a9e:	f000 f8ed 	bl	8004c7c <prvIsQueueEmpty>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f43f af6f 	beq.w	8004988 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004aaa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3730      	adds	r7, #48	@ 0x30
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	e000ed04 	.word	0xe000ed04

08004ab8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10d      	bne.n	8004af2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d14d      	bne.n	8004b7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 ffc6 	bl	8005a74 <xTaskPriorityDisinherit>
 8004ae8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	e043      	b.n	8004b7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d119      	bne.n	8004b2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6898      	ldr	r0, [r3, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	461a      	mov	r2, r3
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	f002 f814 	bl	8006b30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	441a      	add	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d32b      	bcc.n	8004b7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	609a      	str	r2, [r3, #8]
 8004b2a:	e026      	b.n	8004b7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68d8      	ldr	r0, [r3, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	461a      	mov	r2, r3
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	f001 fffa 	bl	8006b30 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	425b      	negs	r3, r3
 8004b46:	441a      	add	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d207      	bcs.n	8004b68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b60:	425b      	negs	r3, r3
 8004b62:	441a      	add	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d105      	bne.n	8004b7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004b82:	697b      	ldr	r3, [r7, #20]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d018      	beq.n	8004bd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	441a      	add	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d303      	bcc.n	8004bc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68d9      	ldr	r1, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6838      	ldr	r0, [r7, #0]
 8004bcc:	f001 ffb0 	bl	8006b30 <memcpy>
	}
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004be0:	f001 fc1c 	bl	800641c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bec:	e011      	b.n	8004c12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d012      	beq.n	8004c1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3324      	adds	r3, #36	@ 0x24
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fd52 	bl	80056a4 <xTaskRemoveFromEventList>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c06:	f000 fe2b 	bl	8005860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	dce9      	bgt.n	8004bee <prvUnlockQueue+0x16>
 8004c1a:	e000      	b.n	8004c1e <prvUnlockQueue+0x46>
					break;
 8004c1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	22ff      	movs	r2, #255	@ 0xff
 8004c22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004c26:	f001 fc29 	bl	800647c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c2a:	f001 fbf7 	bl	800641c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c36:	e011      	b.n	8004c5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d012      	beq.n	8004c66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3310      	adds	r3, #16
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fd2d 	bl	80056a4 <xTaskRemoveFromEventList>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c50:	f000 fe06 	bl	8005860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c54:	7bbb      	ldrb	r3, [r7, #14]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	dce9      	bgt.n	8004c38 <prvUnlockQueue+0x60>
 8004c64:	e000      	b.n	8004c68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	22ff      	movs	r2, #255	@ 0xff
 8004c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004c70:	f001 fc04 	bl	800647c <vPortExitCritical>
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c84:	f001 fbca 	bl	800641c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e001      	b.n	8004c9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c9a:	f001 fbef 	bl	800647c <vPortExitCritical>

	return xReturn;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cb0:	f001 fbb4 	bl	800641c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d102      	bne.n	8004cc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e001      	b.n	8004cca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cca:	f001 fbd7 	bl	800647c <vPortExitCritical>

	return xReturn;
 8004cce:	68fb      	ldr	r3, [r7, #12]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e014      	b.n	8004d12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8004d24 <vQueueAddToRegistry+0x4c>)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cf4:	490b      	ldr	r1, [pc, #44]	@ (8004d24 <vQueueAddToRegistry+0x4c>)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cfe:	4a09      	ldr	r2, [pc, #36]	@ (8004d24 <vQueueAddToRegistry+0x4c>)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4413      	add	r3, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d0a:	e006      	b.n	8004d1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b07      	cmp	r3, #7
 8004d16:	d9e7      	bls.n	8004ce8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	20000d30 	.word	0x20000d30

08004d28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d38:	f001 fb70 	bl	800641c <vPortEnterCritical>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d42:	b25b      	sxtb	r3, r3
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d103      	bne.n	8004d52 <vQueueWaitForMessageRestricted+0x2a>
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d58:	b25b      	sxtb	r3, r3
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d103      	bne.n	8004d68 <vQueueWaitForMessageRestricted+0x40>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d68:	f001 fb88 	bl	800647c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3324      	adds	r3, #36	@ 0x24
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fc65 	bl	800564c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d82:	6978      	ldr	r0, [r7, #20]
 8004d84:	f7ff ff28 	bl	8004bd8 <prvUnlockQueue>
	}
 8004d88:	bf00      	nop
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08e      	sub	sp, #56	@ 0x38
 8004d94:	af04      	add	r7, sp, #16
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10b      	bne.n	8004dbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	623b      	str	r3, [r7, #32]
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <xTaskCreateStatic+0x4a>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	61fb      	str	r3, [r7, #28]
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	e7fd      	b.n	8004dd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dda:	23a8      	movs	r3, #168	@ 0xa8
 8004ddc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2ba8      	cmp	r3, #168	@ 0xa8
 8004de2:	d00b      	beq.n	8004dfc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	61bb      	str	r3, [r7, #24]
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	e7fd      	b.n	8004df8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01e      	beq.n	8004e40 <xTaskCreateStatic+0xb0>
 8004e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01b      	beq.n	8004e40 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e10:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	9303      	str	r3, [sp, #12]
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	9302      	str	r3, [sp, #8]
 8004e22:	f107 0314 	add.w	r3, r7, #20
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f850 	bl	8004ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e3a:	f000 f8ed 	bl	8005018 <prvAddNewTaskToReadyList>
 8004e3e:	e001      	b.n	8004e44 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e44:	697b      	ldr	r3, [r7, #20]
	}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3728      	adds	r7, #40	@ 0x28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b08c      	sub	sp, #48	@ 0x30
 8004e52:	af04      	add	r7, sp, #16
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 fbdc 	bl	8006620 <pvPortMalloc>
 8004e68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00e      	beq.n	8004e8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e70:	20a8      	movs	r0, #168	@ 0xa8
 8004e72:	f001 fbd5 	bl	8006620 <pvPortMalloc>
 8004e76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e84:	e005      	b.n	8004e92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e86:	6978      	ldr	r0, [r7, #20]
 8004e88:	f001 fc92 	bl	80067b0 <vPortFree>
 8004e8c:	e001      	b.n	8004e92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d017      	beq.n	8004ec8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ea0:	88fa      	ldrh	r2, [r7, #6]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	9302      	str	r3, [sp, #8]
 8004eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f80e 	bl	8004ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ebc:	69f8      	ldr	r0, [r7, #28]
 8004ebe:	f000 f8ab 	bl	8005018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	e002      	b.n	8004ece <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ecc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ece:	69bb      	ldr	r3, [r7, #24]
	}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	461a      	mov	r2, r3
 8004ef0:	21a5      	movs	r1, #165	@ 0xa5
 8004ef2:	f001 fd93 	bl	8006a1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f00:	3b01      	subs	r3, #1
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f023 0307 	bic.w	r3, r3, #7
 8004f0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	617b      	str	r3, [r7, #20]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e012      	b.n	8004f5e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	7819      	ldrb	r1, [r3, #0]
 8004f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	3334      	adds	r3, #52	@ 0x34
 8004f48:	460a      	mov	r2, r1
 8004f4a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d006      	beq.n	8004f66 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	2b0f      	cmp	r3, #15
 8004f62:	d9e9      	bls.n	8004f38 <prvInitialiseNewTask+0x60>
 8004f64:	e000      	b.n	8004f68 <prvInitialiseNewTask+0x90>
		{
			break;
 8004f66:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f72:	2b37      	cmp	r3, #55	@ 0x37
 8004f74:	d901      	bls.n	8004f7a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f76:	2337      	movs	r3, #55	@ 0x37
 8004f78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	2200      	movs	r2, #0
 8004f8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff f976 	bl	8004282 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	3318      	adds	r3, #24
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff f971 	bl	8004282 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc8:	3354      	adds	r3, #84	@ 0x54
 8004fca:	224c      	movs	r2, #76	@ 0x4c
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 fd24 	bl	8006a1c <memset>
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800500c <prvInitialiseNewTask+0x134>)
 8004fd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8005010 <prvInitialiseNewTask+0x138>)
 8004fde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8005014 <prvInitialiseNewTask+0x13c>)
 8004fe4:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	68f9      	ldr	r1, [r7, #12]
 8004fea:	69b8      	ldr	r0, [r7, #24]
 8004fec:	f001 f926 	bl	800623c <pxPortInitialiseStack>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005002:	bf00      	nop
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	200021cc 	.word	0x200021cc
 8005010:	20002234 	.word	0x20002234
 8005014:	2000229c 	.word	0x2000229c

08005018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005020:	f001 f9fc 	bl	800641c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005024:	4b2d      	ldr	r3, [pc, #180]	@ (80050dc <prvAddNewTaskToReadyList+0xc4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	4a2c      	ldr	r2, [pc, #176]	@ (80050dc <prvAddNewTaskToReadyList+0xc4>)
 800502c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800502e:	4b2c      	ldr	r3, [pc, #176]	@ (80050e0 <prvAddNewTaskToReadyList+0xc8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005036:	4a2a      	ldr	r2, [pc, #168]	@ (80050e0 <prvAddNewTaskToReadyList+0xc8>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800503c:	4b27      	ldr	r3, [pc, #156]	@ (80050dc <prvAddNewTaskToReadyList+0xc4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d110      	bne.n	8005066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005044:	f000 fc30 	bl	80058a8 <prvInitialiseTaskLists>
 8005048:	e00d      	b.n	8005066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800504a:	4b26      	ldr	r3, [pc, #152]	@ (80050e4 <prvAddNewTaskToReadyList+0xcc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005052:	4b23      	ldr	r3, [pc, #140]	@ (80050e0 <prvAddNewTaskToReadyList+0xc8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	429a      	cmp	r2, r3
 800505e:	d802      	bhi.n	8005066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005060:	4a1f      	ldr	r2, [pc, #124]	@ (80050e0 <prvAddNewTaskToReadyList+0xc8>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005066:	4b20      	ldr	r3, [pc, #128]	@ (80050e8 <prvAddNewTaskToReadyList+0xd0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <prvAddNewTaskToReadyList+0xd0>)
 800506e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005070:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <prvAddNewTaskToReadyList+0xd0>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800507c:	4b1b      	ldr	r3, [pc, #108]	@ (80050ec <prvAddNewTaskToReadyList+0xd4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d903      	bls.n	800508c <prvAddNewTaskToReadyList+0x74>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	4a18      	ldr	r2, [pc, #96]	@ (80050ec <prvAddNewTaskToReadyList+0xd4>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4a15      	ldr	r2, [pc, #84]	@ (80050f0 <prvAddNewTaskToReadyList+0xd8>)
 800509a:	441a      	add	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7ff f8f9 	bl	800429a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050a8:	f001 f9e8 	bl	800647c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050ac:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <prvAddNewTaskToReadyList+0xcc>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00e      	beq.n	80050d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050b4:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <prvAddNewTaskToReadyList+0xc8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050be:	429a      	cmp	r2, r3
 80050c0:	d207      	bcs.n	80050d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050c2:	4b0c      	ldr	r3, [pc, #48]	@ (80050f4 <prvAddNewTaskToReadyList+0xdc>)
 80050c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20001244 	.word	0x20001244
 80050e0:	20000d70 	.word	0x20000d70
 80050e4:	20001250 	.word	0x20001250
 80050e8:	20001260 	.word	0x20001260
 80050ec:	2000124c 	.word	0x2000124c
 80050f0:	20000d74 	.word	0x20000d74
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800510a:	4b14      	ldr	r3, [pc, #80]	@ (800515c <vTaskDelay+0x64>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <vTaskDelay+0x32>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60bb      	str	r3, [r7, #8]
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop
 8005128:	e7fd      	b.n	8005126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800512a:	f000 f88b 	bl	8005244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800512e:	2100      	movs	r1, #0
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fd0f 	bl	8005b54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005136:	f000 f893 	bl	8005260 <xTaskResumeAll>
 800513a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005142:	4b07      	ldr	r3, [pc, #28]	@ (8005160 <vTaskDelay+0x68>)
 8005144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	2000126c 	.word	0x2000126c
 8005160:	e000ed04 	.word	0xe000ed04

08005164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	@ 0x28
 8005168:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005172:	463a      	mov	r2, r7
 8005174:	1d39      	adds	r1, r7, #4
 8005176:	f107 0308 	add.w	r3, r7, #8
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff f830 	bl	80041e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005180:	6839      	ldr	r1, [r7, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	9202      	str	r2, [sp, #8]
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	2300      	movs	r3, #0
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	2300      	movs	r3, #0
 8005190:	460a      	mov	r2, r1
 8005192:	4924      	ldr	r1, [pc, #144]	@ (8005224 <vTaskStartScheduler+0xc0>)
 8005194:	4824      	ldr	r0, [pc, #144]	@ (8005228 <vTaskStartScheduler+0xc4>)
 8005196:	f7ff fdfb 	bl	8004d90 <xTaskCreateStatic>
 800519a:	4603      	mov	r3, r0
 800519c:	4a23      	ldr	r2, [pc, #140]	@ (800522c <vTaskStartScheduler+0xc8>)
 800519e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051a0:	4b22      	ldr	r3, [pc, #136]	@ (800522c <vTaskStartScheduler+0xc8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051a8:	2301      	movs	r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e001      	b.n	80051b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d102      	bne.n	80051be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051b8:	f000 fd20 	bl	8005bfc <xTimerCreateTimerTask>
 80051bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d11b      	bne.n	80051fc <vTaskStartScheduler+0x98>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	613b      	str	r3, [r7, #16]
}
 80051d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051d8:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <vTaskStartScheduler+0xcc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3354      	adds	r3, #84	@ 0x54
 80051de:	4a15      	ldr	r2, [pc, #84]	@ (8005234 <vTaskStartScheduler+0xd0>)
 80051e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051e2:	4b15      	ldr	r3, [pc, #84]	@ (8005238 <vTaskStartScheduler+0xd4>)
 80051e4:	f04f 32ff 	mov.w	r2, #4294967295
 80051e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051ea:	4b14      	ldr	r3, [pc, #80]	@ (800523c <vTaskStartScheduler+0xd8>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80051f0:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <vTaskStartScheduler+0xdc>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051f6:	f001 f89f 	bl	8006338 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051fa:	e00f      	b.n	800521c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d10b      	bne.n	800521c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <vTaskStartScheduler+0xb4>
}
 800521c:	bf00      	nop
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	080074b0 	.word	0x080074b0
 8005228:	08005879 	.word	0x08005879
 800522c:	20001268 	.word	0x20001268
 8005230:	20000d70 	.word	0x20000d70
 8005234:	2000002c 	.word	0x2000002c
 8005238:	20001264 	.word	0x20001264
 800523c:	20001250 	.word	0x20001250
 8005240:	20001248 	.word	0x20001248

08005244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005248:	4b04      	ldr	r3, [pc, #16]	@ (800525c <vTaskSuspendAll+0x18>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	4a03      	ldr	r2, [pc, #12]	@ (800525c <vTaskSuspendAll+0x18>)
 8005250:	6013      	str	r3, [r2, #0]
}
 8005252:	bf00      	nop
 8005254:	46bd      	mov	sp, r7
 8005256:	bc80      	pop	{r7}
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	2000126c 	.word	0x2000126c

08005260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800526e:	4b42      	ldr	r3, [pc, #264]	@ (8005378 <xTaskResumeAll+0x118>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <xTaskResumeAll+0x2e>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	603b      	str	r3, [r7, #0]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800528e:	f001 f8c5 	bl	800641c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005292:	4b39      	ldr	r3, [pc, #228]	@ (8005378 <xTaskResumeAll+0x118>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3b01      	subs	r3, #1
 8005298:	4a37      	ldr	r2, [pc, #220]	@ (8005378 <xTaskResumeAll+0x118>)
 800529a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800529c:	4b36      	ldr	r3, [pc, #216]	@ (8005378 <xTaskResumeAll+0x118>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d162      	bne.n	800536a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052a4:	4b35      	ldr	r3, [pc, #212]	@ (800537c <xTaskResumeAll+0x11c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d05e      	beq.n	800536a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052ac:	e02f      	b.n	800530e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80052ae:	4b34      	ldr	r3, [pc, #208]	@ (8005380 <xTaskResumeAll+0x120>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3318      	adds	r3, #24
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff f848 	bl	8004350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff f843 	bl	8004350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005384 <xTaskResumeAll+0x124>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d903      	bls.n	80052de <xTaskResumeAll+0x7e>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	4a2a      	ldr	r2, [pc, #168]	@ (8005384 <xTaskResumeAll+0x124>)
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4a27      	ldr	r2, [pc, #156]	@ (8005388 <xTaskResumeAll+0x128>)
 80052ec:	441a      	add	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f7fe ffd0 	bl	800429a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fe:	4b23      	ldr	r3, [pc, #140]	@ (800538c <xTaskResumeAll+0x12c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005304:	429a      	cmp	r2, r3
 8005306:	d302      	bcc.n	800530e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005308:	4b21      	ldr	r3, [pc, #132]	@ (8005390 <xTaskResumeAll+0x130>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800530e:	4b1c      	ldr	r3, [pc, #112]	@ (8005380 <xTaskResumeAll+0x120>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1cb      	bne.n	80052ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800531c:	f000 fb68 	bl	80059f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005320:	4b1c      	ldr	r3, [pc, #112]	@ (8005394 <xTaskResumeAll+0x134>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d010      	beq.n	800534e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800532c:	f000 f844 	bl	80053b8 <xTaskIncrementTick>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005336:	4b16      	ldr	r3, [pc, #88]	@ (8005390 <xTaskResumeAll+0x130>)
 8005338:	2201      	movs	r2, #1
 800533a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3b01      	subs	r3, #1
 8005340:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f1      	bne.n	800532c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005348:	4b12      	ldr	r3, [pc, #72]	@ (8005394 <xTaskResumeAll+0x134>)
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800534e:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <xTaskResumeAll+0x130>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d009      	beq.n	800536a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005356:	2301      	movs	r3, #1
 8005358:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800535a:	4b0f      	ldr	r3, [pc, #60]	@ (8005398 <xTaskResumeAll+0x138>)
 800535c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800536a:	f001 f887 	bl	800647c <vPortExitCritical>

	return xAlreadyYielded;
 800536e:	68bb      	ldr	r3, [r7, #8]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	2000126c 	.word	0x2000126c
 800537c:	20001244 	.word	0x20001244
 8005380:	20001204 	.word	0x20001204
 8005384:	2000124c 	.word	0x2000124c
 8005388:	20000d74 	.word	0x20000d74
 800538c:	20000d70 	.word	0x20000d70
 8005390:	20001258 	.word	0x20001258
 8005394:	20001254 	.word	0x20001254
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053a2:	4b04      	ldr	r3, [pc, #16]	@ (80053b4 <xTaskGetTickCount+0x18>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053a8:	687b      	ldr	r3, [r7, #4]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr
 80053b4:	20001248 	.word	0x20001248

080053b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c2:	4b52      	ldr	r3, [pc, #328]	@ (800550c <xTaskIncrementTick+0x154>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 808f 	bne.w	80054ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053cc:	4b50      	ldr	r3, [pc, #320]	@ (8005510 <xTaskIncrementTick+0x158>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053d4:	4a4e      	ldr	r2, [pc, #312]	@ (8005510 <xTaskIncrementTick+0x158>)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d121      	bne.n	8005424 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80053e0:	4b4c      	ldr	r3, [pc, #304]	@ (8005514 <xTaskIncrementTick+0x15c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <xTaskIncrementTick+0x4a>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	603b      	str	r3, [r7, #0]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <xTaskIncrementTick+0x46>
 8005402:	4b44      	ldr	r3, [pc, #272]	@ (8005514 <xTaskIncrementTick+0x15c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	4b43      	ldr	r3, [pc, #268]	@ (8005518 <xTaskIncrementTick+0x160>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a41      	ldr	r2, [pc, #260]	@ (8005514 <xTaskIncrementTick+0x15c>)
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	4a41      	ldr	r2, [pc, #260]	@ (8005518 <xTaskIncrementTick+0x160>)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4b41      	ldr	r3, [pc, #260]	@ (800551c <xTaskIncrementTick+0x164>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3301      	adds	r3, #1
 800541c:	4a3f      	ldr	r2, [pc, #252]	@ (800551c <xTaskIncrementTick+0x164>)
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	f000 fae6 	bl	80059f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005424:	4b3e      	ldr	r3, [pc, #248]	@ (8005520 <xTaskIncrementTick+0x168>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	429a      	cmp	r2, r3
 800542c:	d34e      	bcc.n	80054cc <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800542e:	4b39      	ldr	r3, [pc, #228]	@ (8005514 <xTaskIncrementTick+0x15c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <xTaskIncrementTick+0x84>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <xTaskIncrementTick+0x86>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005442:	4b37      	ldr	r3, [pc, #220]	@ (8005520 <xTaskIncrementTick+0x168>)
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	601a      	str	r2, [r3, #0]
					break;
 800544a:	e03f      	b.n	80054cc <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800544c:	4b31      	ldr	r3, [pc, #196]	@ (8005514 <xTaskIncrementTick+0x15c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d203      	bcs.n	800546c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005464:	4a2e      	ldr	r2, [pc, #184]	@ (8005520 <xTaskIncrementTick+0x168>)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6013      	str	r3, [r2, #0]
						break;
 800546a:	e02f      	b.n	80054cc <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	3304      	adds	r3, #4
 8005470:	4618      	mov	r0, r3
 8005472:	f7fe ff6d 	bl	8004350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3318      	adds	r3, #24
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe ff64 	bl	8004350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800548c:	4b25      	ldr	r3, [pc, #148]	@ (8005524 <xTaskIncrementTick+0x16c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d903      	bls.n	800549c <xTaskIncrementTick+0xe4>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005498:	4a22      	ldr	r2, [pc, #136]	@ (8005524 <xTaskIncrementTick+0x16c>)
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005528 <xTaskIncrementTick+0x170>)
 80054aa:	441a      	add	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f7fe fef1 	bl	800429a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054bc:	4b1b      	ldr	r3, [pc, #108]	@ (800552c <xTaskIncrementTick+0x174>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d3b3      	bcc.n	800542e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ca:	e7b0      	b.n	800542e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054cc:	4b17      	ldr	r3, [pc, #92]	@ (800552c <xTaskIncrementTick+0x174>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d2:	4915      	ldr	r1, [pc, #84]	@ (8005528 <xTaskIncrementTick+0x170>)
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d907      	bls.n	80054f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	e004      	b.n	80054f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054ea:	4b11      	ldr	r3, [pc, #68]	@ (8005530 <xTaskIncrementTick+0x178>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3301      	adds	r3, #1
 80054f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005530 <xTaskIncrementTick+0x178>)
 80054f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005534 <xTaskIncrementTick+0x17c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005500:	697b      	ldr	r3, [r7, #20]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	2000126c 	.word	0x2000126c
 8005510:	20001248 	.word	0x20001248
 8005514:	200011fc 	.word	0x200011fc
 8005518:	20001200 	.word	0x20001200
 800551c:	2000125c 	.word	0x2000125c
 8005520:	20001264 	.word	0x20001264
 8005524:	2000124c 	.word	0x2000124c
 8005528:	20000d74 	.word	0x20000d74
 800552c:	20000d70 	.word	0x20000d70
 8005530:	20001254 	.word	0x20001254
 8005534:	20001258 	.word	0x20001258

08005538 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800553e:	4b2a      	ldr	r3, [pc, #168]	@ (80055e8 <vTaskSwitchContext+0xb0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005546:	4b29      	ldr	r3, [pc, #164]	@ (80055ec <vTaskSwitchContext+0xb4>)
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800554c:	e047      	b.n	80055de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800554e:	4b27      	ldr	r3, [pc, #156]	@ (80055ec <vTaskSwitchContext+0xb4>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005554:	4b26      	ldr	r3, [pc, #152]	@ (80055f0 <vTaskSwitchContext+0xb8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	e011      	b.n	8005580 <vTaskSwitchContext+0x48>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <vTaskSwitchContext+0x42>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	607b      	str	r3, [r7, #4]
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	e7fd      	b.n	8005576 <vTaskSwitchContext+0x3e>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b01      	subs	r3, #1
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	491c      	ldr	r1, [pc, #112]	@ (80055f4 <vTaskSwitchContext+0xbc>)
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0e3      	beq.n	800555c <vTaskSwitchContext+0x24>
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4a15      	ldr	r2, [pc, #84]	@ (80055f4 <vTaskSwitchContext+0xbc>)
 80055a0:	4413      	add	r3, r2
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	3308      	adds	r3, #8
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d104      	bne.n	80055c4 <vTaskSwitchContext+0x8c>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	605a      	str	r2, [r3, #4]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	4a0b      	ldr	r2, [pc, #44]	@ (80055f8 <vTaskSwitchContext+0xc0>)
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	4a08      	ldr	r2, [pc, #32]	@ (80055f0 <vTaskSwitchContext+0xb8>)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055d4:	4b08      	ldr	r3, [pc, #32]	@ (80055f8 <vTaskSwitchContext+0xc0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3354      	adds	r3, #84	@ 0x54
 80055da:	4a08      	ldr	r2, [pc, #32]	@ (80055fc <vTaskSwitchContext+0xc4>)
 80055dc:	6013      	str	r3, [r2, #0]
}
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr
 80055e8:	2000126c 	.word	0x2000126c
 80055ec:	20001258 	.word	0x20001258
 80055f0:	2000124c 	.word	0x2000124c
 80055f4:	20000d74 	.word	0x20000d74
 80055f8:	20000d70 	.word	0x20000d70
 80055fc:	2000002c 	.word	0x2000002c

08005600 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	bf00      	nop
 8005626:	e7fd      	b.n	8005624 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005628:	4b07      	ldr	r3, [pc, #28]	@ (8005648 <vTaskPlaceOnEventList+0x48>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3318      	adds	r3, #24
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fe fe55 	bl	80042e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005636:	2101      	movs	r1, #1
 8005638:	6838      	ldr	r0, [r7, #0]
 800563a:	f000 fa8b 	bl	8005b54 <prvAddCurrentTaskToDelayedList>
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000d70 	.word	0x20000d70

0800564c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10b      	bne.n	8005676 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	617b      	str	r3, [r7, #20]
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	e7fd      	b.n	8005672 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005676:	4b0a      	ldr	r3, [pc, #40]	@ (80056a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3318      	adds	r3, #24
 800567c:	4619      	mov	r1, r3
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7fe fe0b 	bl	800429a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	68b8      	ldr	r0, [r7, #8]
 8005694:	f000 fa5e 	bl	8005b54 <prvAddCurrentTaskToDelayedList>
	}
 8005698:	bf00      	nop
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000d70 	.word	0x20000d70

080056a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60fb      	str	r3, [r7, #12]
}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	e7fd      	b.n	80056ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3318      	adds	r3, #24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fe3a 	bl	8004350 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005754 <xTaskRemoveFromEventList+0xb0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11d      	bne.n	8005720 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fe fe31 	bl	8004350 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f2:	4b19      	ldr	r3, [pc, #100]	@ (8005758 <xTaskRemoveFromEventList+0xb4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d903      	bls.n	8005702 <xTaskRemoveFromEventList+0x5e>
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fe:	4a16      	ldr	r2, [pc, #88]	@ (8005758 <xTaskRemoveFromEventList+0xb4>)
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4a13      	ldr	r2, [pc, #76]	@ (800575c <xTaskRemoveFromEventList+0xb8>)
 8005710:	441a      	add	r2, r3
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	3304      	adds	r3, #4
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f7fe fdbe 	bl	800429a <vListInsertEnd>
 800571e:	e005      	b.n	800572c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	3318      	adds	r3, #24
 8005724:	4619      	mov	r1, r3
 8005726:	480e      	ldr	r0, [pc, #56]	@ (8005760 <xTaskRemoveFromEventList+0xbc>)
 8005728:	f7fe fdb7 	bl	800429a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005730:	4b0c      	ldr	r3, [pc, #48]	@ (8005764 <xTaskRemoveFromEventList+0xc0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	429a      	cmp	r2, r3
 8005738:	d905      	bls.n	8005746 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800573a:	2301      	movs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800573e:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <xTaskRemoveFromEventList+0xc4>)
 8005740:	2201      	movs	r2, #1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e001      	b.n	800574a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800574a:	697b      	ldr	r3, [r7, #20]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	2000126c 	.word	0x2000126c
 8005758:	2000124c 	.word	0x2000124c
 800575c:	20000d74 	.word	0x20000d74
 8005760:	20001204 	.word	0x20001204
 8005764:	20000d70 	.word	0x20000d70
 8005768:	20001258 	.word	0x20001258

0800576c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005774:	4b06      	ldr	r3, [pc, #24]	@ (8005790 <vTaskInternalSetTimeOutState+0x24>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800577c:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <vTaskInternalSetTimeOutState+0x28>)
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	605a      	str	r2, [r3, #4]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	2000125c 	.word	0x2000125c
 8005794:	20001248 	.word	0x20001248

08005798 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	613b      	str	r3, [r7, #16]
}
 80057ba:	bf00      	nop
 80057bc:	bf00      	nop
 80057be:	e7fd      	b.n	80057bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10b      	bne.n	80057de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	60fb      	str	r3, [r7, #12]
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	e7fd      	b.n	80057da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80057de:	f000 fe1d 	bl	800641c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005858 <xTaskCheckForTimeOut+0xc0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d102      	bne.n	8005802 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	e023      	b.n	800584a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4b15      	ldr	r3, [pc, #84]	@ (800585c <xTaskCheckForTimeOut+0xc4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d007      	beq.n	800581e <xTaskCheckForTimeOut+0x86>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	429a      	cmp	r2, r3
 8005816:	d302      	bcc.n	800581e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005818:	2301      	movs	r3, #1
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	e015      	b.n	800584a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	429a      	cmp	r2, r3
 8005826:	d20b      	bcs.n	8005840 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1ad2      	subs	r2, r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff ff99 	bl	800576c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	e004      	b.n	800584a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005846:	2301      	movs	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800584a:	f000 fe17 	bl	800647c <vPortExitCritical>

	return xReturn;
 800584e:	69fb      	ldr	r3, [r7, #28]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3720      	adds	r7, #32
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20001248 	.word	0x20001248
 800585c:	2000125c 	.word	0x2000125c

08005860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005864:	4b03      	ldr	r3, [pc, #12]	@ (8005874 <vTaskMissedYield+0x14>)
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]
}
 800586a:	bf00      	nop
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20001258 	.word	0x20001258

08005878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005880:	f000 f852 	bl	8005928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005884:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <prvIdleTask+0x28>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d9f9      	bls.n	8005880 <prvIdleTask+0x8>
			{
				taskYIELD();
 800588c:	4b05      	ldr	r3, [pc, #20]	@ (80058a4 <prvIdleTask+0x2c>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800589c:	e7f0      	b.n	8005880 <prvIdleTask+0x8>
 800589e:	bf00      	nop
 80058a0:	20000d74 	.word	0x20000d74
 80058a4:	e000ed04 	.word	0xe000ed04

080058a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	e00c      	b.n	80058ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4a12      	ldr	r2, [pc, #72]	@ (8005908 <prvInitialiseTaskLists+0x60>)
 80058c0:	4413      	add	r3, r2
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fcbe 	bl	8004244 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3301      	adds	r3, #1
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b37      	cmp	r3, #55	@ 0x37
 80058d2:	d9ef      	bls.n	80058b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058d4:	480d      	ldr	r0, [pc, #52]	@ (800590c <prvInitialiseTaskLists+0x64>)
 80058d6:	f7fe fcb5 	bl	8004244 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058da:	480d      	ldr	r0, [pc, #52]	@ (8005910 <prvInitialiseTaskLists+0x68>)
 80058dc:	f7fe fcb2 	bl	8004244 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058e0:	480c      	ldr	r0, [pc, #48]	@ (8005914 <prvInitialiseTaskLists+0x6c>)
 80058e2:	f7fe fcaf 	bl	8004244 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058e6:	480c      	ldr	r0, [pc, #48]	@ (8005918 <prvInitialiseTaskLists+0x70>)
 80058e8:	f7fe fcac 	bl	8004244 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058ec:	480b      	ldr	r0, [pc, #44]	@ (800591c <prvInitialiseTaskLists+0x74>)
 80058ee:	f7fe fca9 	bl	8004244 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <prvInitialiseTaskLists+0x78>)
 80058f4:	4a05      	ldr	r2, [pc, #20]	@ (800590c <prvInitialiseTaskLists+0x64>)
 80058f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <prvInitialiseTaskLists+0x7c>)
 80058fa:	4a05      	ldr	r2, [pc, #20]	@ (8005910 <prvInitialiseTaskLists+0x68>)
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000d74 	.word	0x20000d74
 800590c:	200011d4 	.word	0x200011d4
 8005910:	200011e8 	.word	0x200011e8
 8005914:	20001204 	.word	0x20001204
 8005918:	20001218 	.word	0x20001218
 800591c:	20001230 	.word	0x20001230
 8005920:	200011fc 	.word	0x200011fc
 8005924:	20001200 	.word	0x20001200

08005928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800592e:	e019      	b.n	8005964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005930:	f000 fd74 	bl	800641c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005934:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <prvCheckTasksWaitingTermination+0x50>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3304      	adds	r3, #4
 8005940:	4618      	mov	r0, r3
 8005942:	f7fe fd05 	bl	8004350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <prvCheckTasksWaitingTermination+0x54>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3b01      	subs	r3, #1
 800594c:	4a0b      	ldr	r2, [pc, #44]	@ (800597c <prvCheckTasksWaitingTermination+0x54>)
 800594e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <prvCheckTasksWaitingTermination+0x58>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3b01      	subs	r3, #1
 8005956:	4a0a      	ldr	r2, [pc, #40]	@ (8005980 <prvCheckTasksWaitingTermination+0x58>)
 8005958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800595a:	f000 fd8f 	bl	800647c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f810 	bl	8005984 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005964:	4b06      	ldr	r3, [pc, #24]	@ (8005980 <prvCheckTasksWaitingTermination+0x58>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e1      	bne.n	8005930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20001218 	.word	0x20001218
 800597c:	20001244 	.word	0x20001244
 8005980:	2000122c 	.word	0x2000122c

08005984 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3354      	adds	r3, #84	@ 0x54
 8005990:	4618      	mov	r0, r3
 8005992:	f001 f84b 	bl	8006a2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800599c:	2b00      	cmp	r3, #0
 800599e:	d108      	bne.n	80059b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 ff03 	bl	80067b0 <vPortFree>
				vPortFree( pxTCB );
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 ff00 	bl	80067b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059b0:	e019      	b.n	80059e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d103      	bne.n	80059c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fef7 	bl	80067b0 <vPortFree>
	}
 80059c2:	e010      	b.n	80059e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d00b      	beq.n	80059e6 <prvDeleteTCB+0x62>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	60fb      	str	r3, [r7, #12]
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	e7fd      	b.n	80059e2 <prvDeleteTCB+0x5e>
	}
 80059e6:	bf00      	nop
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a30 <prvResetNextTaskUnblockTime+0x40>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <prvResetNextTaskUnblockTime+0x14>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <prvResetNextTaskUnblockTime+0x16>
 8005a04:	2300      	movs	r3, #0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d004      	beq.n	8005a14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <prvResetNextTaskUnblockTime+0x44>)
 8005a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a12:	e008      	b.n	8005a26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a14:	4b06      	ldr	r3, [pc, #24]	@ (8005a30 <prvResetNextTaskUnblockTime+0x40>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4a04      	ldr	r2, [pc, #16]	@ (8005a34 <prvResetNextTaskUnblockTime+0x44>)
 8005a24:	6013      	str	r3, [r2, #0]
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr
 8005a30:	200011fc 	.word	0x200011fc
 8005a34:	20001264 	.word	0x20001264

08005a38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <xTaskGetSchedulerState+0x34>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a46:	2301      	movs	r3, #1
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	e008      	b.n	8005a5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a4c:	4b08      	ldr	r3, [pc, #32]	@ (8005a70 <xTaskGetSchedulerState+0x38>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d102      	bne.n	8005a5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a54:	2302      	movs	r3, #2
 8005a56:	607b      	str	r3, [r7, #4]
 8005a58:	e001      	b.n	8005a5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a5e:	687b      	ldr	r3, [r7, #4]
	}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20001250 	.word	0x20001250
 8005a70:	2000126c 	.word	0x2000126c

08005a74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d058      	beq.n	8005b3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b48 <xTaskPriorityDisinherit+0xd4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d00b      	beq.n	8005aac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	60fb      	str	r3, [r7, #12]
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60bb      	str	r3, [r7, #8]
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	e7fd      	b.n	8005ac8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad0:	1e5a      	subs	r2, r3, #1
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d02c      	beq.n	8005b3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d128      	bne.n	8005b3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fc2e 	bl	8004350 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <xTaskPriorityDisinherit+0xd8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d903      	bls.n	8005b1c <xTaskPriorityDisinherit+0xa8>
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b18:	4a0c      	ldr	r2, [pc, #48]	@ (8005b4c <xTaskPriorityDisinherit+0xd8>)
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4a09      	ldr	r2, [pc, #36]	@ (8005b50 <xTaskPriorityDisinherit+0xdc>)
 8005b2a:	441a      	add	r2, r3
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f7fe fbb1 	bl	800429a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b3c:	697b      	ldr	r3, [r7, #20]
	}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000d70 	.word	0x20000d70
 8005b4c:	2000124c 	.word	0x2000124c
 8005b50:	20000d74 	.word	0x20000d74

08005b54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b5e:	4b21      	ldr	r3, [pc, #132]	@ (8005be4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b64:	4b20      	ldr	r3, [pc, #128]	@ (8005be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fbf0 	bl	8004350 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d10a      	bne.n	8005b8e <prvAddCurrentTaskToDelayedList+0x3a>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3304      	adds	r3, #4
 8005b84:	4619      	mov	r1, r3
 8005b86:	4819      	ldr	r0, [pc, #100]	@ (8005bec <prvAddCurrentTaskToDelayedList+0x98>)
 8005b88:	f7fe fb87 	bl	800429a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b8c:	e026      	b.n	8005bdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4413      	add	r3, r2
 8005b94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b96:	4b14      	ldr	r3, [pc, #80]	@ (8005be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d209      	bcs.n	8005bba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ba6:	4b12      	ldr	r3, [pc, #72]	@ (8005bf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4b0f      	ldr	r3, [pc, #60]	@ (8005be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f7fe fb94 	bl	80042e0 <vListInsert>
}
 8005bb8:	e010      	b.n	8005bdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bba:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f7fe fb8a 	bl	80042e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d202      	bcs.n	8005bdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bd6:	4a08      	ldr	r2, [pc, #32]	@ (8005bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	6013      	str	r3, [r2, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20001248 	.word	0x20001248
 8005be8:	20000d70 	.word	0x20000d70
 8005bec:	20001230 	.word	0x20001230
 8005bf0:	20001200 	.word	0x20001200
 8005bf4:	200011fc 	.word	0x200011fc
 8005bf8:	20001264 	.word	0x20001264

08005bfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	@ 0x28
 8005c00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c06:	f000 fad9 	bl	80061bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005c80 <xTimerCreateTimerTask+0x84>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d021      	beq.n	8005c56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c1a:	1d3a      	adds	r2, r7, #4
 8005c1c:	f107 0108 	add.w	r1, r7, #8
 8005c20:	f107 030c 	add.w	r3, r7, #12
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe faf3 	bl	8004210 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	9202      	str	r2, [sp, #8]
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	2302      	movs	r3, #2
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	460a      	mov	r2, r1
 8005c3c:	4911      	ldr	r1, [pc, #68]	@ (8005c84 <xTimerCreateTimerTask+0x88>)
 8005c3e:	4812      	ldr	r0, [pc, #72]	@ (8005c88 <xTimerCreateTimerTask+0x8c>)
 8005c40:	f7ff f8a6 	bl	8004d90 <xTaskCreateStatic>
 8005c44:	4603      	mov	r3, r0
 8005c46:	4a11      	ldr	r2, [pc, #68]	@ (8005c8c <xTimerCreateTimerTask+0x90>)
 8005c48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c4a:	4b10      	ldr	r3, [pc, #64]	@ (8005c8c <xTimerCreateTimerTask+0x90>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c52:	2301      	movs	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	613b      	str	r3, [r7, #16]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c74:	697b      	ldr	r3, [r7, #20]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	200012a0 	.word	0x200012a0
 8005c84:	080074b8 	.word	0x080074b8
 8005c88:	08005db1 	.word	0x08005db1
 8005c8c:	200012a4 	.word	0x200012a4

08005c90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	@ 0x28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10b      	bne.n	8005cc0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	623b      	str	r3, [r7, #32]
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cc0:	4b19      	ldr	r3, [pc, #100]	@ (8005d28 <xTimerGenericCommand+0x98>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d02a      	beq.n	8005d1e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	dc18      	bgt.n	8005d0c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cda:	f7ff fead 	bl	8005a38 <xTaskGetSchedulerState>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d109      	bne.n	8005cf8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ce4:	4b10      	ldr	r3, [pc, #64]	@ (8005d28 <xTimerGenericCommand+0x98>)
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	f107 0110 	add.w	r1, r7, #16
 8005cec:	2300      	movs	r3, #0
 8005cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cf0:	f7fe fc62 	bl	80045b8 <xQueueGenericSend>
 8005cf4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cf6:	e012      	b.n	8005d1e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d28 <xTimerGenericCommand+0x98>)
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	f107 0110 	add.w	r1, r7, #16
 8005d00:	2300      	movs	r3, #0
 8005d02:	2200      	movs	r2, #0
 8005d04:	f7fe fc58 	bl	80045b8 <xQueueGenericSend>
 8005d08:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d0a:	e008      	b.n	8005d1e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d0c:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <xTimerGenericCommand+0x98>)
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	f107 0110 	add.w	r1, r7, #16
 8005d14:	2300      	movs	r3, #0
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	f7fe fd50 	bl	80047bc <xQueueGenericSendFromISR>
 8005d1c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3728      	adds	r7, #40	@ 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	200012a0 	.word	0x200012a0

08005d2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d36:	4b1d      	ldr	r3, [pc, #116]	@ (8005dac <prvProcessExpiredTimer+0x80>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe fb03 	bl	8004350 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d123      	bne.n	8005d9a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	18d1      	adds	r1, r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	6978      	ldr	r0, [r7, #20]
 8005d60:	f000 f8cc 	bl	8005efc <prvInsertTimerInActiveList>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d017      	beq.n	8005d9a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	2100      	movs	r1, #0
 8005d74:	6978      	ldr	r0, [r7, #20]
 8005d76:	f7ff ff8b 	bl	8005c90 <xTimerGenericCommand>
 8005d7a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10b      	bne.n	8005d9a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60fb      	str	r3, [r7, #12]
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	6978      	ldr	r0, [r7, #20]
 8005da0:	4798      	blx	r3
}
 8005da2:	bf00      	nop
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20001298 	.word	0x20001298

08005db0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005db8:	f107 0308 	add.w	r3, r7, #8
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 f859 	bl	8005e74 <prvGetNextExpireTime>
 8005dc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f805 	bl	8005dd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dce:	f000 f8d7 	bl	8005f80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dd2:	bf00      	nop
 8005dd4:	e7f0      	b.n	8005db8 <prvTimerTask+0x8>
	...

08005dd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005de2:	f7ff fa2f 	bl	8005244 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005de6:	f107 0308 	add.w	r3, r7, #8
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 f866 	bl	8005ebc <prvSampleTimeNow>
 8005df0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d130      	bne.n	8005e5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <prvProcessTimerOrBlockTask+0x3c>
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d806      	bhi.n	8005e14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e06:	f7ff fa2b 	bl	8005260 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e0a:	68f9      	ldr	r1, [r7, #12]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ff8d 	bl	8005d2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e12:	e024      	b.n	8005e5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d008      	beq.n	8005e2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e1a:	4b13      	ldr	r3, [pc, #76]	@ (8005e68 <prvProcessTimerOrBlockTask+0x90>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e6c <prvProcessTimerOrBlockTask+0x94>)
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f7fe ff75 	bl	8004d28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e3e:	f7ff fa0f 	bl	8005260 <xTaskResumeAll>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e48:	4b09      	ldr	r3, [pc, #36]	@ (8005e70 <prvProcessTimerOrBlockTask+0x98>)
 8005e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
}
 8005e58:	e001      	b.n	8005e5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e5a:	f7ff fa01 	bl	8005260 <xTaskResumeAll>
}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	2000129c 	.word	0x2000129c
 8005e6c:	200012a0 	.word	0x200012a0
 8005e70:	e000ed04 	.word	0xe000ed04

08005e74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb8 <prvGetNextExpireTime+0x44>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bf0c      	ite	eq
 8005e86:	2301      	moveq	r3, #1
 8005e88:	2300      	movne	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d105      	bne.n	8005ea6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e9a:	4b07      	ldr	r3, [pc, #28]	@ (8005eb8 <prvGetNextExpireTime+0x44>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e001      	b.n	8005eaa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20001298 	.word	0x20001298

08005ebc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ec4:	f7ff fa6a 	bl	800539c <xTaskGetTickCount>
 8005ec8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005eca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <prvSampleTimeNow+0x3c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d205      	bcs.n	8005ee0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ed4:	f000 f910 	bl	80060f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e002      	b.n	8005ee6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ee6:	4a04      	ldr	r2, [pc, #16]	@ (8005ef8 <prvSampleTimeNow+0x3c>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005eec:	68fb      	ldr	r3, [r7, #12]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200012a8 	.word	0x200012a8

08005efc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d812      	bhi.n	8005f48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	1ad2      	subs	r2, r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d302      	bcc.n	8005f36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f30:	2301      	movs	r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e01b      	b.n	8005f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f36:	4b10      	ldr	r3, [pc, #64]	@ (8005f78 <prvInsertTimerInActiveList+0x7c>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f7fe f9cd 	bl	80042e0 <vListInsert>
 8005f46:	e012      	b.n	8005f6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d206      	bcs.n	8005f5e <prvInsertTimerInActiveList+0x62>
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d302      	bcc.n	8005f5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e007      	b.n	8005f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f5e:	4b07      	ldr	r3, [pc, #28]	@ (8005f7c <prvInsertTimerInActiveList+0x80>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f7fe f9b9 	bl	80042e0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f6e:	697b      	ldr	r3, [r7, #20]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	2000129c 	.word	0x2000129c
 8005f7c:	20001298 	.word	0x20001298

08005f80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	@ 0x38
 8005f84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f86:	e0a5      	b.n	80060d4 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da19      	bge.n	8005fc2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	3304      	adds	r3, #4
 8005f92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10b      	bne.n	8005fb2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	61fb      	str	r3, [r7, #28]
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	e7fd      	b.n	8005fae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fb8:	6850      	ldr	r0, [r2, #4]
 8005fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fbc:	6892      	ldr	r2, [r2, #8]
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f2c0 8085 	blt.w	80060d4 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d004      	beq.n	8005fe0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe f9b8 	bl	8004350 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff ff6a 	bl	8005ebc <prvSampleTimeNow>
 8005fe8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b09      	cmp	r3, #9
 8005fee:	d86c      	bhi.n	80060ca <prvProcessReceivedCommands+0x14a>
 8005ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <prvProcessReceivedCommands+0x78>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	08006021 	.word	0x08006021
 8005ffc:	08006021 	.word	0x08006021
 8006000:	08006021 	.word	0x08006021
 8006004:	080060cb 	.word	0x080060cb
 8006008:	0800607f 	.word	0x0800607f
 800600c:	080060b9 	.word	0x080060b9
 8006010:	08006021 	.word	0x08006021
 8006014:	08006021 	.word	0x08006021
 8006018:	080060cb 	.word	0x080060cb
 800601c:	0800607f 	.word	0x0800607f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	18d1      	adds	r1, r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800602c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800602e:	f7ff ff65 	bl	8005efc <prvInsertTimerInActiveList>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d04a      	beq.n	80060ce <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800603e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d142      	bne.n	80060ce <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	441a      	add	r2, r3
 8006050:	2300      	movs	r3, #0
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	2300      	movs	r3, #0
 8006056:	2100      	movs	r1, #0
 8006058:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800605a:	f7ff fe19 	bl	8005c90 <xTimerGenericCommand>
 800605e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d133      	bne.n	80060ce <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	61bb      	str	r3, [r7, #24]
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	e7fd      	b.n	800607a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10b      	bne.n	80060a4 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	617b      	str	r3, [r7, #20]
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	e7fd      	b.n	80060a0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a6:	699a      	ldr	r2, [r3, #24]
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	18d1      	adds	r1, r2, r3
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060b2:	f7ff ff23 	bl	8005efc <prvInsertTimerInActiveList>
					break;
 80060b6:	e00d      	b.n	80060d4 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d107      	bne.n	80060d2 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80060c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060c4:	f000 fb74 	bl	80067b0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060c8:	e003      	b.n	80060d2 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <prvProcessReceivedCommands+0x154>
					break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <prvProcessReceivedCommands+0x154>
					break;
 80060d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060d4:	4b07      	ldr	r3, [pc, #28]	@ (80060f4 <prvProcessReceivedCommands+0x174>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	1d39      	adds	r1, r7, #4
 80060da:	2200      	movs	r2, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe fc09 	bl	80048f4 <xQueueReceive>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f47f af4f 	bne.w	8005f88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	3730      	adds	r7, #48	@ 0x30
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	200012a0 	.word	0x200012a0

080060f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060fe:	e046      	b.n	800618e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006100:	4b2c      	ldr	r3, [pc, #176]	@ (80061b4 <prvSwitchTimerLists+0xbc>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800610a:	4b2a      	ldr	r3, [pc, #168]	@ (80061b4 <prvSwitchTimerLists+0xbc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3304      	adds	r3, #4
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe f919 	bl	8004350 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d12f      	bne.n	800618e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	429a      	cmp	r2, r3
 800613e:	d90e      	bls.n	800615e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800614c:	4b19      	ldr	r3, [pc, #100]	@ (80061b4 <prvSwitchTimerLists+0xbc>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe f8c2 	bl	80042e0 <vListInsert>
 800615c:	e017      	b.n	800618e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800615e:	2300      	movs	r3, #0
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	2300      	movs	r3, #0
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	2100      	movs	r1, #0
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fd91 	bl	8005c90 <xTimerGenericCommand>
 800616e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <prvSwitchTimerLists+0x96>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	603b      	str	r3, [r7, #0]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800618e:	4b09      	ldr	r3, [pc, #36]	@ (80061b4 <prvSwitchTimerLists+0xbc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1b3      	bne.n	8006100 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006198:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <prvSwitchTimerLists+0xbc>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800619e:	4b06      	ldr	r3, [pc, #24]	@ (80061b8 <prvSwitchTimerLists+0xc0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a04      	ldr	r2, [pc, #16]	@ (80061b4 <prvSwitchTimerLists+0xbc>)
 80061a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061a6:	4a04      	ldr	r2, [pc, #16]	@ (80061b8 <prvSwitchTimerLists+0xc0>)
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	6013      	str	r3, [r2, #0]
}
 80061ac:	bf00      	nop
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20001298 	.word	0x20001298
 80061b8:	2000129c 	.word	0x2000129c

080061bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061c2:	f000 f92b 	bl	800641c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061c6:	4b15      	ldr	r3, [pc, #84]	@ (800621c <prvCheckForValidListAndQueue+0x60>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d120      	bne.n	8006210 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061ce:	4814      	ldr	r0, [pc, #80]	@ (8006220 <prvCheckForValidListAndQueue+0x64>)
 80061d0:	f7fe f838 	bl	8004244 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061d4:	4813      	ldr	r0, [pc, #76]	@ (8006224 <prvCheckForValidListAndQueue+0x68>)
 80061d6:	f7fe f835 	bl	8004244 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061da:	4b13      	ldr	r3, [pc, #76]	@ (8006228 <prvCheckForValidListAndQueue+0x6c>)
 80061dc:	4a10      	ldr	r2, [pc, #64]	@ (8006220 <prvCheckForValidListAndQueue+0x64>)
 80061de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061e0:	4b12      	ldr	r3, [pc, #72]	@ (800622c <prvCheckForValidListAndQueue+0x70>)
 80061e2:	4a10      	ldr	r2, [pc, #64]	@ (8006224 <prvCheckForValidListAndQueue+0x68>)
 80061e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061e6:	2300      	movs	r3, #0
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	4b11      	ldr	r3, [pc, #68]	@ (8006230 <prvCheckForValidListAndQueue+0x74>)
 80061ec:	4a11      	ldr	r2, [pc, #68]	@ (8006234 <prvCheckForValidListAndQueue+0x78>)
 80061ee:	2110      	movs	r1, #16
 80061f0:	200a      	movs	r0, #10
 80061f2:	f7fe f941 	bl	8004478 <xQueueGenericCreateStatic>
 80061f6:	4603      	mov	r3, r0
 80061f8:	4a08      	ldr	r2, [pc, #32]	@ (800621c <prvCheckForValidListAndQueue+0x60>)
 80061fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061fc:	4b07      	ldr	r3, [pc, #28]	@ (800621c <prvCheckForValidListAndQueue+0x60>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006204:	4b05      	ldr	r3, [pc, #20]	@ (800621c <prvCheckForValidListAndQueue+0x60>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	490b      	ldr	r1, [pc, #44]	@ (8006238 <prvCheckForValidListAndQueue+0x7c>)
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe fd64 	bl	8004cd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006210:	f000 f934 	bl	800647c <vPortExitCritical>
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200012a0 	.word	0x200012a0
 8006220:	20001270 	.word	0x20001270
 8006224:	20001284 	.word	0x20001284
 8006228:	20001298 	.word	0x20001298
 800622c:	2000129c 	.word	0x2000129c
 8006230:	2000134c 	.word	0x2000134c
 8006234:	200012ac 	.word	0x200012ac
 8006238:	080074c0 	.word	0x080074c0

0800623c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3b04      	subs	r3, #4
 800624c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3b04      	subs	r3, #4
 800625a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b04      	subs	r3, #4
 800626a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800626c:	4a08      	ldr	r2, [pc, #32]	@ (8006290 <pxPortInitialiseStack+0x54>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3b14      	subs	r3, #20
 8006276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3b20      	subs	r3, #32
 8006282:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006284:	68fb      	ldr	r3, [r7, #12]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr
 8006290:	08006295 	.word	0x08006295

08006294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800629a:	2300      	movs	r3, #0
 800629c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800629e:	4b12      	ldr	r3, [pc, #72]	@ (80062e8 <prvTaskExitError+0x54>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d00b      	beq.n	80062c0 <prvTaskExitError+0x2c>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60fb      	str	r3, [r7, #12]
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	e7fd      	b.n	80062bc <prvTaskExitError+0x28>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	60bb      	str	r3, [r7, #8]
}
 80062d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062d4:	bf00      	nop
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0fc      	beq.n	80062d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bc80      	pop	{r7}
 80062e6:	4770      	bx	lr
 80062e8:	20000028 	.word	0x20000028
 80062ec:	00000000 	.word	0x00000000

080062f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062f0:	4b07      	ldr	r3, [pc, #28]	@ (8006310 <pxCurrentTCBConst2>)
 80062f2:	6819      	ldr	r1, [r3, #0]
 80062f4:	6808      	ldr	r0, [r1, #0]
 80062f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062fa:	f380 8809 	msr	PSP, r0
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8811 	msr	BASEPRI, r0
 800630a:	f04e 0e0d 	orr.w	lr, lr, #13
 800630e:	4770      	bx	lr

08006310 <pxCurrentTCBConst2>:
 8006310:	20000d70 	.word	0x20000d70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006318:	4806      	ldr	r0, [pc, #24]	@ (8006334 <prvPortStartFirstTask+0x1c>)
 800631a:	6800      	ldr	r0, [r0, #0]
 800631c:	6800      	ldr	r0, [r0, #0]
 800631e:	f380 8808 	msr	MSP, r0
 8006322:	b662      	cpsie	i
 8006324:	b661      	cpsie	f
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	df00      	svc	0
 8006330:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006332:	bf00      	nop
 8006334:	e000ed08 	.word	0xe000ed08

08006338 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800633e:	4b32      	ldr	r3, [pc, #200]	@ (8006408 <xPortStartScheduler+0xd0>)
 8006340:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	22ff      	movs	r2, #255	@ 0xff
 800634e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006360:	b2da      	uxtb	r2, r3
 8006362:	4b2a      	ldr	r3, [pc, #168]	@ (800640c <xPortStartScheduler+0xd4>)
 8006364:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006366:	4b2a      	ldr	r3, [pc, #168]	@ (8006410 <xPortStartScheduler+0xd8>)
 8006368:	2207      	movs	r2, #7
 800636a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800636c:	e009      	b.n	8006382 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800636e:	4b28      	ldr	r3, [pc, #160]	@ (8006410 <xPortStartScheduler+0xd8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3b01      	subs	r3, #1
 8006374:	4a26      	ldr	r2, [pc, #152]	@ (8006410 <xPortStartScheduler+0xd8>)
 8006376:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	b2db      	uxtb	r3, r3
 8006380:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638a:	2b80      	cmp	r3, #128	@ 0x80
 800638c:	d0ef      	beq.n	800636e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800638e:	4b20      	ldr	r3, [pc, #128]	@ (8006410 <xPortStartScheduler+0xd8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f1c3 0307 	rsb	r3, r3, #7
 8006396:	2b04      	cmp	r3, #4
 8006398:	d00b      	beq.n	80063b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	60bb      	str	r3, [r7, #8]
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	e7fd      	b.n	80063ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063b2:	4b17      	ldr	r3, [pc, #92]	@ (8006410 <xPortStartScheduler+0xd8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	4a15      	ldr	r2, [pc, #84]	@ (8006410 <xPortStartScheduler+0xd8>)
 80063ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063bc:	4b14      	ldr	r3, [pc, #80]	@ (8006410 <xPortStartScheduler+0xd8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063c4:	4a12      	ldr	r2, [pc, #72]	@ (8006410 <xPortStartScheduler+0xd8>)
 80063c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063d0:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <xPortStartScheduler+0xdc>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a0f      	ldr	r2, [pc, #60]	@ (8006414 <xPortStartScheduler+0xdc>)
 80063d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006414 <xPortStartScheduler+0xdc>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006414 <xPortStartScheduler+0xdc>)
 80063e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063e8:	f000 f8b8 	bl	800655c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006418 <xPortStartScheduler+0xe0>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063f2:	f7ff ff91 	bl	8006318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063f6:	f7ff f89f 	bl	8005538 <vTaskSwitchContext>
	prvTaskExitError();
 80063fa:	f7ff ff4b 	bl	8006294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	e000e400 	.word	0xe000e400
 800640c:	2000139c 	.word	0x2000139c
 8006410:	200013a0 	.word	0x200013a0
 8006414:	e000ed20 	.word	0xe000ed20
 8006418:	20000028 	.word	0x20000028

0800641c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	607b      	str	r3, [r7, #4]
}
 8006434:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006436:	4b0f      	ldr	r3, [pc, #60]	@ (8006474 <vPortEnterCritical+0x58>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	4a0d      	ldr	r2, [pc, #52]	@ (8006474 <vPortEnterCritical+0x58>)
 800643e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006440:	4b0c      	ldr	r3, [pc, #48]	@ (8006474 <vPortEnterCritical+0x58>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d110      	bne.n	800646a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006448:	4b0b      	ldr	r3, [pc, #44]	@ (8006478 <vPortEnterCritical+0x5c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <vPortEnterCritical+0x4e>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	603b      	str	r3, [r7, #0]
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <vPortEnterCritical+0x4a>
	}
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr
 8006474:	20000028 	.word	0x20000028
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006482:	4b12      	ldr	r3, [pc, #72]	@ (80064cc <vPortExitCritical+0x50>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <vPortExitCritical+0x26>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	607b      	str	r3, [r7, #4]
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	e7fd      	b.n	800649e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064a2:	4b0a      	ldr	r3, [pc, #40]	@ (80064cc <vPortExitCritical+0x50>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	4a08      	ldr	r2, [pc, #32]	@ (80064cc <vPortExitCritical+0x50>)
 80064aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064ac:	4b07      	ldr	r3, [pc, #28]	@ (80064cc <vPortExitCritical+0x50>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d105      	bne.n	80064c0 <vPortExitCritical+0x44>
 80064b4:	2300      	movs	r3, #0
 80064b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f383 8811 	msr	BASEPRI, r3
}
 80064be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bc80      	pop	{r7}
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20000028 	.word	0x20000028

080064d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064d0:	f3ef 8009 	mrs	r0, PSP
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <pxCurrentTCBConst>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064e0:	6010      	str	r0, [r2, #0]
 80064e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80064e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064ea:	f380 8811 	msr	BASEPRI, r0
 80064ee:	f7ff f823 	bl	8005538 <vTaskSwitchContext>
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f380 8811 	msr	BASEPRI, r0
 80064fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	6808      	ldr	r0, [r1, #0]
 8006502:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006506:	f380 8809 	msr	PSP, r0
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	4770      	bx	lr

08006510 <pxCurrentTCBConst>:
 8006510:	20000d70 	.word	0x20000d70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop

08006518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	607b      	str	r3, [r7, #4]
}
 8006530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006532:	f7fe ff41 	bl	80053b8 <xTaskIncrementTick>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <SysTick_Handler+0x40>)
 800653e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	2300      	movs	r3, #0
 8006546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f383 8811 	msr	BASEPRI, r3
}
 800654e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006560:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <vPortSetupTimerInterrupt+0x30>)
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006566:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <vPortSetupTimerInterrupt+0x34>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800656c:	4b09      	ldr	r3, [pc, #36]	@ (8006594 <vPortSetupTimerInterrupt+0x38>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a09      	ldr	r2, [pc, #36]	@ (8006598 <vPortSetupTimerInterrupt+0x3c>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	099b      	lsrs	r3, r3, #6
 8006578:	4a08      	ldr	r2, [pc, #32]	@ (800659c <vPortSetupTimerInterrupt+0x40>)
 800657a:	3b01      	subs	r3, #1
 800657c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800657e:	4b03      	ldr	r3, [pc, #12]	@ (800658c <vPortSetupTimerInterrupt+0x30>)
 8006580:	2207      	movs	r2, #7
 8006582:	601a      	str	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr
 800658c:	e000e010 	.word	0xe000e010
 8006590:	e000e018 	.word	0xe000e018
 8006594:	2000001c 	.word	0x2000001c
 8006598:	10624dd3 	.word	0x10624dd3
 800659c:	e000e014 	.word	0xe000e014

080065a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065a6:	f3ef 8305 	mrs	r3, IPSR
 80065aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b0f      	cmp	r3, #15
 80065b0:	d915      	bls.n	80065de <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065b2:	4a17      	ldr	r2, [pc, #92]	@ (8006610 <vPortValidateInterruptPriority+0x70>)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065bc:	4b15      	ldr	r3, [pc, #84]	@ (8006614 <vPortValidateInterruptPriority+0x74>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	7afa      	ldrb	r2, [r7, #11]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d20b      	bcs.n	80065de <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	607b      	str	r3, [r7, #4]
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	e7fd      	b.n	80065da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065de:	4b0e      	ldr	r3, [pc, #56]	@ (8006618 <vPortValidateInterruptPriority+0x78>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065e6:	4b0d      	ldr	r3, [pc, #52]	@ (800661c <vPortValidateInterruptPriority+0x7c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d90b      	bls.n	8006606 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	603b      	str	r3, [r7, #0]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <vPortValidateInterruptPriority+0x62>
	}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr
 8006610:	e000e3f0 	.word	0xe000e3f0
 8006614:	2000139c 	.word	0x2000139c
 8006618:	e000ed0c 	.word	0xe000ed0c
 800661c:	200013a0 	.word	0x200013a0

08006620 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	@ 0x28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800662c:	f7fe fe0a 	bl	8005244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006630:	4b5a      	ldr	r3, [pc, #360]	@ (800679c <pvPortMalloc+0x17c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006638:	f000 f916 	bl	8006868 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800663c:	4b58      	ldr	r3, [pc, #352]	@ (80067a0 <pvPortMalloc+0x180>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4013      	ands	r3, r2
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 8090 	bne.w	800676a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01e      	beq.n	800668e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006650:	2208      	movs	r2, #8
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4413      	add	r3, r2
 8006656:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	2b00      	cmp	r3, #0
 8006660:	d015      	beq.n	800668e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f023 0307 	bic.w	r3, r3, #7
 8006668:	3308      	adds	r3, #8
 800666a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00b      	beq.n	800668e <pvPortMalloc+0x6e>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	617b      	str	r3, [r7, #20]
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	e7fd      	b.n	800668a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d06a      	beq.n	800676a <pvPortMalloc+0x14a>
 8006694:	4b43      	ldr	r3, [pc, #268]	@ (80067a4 <pvPortMalloc+0x184>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	429a      	cmp	r2, r3
 800669c:	d865      	bhi.n	800676a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800669e:	4b42      	ldr	r3, [pc, #264]	@ (80067a8 <pvPortMalloc+0x188>)
 80066a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066a2:	4b41      	ldr	r3, [pc, #260]	@ (80067a8 <pvPortMalloc+0x188>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066a8:	e004      	b.n	80066b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d903      	bls.n	80066c6 <pvPortMalloc+0xa6>
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f1      	bne.n	80066aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066c6:	4b35      	ldr	r3, [pc, #212]	@ (800679c <pvPortMalloc+0x17c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d04c      	beq.n	800676a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2208      	movs	r2, #8
 80066d6:	4413      	add	r3, r2
 80066d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	1ad2      	subs	r2, r2, r3
 80066ea:	2308      	movs	r3, #8
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d920      	bls.n	8006734 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4413      	add	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <pvPortMalloc+0xfc>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	613b      	str	r3, [r7, #16]
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	e7fd      	b.n	8006718 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800672e:	69b8      	ldr	r0, [r7, #24]
 8006730:	f000 f8fc 	bl	800692c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006734:	4b1b      	ldr	r3, [pc, #108]	@ (80067a4 <pvPortMalloc+0x184>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	4a19      	ldr	r2, [pc, #100]	@ (80067a4 <pvPortMalloc+0x184>)
 8006740:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006742:	4b18      	ldr	r3, [pc, #96]	@ (80067a4 <pvPortMalloc+0x184>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b19      	ldr	r3, [pc, #100]	@ (80067ac <pvPortMalloc+0x18c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d203      	bcs.n	8006756 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800674e:	4b15      	ldr	r3, [pc, #84]	@ (80067a4 <pvPortMalloc+0x184>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a16      	ldr	r2, [pc, #88]	@ (80067ac <pvPortMalloc+0x18c>)
 8006754:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	4b11      	ldr	r3, [pc, #68]	@ (80067a0 <pvPortMalloc+0x180>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	431a      	orrs	r2, r3
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800676a:	f7fe fd79 	bl	8005260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <pvPortMalloc+0x170>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	60fb      	str	r3, [r7, #12]
}
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	e7fd      	b.n	800678c <pvPortMalloc+0x16c>
	return pvReturn;
 8006790:	69fb      	ldr	r3, [r7, #28]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3728      	adds	r7, #40	@ 0x28
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	200021bc 	.word	0x200021bc
 80067a0:	200021c8 	.word	0x200021c8
 80067a4:	200021c0 	.word	0x200021c0
 80067a8:	200021b4 	.word	0x200021b4
 80067ac:	200021c4 	.word	0x200021c4

080067b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d04a      	beq.n	8006858 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067c2:	2308      	movs	r3, #8
 80067c4:	425b      	negs	r3, r3
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	4b22      	ldr	r3, [pc, #136]	@ (8006860 <vPortFree+0xb0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4013      	ands	r3, r2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <vPortFree+0x46>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	60fb      	str	r3, [r7, #12]
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	e7fd      	b.n	80067f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00b      	beq.n	8006816 <vPortFree+0x66>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60bb      	str	r3, [r7, #8]
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	e7fd      	b.n	8006812 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	4b11      	ldr	r3, [pc, #68]	@ (8006860 <vPortFree+0xb0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d019      	beq.n	8006858 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d115      	bne.n	8006858 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	4b0b      	ldr	r3, [pc, #44]	@ (8006860 <vPortFree+0xb0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	43db      	mvns	r3, r3
 8006836:	401a      	ands	r2, r3
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800683c:	f7fe fd02 	bl	8005244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	4b07      	ldr	r3, [pc, #28]	@ (8006864 <vPortFree+0xb4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4413      	add	r3, r2
 800684a:	4a06      	ldr	r2, [pc, #24]	@ (8006864 <vPortFree+0xb4>)
 800684c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800684e:	6938      	ldr	r0, [r7, #16]
 8006850:	f000 f86c 	bl	800692c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006854:	f7fe fd04 	bl	8005260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006858:	bf00      	nop
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200021c8 	.word	0x200021c8
 8006864:	200021c0 	.word	0x200021c0

08006868 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800686e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006872:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006874:	4b27      	ldr	r3, [pc, #156]	@ (8006914 <prvHeapInit+0xac>)
 8006876:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00c      	beq.n	800689c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3307      	adds	r3, #7
 8006886:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0307 	bic.w	r3, r3, #7
 800688e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	4a1f      	ldr	r2, [pc, #124]	@ (8006914 <prvHeapInit+0xac>)
 8006898:	4413      	add	r3, r2
 800689a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006918 <prvHeapInit+0xb0>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068a6:	4b1c      	ldr	r3, [pc, #112]	@ (8006918 <prvHeapInit+0xb0>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4413      	add	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068b4:	2208      	movs	r2, #8
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0307 	bic.w	r3, r3, #7
 80068c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4a15      	ldr	r2, [pc, #84]	@ (800691c <prvHeapInit+0xb4>)
 80068c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068ca:	4b14      	ldr	r3, [pc, #80]	@ (800691c <prvHeapInit+0xb4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068d2:	4b12      	ldr	r3, [pc, #72]	@ (800691c <prvHeapInit+0xb4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	1ad2      	subs	r2, r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068e8:	4b0c      	ldr	r3, [pc, #48]	@ (800691c <prvHeapInit+0xb4>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006920 <prvHeapInit+0xb8>)
 80068f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4a09      	ldr	r2, [pc, #36]	@ (8006924 <prvHeapInit+0xbc>)
 80068fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006900:	4b09      	ldr	r3, [pc, #36]	@ (8006928 <prvHeapInit+0xc0>)
 8006902:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006906:	601a      	str	r2, [r3, #0]
}
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	200013a4 	.word	0x200013a4
 8006918:	200021b4 	.word	0x200021b4
 800691c:	200021bc 	.word	0x200021bc
 8006920:	200021c4 	.word	0x200021c4
 8006924:	200021c0 	.word	0x200021c0
 8006928:	200021c8 	.word	0x200021c8

0800692c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006934:	4b27      	ldr	r3, [pc, #156]	@ (80069d4 <prvInsertBlockIntoFreeList+0xa8>)
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e002      	b.n	8006940 <prvInsertBlockIntoFreeList+0x14>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	429a      	cmp	r2, r3
 8006948:	d8f7      	bhi.n	800693a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	4413      	add	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	d108      	bne.n	800696e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	441a      	add	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	441a      	add	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d118      	bne.n	80069b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4b14      	ldr	r3, [pc, #80]	@ (80069d8 <prvInsertBlockIntoFreeList+0xac>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d00d      	beq.n	80069aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	441a      	add	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	e008      	b.n	80069bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069aa:	4b0b      	ldr	r3, [pc, #44]	@ (80069d8 <prvInsertBlockIntoFreeList+0xac>)
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	e003      	b.n	80069bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d002      	beq.n	80069ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069ca:	bf00      	nop
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr
 80069d4:	200021b4 	.word	0x200021b4
 80069d8:	200021bc 	.word	0x200021bc

080069dc <siprintf>:
 80069dc:	b40e      	push	{r1, r2, r3}
 80069de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069e2:	b500      	push	{lr}
 80069e4:	b09c      	sub	sp, #112	@ 0x70
 80069e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80069e8:	9002      	str	r0, [sp, #8]
 80069ea:	9006      	str	r0, [sp, #24]
 80069ec:	9107      	str	r1, [sp, #28]
 80069ee:	9104      	str	r1, [sp, #16]
 80069f0:	4808      	ldr	r0, [pc, #32]	@ (8006a14 <siprintf+0x38>)
 80069f2:	4909      	ldr	r1, [pc, #36]	@ (8006a18 <siprintf+0x3c>)
 80069f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	6800      	ldr	r0, [r0, #0]
 80069fc:	a902      	add	r1, sp, #8
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	f000 f9f6 	bl	8006df0 <_svfiprintf_r>
 8006a04:	2200      	movs	r2, #0
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	b01c      	add	sp, #112	@ 0x70
 8006a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a10:	b003      	add	sp, #12
 8006a12:	4770      	bx	lr
 8006a14:	2000002c 	.word	0x2000002c
 8006a18:	ffff0208 	.word	0xffff0208

08006a1c <memset>:
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	4402      	add	r2, r0
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d100      	bne.n	8006a26 <memset+0xa>
 8006a24:	4770      	bx	lr
 8006a26:	f803 1b01 	strb.w	r1, [r3], #1
 8006a2a:	e7f9      	b.n	8006a20 <memset+0x4>

08006a2c <_reclaim_reent>:
 8006a2c:	4b29      	ldr	r3, [pc, #164]	@ (8006ad4 <_reclaim_reent+0xa8>)
 8006a2e:	b570      	push	{r4, r5, r6, lr}
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4604      	mov	r4, r0
 8006a34:	4283      	cmp	r3, r0
 8006a36:	d04b      	beq.n	8006ad0 <_reclaim_reent+0xa4>
 8006a38:	69c3      	ldr	r3, [r0, #28]
 8006a3a:	b1ab      	cbz	r3, 8006a68 <_reclaim_reent+0x3c>
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	b16b      	cbz	r3, 8006a5c <_reclaim_reent+0x30>
 8006a40:	2500      	movs	r5, #0
 8006a42:	69e3      	ldr	r3, [r4, #28]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	5959      	ldr	r1, [r3, r5]
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	d13b      	bne.n	8006ac4 <_reclaim_reent+0x98>
 8006a4c:	3504      	adds	r5, #4
 8006a4e:	2d80      	cmp	r5, #128	@ 0x80
 8006a50:	d1f7      	bne.n	8006a42 <_reclaim_reent+0x16>
 8006a52:	69e3      	ldr	r3, [r4, #28]
 8006a54:	4620      	mov	r0, r4
 8006a56:	68d9      	ldr	r1, [r3, #12]
 8006a58:	f000 f878 	bl	8006b4c <_free_r>
 8006a5c:	69e3      	ldr	r3, [r4, #28]
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	b111      	cbz	r1, 8006a68 <_reclaim_reent+0x3c>
 8006a62:	4620      	mov	r0, r4
 8006a64:	f000 f872 	bl	8006b4c <_free_r>
 8006a68:	6961      	ldr	r1, [r4, #20]
 8006a6a:	b111      	cbz	r1, 8006a72 <_reclaim_reent+0x46>
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 f86d 	bl	8006b4c <_free_r>
 8006a72:	69e1      	ldr	r1, [r4, #28]
 8006a74:	b111      	cbz	r1, 8006a7c <_reclaim_reent+0x50>
 8006a76:	4620      	mov	r0, r4
 8006a78:	f000 f868 	bl	8006b4c <_free_r>
 8006a7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006a7e:	b111      	cbz	r1, 8006a86 <_reclaim_reent+0x5a>
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 f863 	bl	8006b4c <_free_r>
 8006a86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a88:	b111      	cbz	r1, 8006a90 <_reclaim_reent+0x64>
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 f85e 	bl	8006b4c <_free_r>
 8006a90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006a92:	b111      	cbz	r1, 8006a9a <_reclaim_reent+0x6e>
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 f859 	bl	8006b4c <_free_r>
 8006a9a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006a9c:	b111      	cbz	r1, 8006aa4 <_reclaim_reent+0x78>
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 f854 	bl	8006b4c <_free_r>
 8006aa4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006aa6:	b111      	cbz	r1, 8006aae <_reclaim_reent+0x82>
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 f84f 	bl	8006b4c <_free_r>
 8006aae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006ab0:	b111      	cbz	r1, 8006ab8 <_reclaim_reent+0x8c>
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f000 f84a 	bl	8006b4c <_free_r>
 8006ab8:	6a23      	ldr	r3, [r4, #32]
 8006aba:	b14b      	cbz	r3, 8006ad0 <_reclaim_reent+0xa4>
 8006abc:	4620      	mov	r0, r4
 8006abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ac2:	4718      	bx	r3
 8006ac4:	680e      	ldr	r6, [r1, #0]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 f840 	bl	8006b4c <_free_r>
 8006acc:	4631      	mov	r1, r6
 8006ace:	e7bb      	b.n	8006a48 <_reclaim_reent+0x1c>
 8006ad0:	bd70      	pop	{r4, r5, r6, pc}
 8006ad2:	bf00      	nop
 8006ad4:	2000002c 	.word	0x2000002c

08006ad8 <__errno>:
 8006ad8:	4b01      	ldr	r3, [pc, #4]	@ (8006ae0 <__errno+0x8>)
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	2000002c 	.word	0x2000002c

08006ae4 <__libc_init_array>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	2600      	movs	r6, #0
 8006ae8:	4d0c      	ldr	r5, [pc, #48]	@ (8006b1c <__libc_init_array+0x38>)
 8006aea:	4c0d      	ldr	r4, [pc, #52]	@ (8006b20 <__libc_init_array+0x3c>)
 8006aec:	1b64      	subs	r4, r4, r5
 8006aee:	10a4      	asrs	r4, r4, #2
 8006af0:	42a6      	cmp	r6, r4
 8006af2:	d109      	bne.n	8006b08 <__libc_init_array+0x24>
 8006af4:	f000 fc78 	bl	80073e8 <_init>
 8006af8:	2600      	movs	r6, #0
 8006afa:	4d0a      	ldr	r5, [pc, #40]	@ (8006b24 <__libc_init_array+0x40>)
 8006afc:	4c0a      	ldr	r4, [pc, #40]	@ (8006b28 <__libc_init_array+0x44>)
 8006afe:	1b64      	subs	r4, r4, r5
 8006b00:	10a4      	asrs	r4, r4, #2
 8006b02:	42a6      	cmp	r6, r4
 8006b04:	d105      	bne.n	8006b12 <__libc_init_array+0x2e>
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b0c:	4798      	blx	r3
 8006b0e:	3601      	adds	r6, #1
 8006b10:	e7ee      	b.n	8006af0 <__libc_init_array+0xc>
 8006b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b16:	4798      	blx	r3
 8006b18:	3601      	adds	r6, #1
 8006b1a:	e7f2      	b.n	8006b02 <__libc_init_array+0x1e>
 8006b1c:	0800834c 	.word	0x0800834c
 8006b20:	0800834c 	.word	0x0800834c
 8006b24:	0800834c 	.word	0x0800834c
 8006b28:	08008350 	.word	0x08008350

08006b2c <__retarget_lock_acquire_recursive>:
 8006b2c:	4770      	bx	lr

08006b2e <__retarget_lock_release_recursive>:
 8006b2e:	4770      	bx	lr

08006b30 <memcpy>:
 8006b30:	440a      	add	r2, r1
 8006b32:	4291      	cmp	r1, r2
 8006b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b38:	d100      	bne.n	8006b3c <memcpy+0xc>
 8006b3a:	4770      	bx	lr
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b42:	4291      	cmp	r1, r2
 8006b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b48:	d1f9      	bne.n	8006b3e <memcpy+0xe>
 8006b4a:	bd10      	pop	{r4, pc}

08006b4c <_free_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4605      	mov	r5, r0
 8006b50:	2900      	cmp	r1, #0
 8006b52:	d040      	beq.n	8006bd6 <_free_r+0x8a>
 8006b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b58:	1f0c      	subs	r4, r1, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bfb8      	it	lt
 8006b5e:	18e4      	addlt	r4, r4, r3
 8006b60:	f000 f8de 	bl	8006d20 <__malloc_lock>
 8006b64:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd8 <_free_r+0x8c>)
 8006b66:	6813      	ldr	r3, [r2, #0]
 8006b68:	b933      	cbnz	r3, 8006b78 <_free_r+0x2c>
 8006b6a:	6063      	str	r3, [r4, #4]
 8006b6c:	6014      	str	r4, [r2, #0]
 8006b6e:	4628      	mov	r0, r5
 8006b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b74:	f000 b8da 	b.w	8006d2c <__malloc_unlock>
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	d908      	bls.n	8006b8e <_free_r+0x42>
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	1821      	adds	r1, r4, r0
 8006b80:	428b      	cmp	r3, r1
 8006b82:	bf01      	itttt	eq
 8006b84:	6819      	ldreq	r1, [r3, #0]
 8006b86:	685b      	ldreq	r3, [r3, #4]
 8006b88:	1809      	addeq	r1, r1, r0
 8006b8a:	6021      	streq	r1, [r4, #0]
 8006b8c:	e7ed      	b.n	8006b6a <_free_r+0x1e>
 8006b8e:	461a      	mov	r2, r3
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	b10b      	cbz	r3, 8006b98 <_free_r+0x4c>
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d9fa      	bls.n	8006b8e <_free_r+0x42>
 8006b98:	6811      	ldr	r1, [r2, #0]
 8006b9a:	1850      	adds	r0, r2, r1
 8006b9c:	42a0      	cmp	r0, r4
 8006b9e:	d10b      	bne.n	8006bb8 <_free_r+0x6c>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	4401      	add	r1, r0
 8006ba4:	1850      	adds	r0, r2, r1
 8006ba6:	4283      	cmp	r3, r0
 8006ba8:	6011      	str	r1, [r2, #0]
 8006baa:	d1e0      	bne.n	8006b6e <_free_r+0x22>
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	4408      	add	r0, r1
 8006bb2:	6010      	str	r0, [r2, #0]
 8006bb4:	6053      	str	r3, [r2, #4]
 8006bb6:	e7da      	b.n	8006b6e <_free_r+0x22>
 8006bb8:	d902      	bls.n	8006bc0 <_free_r+0x74>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	e7d6      	b.n	8006b6e <_free_r+0x22>
 8006bc0:	6820      	ldr	r0, [r4, #0]
 8006bc2:	1821      	adds	r1, r4, r0
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	bf01      	itttt	eq
 8006bc8:	6819      	ldreq	r1, [r3, #0]
 8006bca:	685b      	ldreq	r3, [r3, #4]
 8006bcc:	1809      	addeq	r1, r1, r0
 8006bce:	6021      	streq	r1, [r4, #0]
 8006bd0:	6063      	str	r3, [r4, #4]
 8006bd2:	6054      	str	r4, [r2, #4]
 8006bd4:	e7cb      	b.n	8006b6e <_free_r+0x22>
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	20002310 	.word	0x20002310

08006bdc <sbrk_aligned>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	4e0f      	ldr	r6, [pc, #60]	@ (8006c1c <sbrk_aligned+0x40>)
 8006be0:	460c      	mov	r4, r1
 8006be2:	6831      	ldr	r1, [r6, #0]
 8006be4:	4605      	mov	r5, r0
 8006be6:	b911      	cbnz	r1, 8006bee <sbrk_aligned+0x12>
 8006be8:	f000 fbaa 	bl	8007340 <_sbrk_r>
 8006bec:	6030      	str	r0, [r6, #0]
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 fba5 	bl	8007340 <_sbrk_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d103      	bne.n	8006c02 <sbrk_aligned+0x26>
 8006bfa:	f04f 34ff 	mov.w	r4, #4294967295
 8006bfe:	4620      	mov	r0, r4
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	1cc4      	adds	r4, r0, #3
 8006c04:	f024 0403 	bic.w	r4, r4, #3
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d0f8      	beq.n	8006bfe <sbrk_aligned+0x22>
 8006c0c:	1a21      	subs	r1, r4, r0
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fb96 	bl	8007340 <_sbrk_r>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d1f2      	bne.n	8006bfe <sbrk_aligned+0x22>
 8006c18:	e7ef      	b.n	8006bfa <sbrk_aligned+0x1e>
 8006c1a:	bf00      	nop
 8006c1c:	2000230c 	.word	0x2000230c

08006c20 <_malloc_r>:
 8006c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c24:	1ccd      	adds	r5, r1, #3
 8006c26:	f025 0503 	bic.w	r5, r5, #3
 8006c2a:	3508      	adds	r5, #8
 8006c2c:	2d0c      	cmp	r5, #12
 8006c2e:	bf38      	it	cc
 8006c30:	250c      	movcc	r5, #12
 8006c32:	2d00      	cmp	r5, #0
 8006c34:	4606      	mov	r6, r0
 8006c36:	db01      	blt.n	8006c3c <_malloc_r+0x1c>
 8006c38:	42a9      	cmp	r1, r5
 8006c3a:	d904      	bls.n	8006c46 <_malloc_r+0x26>
 8006c3c:	230c      	movs	r3, #12
 8006c3e:	6033      	str	r3, [r6, #0]
 8006c40:	2000      	movs	r0, #0
 8006c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d1c <_malloc_r+0xfc>
 8006c4a:	f000 f869 	bl	8006d20 <__malloc_lock>
 8006c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c52:	461c      	mov	r4, r3
 8006c54:	bb44      	cbnz	r4, 8006ca8 <_malloc_r+0x88>
 8006c56:	4629      	mov	r1, r5
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f7ff ffbf 	bl	8006bdc <sbrk_aligned>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	4604      	mov	r4, r0
 8006c62:	d158      	bne.n	8006d16 <_malloc_r+0xf6>
 8006c64:	f8d8 4000 	ldr.w	r4, [r8]
 8006c68:	4627      	mov	r7, r4
 8006c6a:	2f00      	cmp	r7, #0
 8006c6c:	d143      	bne.n	8006cf6 <_malloc_r+0xd6>
 8006c6e:	2c00      	cmp	r4, #0
 8006c70:	d04b      	beq.n	8006d0a <_malloc_r+0xea>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	4639      	mov	r1, r7
 8006c76:	4630      	mov	r0, r6
 8006c78:	eb04 0903 	add.w	r9, r4, r3
 8006c7c:	f000 fb60 	bl	8007340 <_sbrk_r>
 8006c80:	4581      	cmp	r9, r0
 8006c82:	d142      	bne.n	8006d0a <_malloc_r+0xea>
 8006c84:	6821      	ldr	r1, [r4, #0]
 8006c86:	4630      	mov	r0, r6
 8006c88:	1a6d      	subs	r5, r5, r1
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	f7ff ffa6 	bl	8006bdc <sbrk_aligned>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d03a      	beq.n	8006d0a <_malloc_r+0xea>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	442b      	add	r3, r5
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	bb62      	cbnz	r2, 8006cfc <_malloc_r+0xdc>
 8006ca2:	f8c8 7000 	str.w	r7, [r8]
 8006ca6:	e00f      	b.n	8006cc8 <_malloc_r+0xa8>
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	1b52      	subs	r2, r2, r5
 8006cac:	d420      	bmi.n	8006cf0 <_malloc_r+0xd0>
 8006cae:	2a0b      	cmp	r2, #11
 8006cb0:	d917      	bls.n	8006ce2 <_malloc_r+0xc2>
 8006cb2:	1961      	adds	r1, r4, r5
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	6025      	str	r5, [r4, #0]
 8006cb8:	bf18      	it	ne
 8006cba:	6059      	strne	r1, [r3, #4]
 8006cbc:	6863      	ldr	r3, [r4, #4]
 8006cbe:	bf08      	it	eq
 8006cc0:	f8c8 1000 	streq.w	r1, [r8]
 8006cc4:	5162      	str	r2, [r4, r5]
 8006cc6:	604b      	str	r3, [r1, #4]
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f000 f82f 	bl	8006d2c <__malloc_unlock>
 8006cce:	f104 000b 	add.w	r0, r4, #11
 8006cd2:	1d23      	adds	r3, r4, #4
 8006cd4:	f020 0007 	bic.w	r0, r0, #7
 8006cd8:	1ac2      	subs	r2, r0, r3
 8006cda:	bf1c      	itt	ne
 8006cdc:	1a1b      	subne	r3, r3, r0
 8006cde:	50a3      	strne	r3, [r4, r2]
 8006ce0:	e7af      	b.n	8006c42 <_malloc_r+0x22>
 8006ce2:	6862      	ldr	r2, [r4, #4]
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	bf0c      	ite	eq
 8006ce8:	f8c8 2000 	streq.w	r2, [r8]
 8006cec:	605a      	strne	r2, [r3, #4]
 8006cee:	e7eb      	b.n	8006cc8 <_malloc_r+0xa8>
 8006cf0:	4623      	mov	r3, r4
 8006cf2:	6864      	ldr	r4, [r4, #4]
 8006cf4:	e7ae      	b.n	8006c54 <_malloc_r+0x34>
 8006cf6:	463c      	mov	r4, r7
 8006cf8:	687f      	ldr	r7, [r7, #4]
 8006cfa:	e7b6      	b.n	8006c6a <_malloc_r+0x4a>
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	42a3      	cmp	r3, r4
 8006d02:	d1fb      	bne.n	8006cfc <_malloc_r+0xdc>
 8006d04:	2300      	movs	r3, #0
 8006d06:	6053      	str	r3, [r2, #4]
 8006d08:	e7de      	b.n	8006cc8 <_malloc_r+0xa8>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	6033      	str	r3, [r6, #0]
 8006d10:	f000 f80c 	bl	8006d2c <__malloc_unlock>
 8006d14:	e794      	b.n	8006c40 <_malloc_r+0x20>
 8006d16:	6005      	str	r5, [r0, #0]
 8006d18:	e7d6      	b.n	8006cc8 <_malloc_r+0xa8>
 8006d1a:	bf00      	nop
 8006d1c:	20002310 	.word	0x20002310

08006d20 <__malloc_lock>:
 8006d20:	4801      	ldr	r0, [pc, #4]	@ (8006d28 <__malloc_lock+0x8>)
 8006d22:	f7ff bf03 	b.w	8006b2c <__retarget_lock_acquire_recursive>
 8006d26:	bf00      	nop
 8006d28:	20002308 	.word	0x20002308

08006d2c <__malloc_unlock>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	@ (8006d34 <__malloc_unlock+0x8>)
 8006d2e:	f7ff befe 	b.w	8006b2e <__retarget_lock_release_recursive>
 8006d32:	bf00      	nop
 8006d34:	20002308 	.word	0x20002308

08006d38 <__ssputs_r>:
 8006d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d3c:	461f      	mov	r7, r3
 8006d3e:	688e      	ldr	r6, [r1, #8]
 8006d40:	4682      	mov	sl, r0
 8006d42:	42be      	cmp	r6, r7
 8006d44:	460c      	mov	r4, r1
 8006d46:	4690      	mov	r8, r2
 8006d48:	680b      	ldr	r3, [r1, #0]
 8006d4a:	d82d      	bhi.n	8006da8 <__ssputs_r+0x70>
 8006d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d54:	d026      	beq.n	8006da4 <__ssputs_r+0x6c>
 8006d56:	6965      	ldr	r5, [r4, #20]
 8006d58:	6909      	ldr	r1, [r1, #16]
 8006d5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d5e:	eba3 0901 	sub.w	r9, r3, r1
 8006d62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d66:	1c7b      	adds	r3, r7, #1
 8006d68:	444b      	add	r3, r9
 8006d6a:	106d      	asrs	r5, r5, #1
 8006d6c:	429d      	cmp	r5, r3
 8006d6e:	bf38      	it	cc
 8006d70:	461d      	movcc	r5, r3
 8006d72:	0553      	lsls	r3, r2, #21
 8006d74:	d527      	bpl.n	8006dc6 <__ssputs_r+0x8e>
 8006d76:	4629      	mov	r1, r5
 8006d78:	f7ff ff52 	bl	8006c20 <_malloc_r>
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	b360      	cbz	r0, 8006dda <__ssputs_r+0xa2>
 8006d80:	464a      	mov	r2, r9
 8006d82:	6921      	ldr	r1, [r4, #16]
 8006d84:	f7ff fed4 	bl	8006b30 <memcpy>
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d92:	81a3      	strh	r3, [r4, #12]
 8006d94:	6126      	str	r6, [r4, #16]
 8006d96:	444e      	add	r6, r9
 8006d98:	6026      	str	r6, [r4, #0]
 8006d9a:	463e      	mov	r6, r7
 8006d9c:	6165      	str	r5, [r4, #20]
 8006d9e:	eba5 0509 	sub.w	r5, r5, r9
 8006da2:	60a5      	str	r5, [r4, #8]
 8006da4:	42be      	cmp	r6, r7
 8006da6:	d900      	bls.n	8006daa <__ssputs_r+0x72>
 8006da8:	463e      	mov	r6, r7
 8006daa:	4632      	mov	r2, r6
 8006dac:	4641      	mov	r1, r8
 8006dae:	6820      	ldr	r0, [r4, #0]
 8006db0:	f000 faac 	bl	800730c <memmove>
 8006db4:	2000      	movs	r0, #0
 8006db6:	68a3      	ldr	r3, [r4, #8]
 8006db8:	1b9b      	subs	r3, r3, r6
 8006dba:	60a3      	str	r3, [r4, #8]
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	4433      	add	r3, r6
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	f000 fad8 	bl	800737c <_realloc_r>
 8006dcc:	4606      	mov	r6, r0
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d1e0      	bne.n	8006d94 <__ssputs_r+0x5c>
 8006dd2:	4650      	mov	r0, sl
 8006dd4:	6921      	ldr	r1, [r4, #16]
 8006dd6:	f7ff feb9 	bl	8006b4c <_free_r>
 8006dda:	230c      	movs	r3, #12
 8006ddc:	f8ca 3000 	str.w	r3, [sl]
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	f04f 30ff 	mov.w	r0, #4294967295
 8006de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dea:	81a3      	strh	r3, [r4, #12]
 8006dec:	e7e9      	b.n	8006dc2 <__ssputs_r+0x8a>
	...

08006df0 <_svfiprintf_r>:
 8006df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df4:	4698      	mov	r8, r3
 8006df6:	898b      	ldrh	r3, [r1, #12]
 8006df8:	4607      	mov	r7, r0
 8006dfa:	061b      	lsls	r3, r3, #24
 8006dfc:	460d      	mov	r5, r1
 8006dfe:	4614      	mov	r4, r2
 8006e00:	b09d      	sub	sp, #116	@ 0x74
 8006e02:	d510      	bpl.n	8006e26 <_svfiprintf_r+0x36>
 8006e04:	690b      	ldr	r3, [r1, #16]
 8006e06:	b973      	cbnz	r3, 8006e26 <_svfiprintf_r+0x36>
 8006e08:	2140      	movs	r1, #64	@ 0x40
 8006e0a:	f7ff ff09 	bl	8006c20 <_malloc_r>
 8006e0e:	6028      	str	r0, [r5, #0]
 8006e10:	6128      	str	r0, [r5, #16]
 8006e12:	b930      	cbnz	r0, 8006e22 <_svfiprintf_r+0x32>
 8006e14:	230c      	movs	r3, #12
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	b01d      	add	sp, #116	@ 0x74
 8006e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e22:	2340      	movs	r3, #64	@ 0x40
 8006e24:	616b      	str	r3, [r5, #20]
 8006e26:	2300      	movs	r3, #0
 8006e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e2a:	2320      	movs	r3, #32
 8006e2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e30:	2330      	movs	r3, #48	@ 0x30
 8006e32:	f04f 0901 	mov.w	r9, #1
 8006e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e3a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006fd4 <_svfiprintf_r+0x1e4>
 8006e3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e42:	4623      	mov	r3, r4
 8006e44:	469a      	mov	sl, r3
 8006e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e4a:	b10a      	cbz	r2, 8006e50 <_svfiprintf_r+0x60>
 8006e4c:	2a25      	cmp	r2, #37	@ 0x25
 8006e4e:	d1f9      	bne.n	8006e44 <_svfiprintf_r+0x54>
 8006e50:	ebba 0b04 	subs.w	fp, sl, r4
 8006e54:	d00b      	beq.n	8006e6e <_svfiprintf_r+0x7e>
 8006e56:	465b      	mov	r3, fp
 8006e58:	4622      	mov	r2, r4
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	f7ff ff6b 	bl	8006d38 <__ssputs_r>
 8006e62:	3001      	adds	r0, #1
 8006e64:	f000 80a7 	beq.w	8006fb6 <_svfiprintf_r+0x1c6>
 8006e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e6a:	445a      	add	r2, fp
 8006e6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 809f 	beq.w	8006fb6 <_svfiprintf_r+0x1c6>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e82:	f10a 0a01 	add.w	sl, sl, #1
 8006e86:	9304      	str	r3, [sp, #16]
 8006e88:	9307      	str	r3, [sp, #28]
 8006e8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e90:	4654      	mov	r4, sl
 8006e92:	2205      	movs	r2, #5
 8006e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e98:	484e      	ldr	r0, [pc, #312]	@ (8006fd4 <_svfiprintf_r+0x1e4>)
 8006e9a:	f000 fa61 	bl	8007360 <memchr>
 8006e9e:	9a04      	ldr	r2, [sp, #16]
 8006ea0:	b9d8      	cbnz	r0, 8006eda <_svfiprintf_r+0xea>
 8006ea2:	06d0      	lsls	r0, r2, #27
 8006ea4:	bf44      	itt	mi
 8006ea6:	2320      	movmi	r3, #32
 8006ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eac:	0711      	lsls	r1, r2, #28
 8006eae:	bf44      	itt	mi
 8006eb0:	232b      	movmi	r3, #43	@ 0x2b
 8006eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8006eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ebc:	d015      	beq.n	8006eea <_svfiprintf_r+0xfa>
 8006ebe:	4654      	mov	r4, sl
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	f04f 0c0a 	mov.w	ip, #10
 8006ec6:	9a07      	ldr	r2, [sp, #28]
 8006ec8:	4621      	mov	r1, r4
 8006eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ece:	3b30      	subs	r3, #48	@ 0x30
 8006ed0:	2b09      	cmp	r3, #9
 8006ed2:	d94b      	bls.n	8006f6c <_svfiprintf_r+0x17c>
 8006ed4:	b1b0      	cbz	r0, 8006f04 <_svfiprintf_r+0x114>
 8006ed6:	9207      	str	r2, [sp, #28]
 8006ed8:	e014      	b.n	8006f04 <_svfiprintf_r+0x114>
 8006eda:	eba0 0308 	sub.w	r3, r0, r8
 8006ede:	fa09 f303 	lsl.w	r3, r9, r3
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	46a2      	mov	sl, r4
 8006ee6:	9304      	str	r3, [sp, #16]
 8006ee8:	e7d2      	b.n	8006e90 <_svfiprintf_r+0xa0>
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	1d19      	adds	r1, r3, #4
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	9103      	str	r1, [sp, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	bfbb      	ittet	lt
 8006ef6:	425b      	neglt	r3, r3
 8006ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8006efc:	9307      	strge	r3, [sp, #28]
 8006efe:	9307      	strlt	r3, [sp, #28]
 8006f00:	bfb8      	it	lt
 8006f02:	9204      	strlt	r2, [sp, #16]
 8006f04:	7823      	ldrb	r3, [r4, #0]
 8006f06:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f08:	d10a      	bne.n	8006f20 <_svfiprintf_r+0x130>
 8006f0a:	7863      	ldrb	r3, [r4, #1]
 8006f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f0e:	d132      	bne.n	8006f76 <_svfiprintf_r+0x186>
 8006f10:	9b03      	ldr	r3, [sp, #12]
 8006f12:	3402      	adds	r4, #2
 8006f14:	1d1a      	adds	r2, r3, #4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	9203      	str	r2, [sp, #12]
 8006f1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f1e:	9305      	str	r3, [sp, #20]
 8006f20:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006fd8 <_svfiprintf_r+0x1e8>
 8006f24:	2203      	movs	r2, #3
 8006f26:	4650      	mov	r0, sl
 8006f28:	7821      	ldrb	r1, [r4, #0]
 8006f2a:	f000 fa19 	bl	8007360 <memchr>
 8006f2e:	b138      	cbz	r0, 8006f40 <_svfiprintf_r+0x150>
 8006f30:	2240      	movs	r2, #64	@ 0x40
 8006f32:	9b04      	ldr	r3, [sp, #16]
 8006f34:	eba0 000a 	sub.w	r0, r0, sl
 8006f38:	4082      	lsls	r2, r0
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	3401      	adds	r4, #1
 8006f3e:	9304      	str	r3, [sp, #16]
 8006f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f44:	2206      	movs	r2, #6
 8006f46:	4825      	ldr	r0, [pc, #148]	@ (8006fdc <_svfiprintf_r+0x1ec>)
 8006f48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f4c:	f000 fa08 	bl	8007360 <memchr>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d036      	beq.n	8006fc2 <_svfiprintf_r+0x1d2>
 8006f54:	4b22      	ldr	r3, [pc, #136]	@ (8006fe0 <_svfiprintf_r+0x1f0>)
 8006f56:	bb1b      	cbnz	r3, 8006fa0 <_svfiprintf_r+0x1b0>
 8006f58:	9b03      	ldr	r3, [sp, #12]
 8006f5a:	3307      	adds	r3, #7
 8006f5c:	f023 0307 	bic.w	r3, r3, #7
 8006f60:	3308      	adds	r3, #8
 8006f62:	9303      	str	r3, [sp, #12]
 8006f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f66:	4433      	add	r3, r6
 8006f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f6a:	e76a      	b.n	8006e42 <_svfiprintf_r+0x52>
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	2001      	movs	r0, #1
 8006f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f74:	e7a8      	b.n	8006ec8 <_svfiprintf_r+0xd8>
 8006f76:	2300      	movs	r3, #0
 8006f78:	f04f 0c0a 	mov.w	ip, #10
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	3401      	adds	r4, #1
 8006f80:	9305      	str	r3, [sp, #20]
 8006f82:	4620      	mov	r0, r4
 8006f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f88:	3a30      	subs	r2, #48	@ 0x30
 8006f8a:	2a09      	cmp	r2, #9
 8006f8c:	d903      	bls.n	8006f96 <_svfiprintf_r+0x1a6>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0c6      	beq.n	8006f20 <_svfiprintf_r+0x130>
 8006f92:	9105      	str	r1, [sp, #20]
 8006f94:	e7c4      	b.n	8006f20 <_svfiprintf_r+0x130>
 8006f96:	4604      	mov	r4, r0
 8006f98:	2301      	movs	r3, #1
 8006f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f9e:	e7f0      	b.n	8006f82 <_svfiprintf_r+0x192>
 8006fa0:	ab03      	add	r3, sp, #12
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	462a      	mov	r2, r5
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe4 <_svfiprintf_r+0x1f4>)
 8006faa:	a904      	add	r1, sp, #16
 8006fac:	f3af 8000 	nop.w
 8006fb0:	1c42      	adds	r2, r0, #1
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	d1d6      	bne.n	8006f64 <_svfiprintf_r+0x174>
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	065b      	lsls	r3, r3, #25
 8006fba:	f53f af2d 	bmi.w	8006e18 <_svfiprintf_r+0x28>
 8006fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fc0:	e72c      	b.n	8006e1c <_svfiprintf_r+0x2c>
 8006fc2:	ab03      	add	r3, sp, #12
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	4638      	mov	r0, r7
 8006fca:	4b06      	ldr	r3, [pc, #24]	@ (8006fe4 <_svfiprintf_r+0x1f4>)
 8006fcc:	a904      	add	r1, sp, #16
 8006fce:	f000 f87d 	bl	80070cc <_printf_i>
 8006fd2:	e7ed      	b.n	8006fb0 <_svfiprintf_r+0x1c0>
 8006fd4:	08008316 	.word	0x08008316
 8006fd8:	0800831c 	.word	0x0800831c
 8006fdc:	08008320 	.word	0x08008320
 8006fe0:	00000000 	.word	0x00000000
 8006fe4:	08006d39 	.word	0x08006d39

08006fe8 <_printf_common>:
 8006fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fec:	4616      	mov	r6, r2
 8006fee:	4698      	mov	r8, r3
 8006ff0:	688a      	ldr	r2, [r1, #8]
 8006ff2:	690b      	ldr	r3, [r1, #16]
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	bfb8      	it	lt
 8006ffa:	4613      	movlt	r3, r2
 8006ffc:	6033      	str	r3, [r6, #0]
 8006ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007002:	460c      	mov	r4, r1
 8007004:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007008:	b10a      	cbz	r2, 800700e <_printf_common+0x26>
 800700a:	3301      	adds	r3, #1
 800700c:	6033      	str	r3, [r6, #0]
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	0699      	lsls	r1, r3, #26
 8007012:	bf42      	ittt	mi
 8007014:	6833      	ldrmi	r3, [r6, #0]
 8007016:	3302      	addmi	r3, #2
 8007018:	6033      	strmi	r3, [r6, #0]
 800701a:	6825      	ldr	r5, [r4, #0]
 800701c:	f015 0506 	ands.w	r5, r5, #6
 8007020:	d106      	bne.n	8007030 <_printf_common+0x48>
 8007022:	f104 0a19 	add.w	sl, r4, #25
 8007026:	68e3      	ldr	r3, [r4, #12]
 8007028:	6832      	ldr	r2, [r6, #0]
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	42ab      	cmp	r3, r5
 800702e:	dc2b      	bgt.n	8007088 <_printf_common+0xa0>
 8007030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007034:	6822      	ldr	r2, [r4, #0]
 8007036:	3b00      	subs	r3, #0
 8007038:	bf18      	it	ne
 800703a:	2301      	movne	r3, #1
 800703c:	0692      	lsls	r2, r2, #26
 800703e:	d430      	bmi.n	80070a2 <_printf_common+0xba>
 8007040:	4641      	mov	r1, r8
 8007042:	4638      	mov	r0, r7
 8007044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007048:	47c8      	blx	r9
 800704a:	3001      	adds	r0, #1
 800704c:	d023      	beq.n	8007096 <_printf_common+0xae>
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	6922      	ldr	r2, [r4, #16]
 8007052:	f003 0306 	and.w	r3, r3, #6
 8007056:	2b04      	cmp	r3, #4
 8007058:	bf14      	ite	ne
 800705a:	2500      	movne	r5, #0
 800705c:	6833      	ldreq	r3, [r6, #0]
 800705e:	f04f 0600 	mov.w	r6, #0
 8007062:	bf08      	it	eq
 8007064:	68e5      	ldreq	r5, [r4, #12]
 8007066:	f104 041a 	add.w	r4, r4, #26
 800706a:	bf08      	it	eq
 800706c:	1aed      	subeq	r5, r5, r3
 800706e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007072:	bf08      	it	eq
 8007074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007078:	4293      	cmp	r3, r2
 800707a:	bfc4      	itt	gt
 800707c:	1a9b      	subgt	r3, r3, r2
 800707e:	18ed      	addgt	r5, r5, r3
 8007080:	42b5      	cmp	r5, r6
 8007082:	d11a      	bne.n	80070ba <_printf_common+0xd2>
 8007084:	2000      	movs	r0, #0
 8007086:	e008      	b.n	800709a <_printf_common+0xb2>
 8007088:	2301      	movs	r3, #1
 800708a:	4652      	mov	r2, sl
 800708c:	4641      	mov	r1, r8
 800708e:	4638      	mov	r0, r7
 8007090:	47c8      	blx	r9
 8007092:	3001      	adds	r0, #1
 8007094:	d103      	bne.n	800709e <_printf_common+0xb6>
 8007096:	f04f 30ff 	mov.w	r0, #4294967295
 800709a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709e:	3501      	adds	r5, #1
 80070a0:	e7c1      	b.n	8007026 <_printf_common+0x3e>
 80070a2:	2030      	movs	r0, #48	@ 0x30
 80070a4:	18e1      	adds	r1, r4, r3
 80070a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070b0:	4422      	add	r2, r4
 80070b2:	3302      	adds	r3, #2
 80070b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070b8:	e7c2      	b.n	8007040 <_printf_common+0x58>
 80070ba:	2301      	movs	r3, #1
 80070bc:	4622      	mov	r2, r4
 80070be:	4641      	mov	r1, r8
 80070c0:	4638      	mov	r0, r7
 80070c2:	47c8      	blx	r9
 80070c4:	3001      	adds	r0, #1
 80070c6:	d0e6      	beq.n	8007096 <_printf_common+0xae>
 80070c8:	3601      	adds	r6, #1
 80070ca:	e7d9      	b.n	8007080 <_printf_common+0x98>

080070cc <_printf_i>:
 80070cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d0:	7e0f      	ldrb	r7, [r1, #24]
 80070d2:	4691      	mov	r9, r2
 80070d4:	2f78      	cmp	r7, #120	@ 0x78
 80070d6:	4680      	mov	r8, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	469a      	mov	sl, r3
 80070dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070e2:	d807      	bhi.n	80070f4 <_printf_i+0x28>
 80070e4:	2f62      	cmp	r7, #98	@ 0x62
 80070e6:	d80a      	bhi.n	80070fe <_printf_i+0x32>
 80070e8:	2f00      	cmp	r7, #0
 80070ea:	f000 80d3 	beq.w	8007294 <_printf_i+0x1c8>
 80070ee:	2f58      	cmp	r7, #88	@ 0x58
 80070f0:	f000 80ba 	beq.w	8007268 <_printf_i+0x19c>
 80070f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070fc:	e03a      	b.n	8007174 <_printf_i+0xa8>
 80070fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007102:	2b15      	cmp	r3, #21
 8007104:	d8f6      	bhi.n	80070f4 <_printf_i+0x28>
 8007106:	a101      	add	r1, pc, #4	@ (adr r1, 800710c <_printf_i+0x40>)
 8007108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800710c:	08007165 	.word	0x08007165
 8007110:	08007179 	.word	0x08007179
 8007114:	080070f5 	.word	0x080070f5
 8007118:	080070f5 	.word	0x080070f5
 800711c:	080070f5 	.word	0x080070f5
 8007120:	080070f5 	.word	0x080070f5
 8007124:	08007179 	.word	0x08007179
 8007128:	080070f5 	.word	0x080070f5
 800712c:	080070f5 	.word	0x080070f5
 8007130:	080070f5 	.word	0x080070f5
 8007134:	080070f5 	.word	0x080070f5
 8007138:	0800727b 	.word	0x0800727b
 800713c:	080071a3 	.word	0x080071a3
 8007140:	08007235 	.word	0x08007235
 8007144:	080070f5 	.word	0x080070f5
 8007148:	080070f5 	.word	0x080070f5
 800714c:	0800729d 	.word	0x0800729d
 8007150:	080070f5 	.word	0x080070f5
 8007154:	080071a3 	.word	0x080071a3
 8007158:	080070f5 	.word	0x080070f5
 800715c:	080070f5 	.word	0x080070f5
 8007160:	0800723d 	.word	0x0800723d
 8007164:	6833      	ldr	r3, [r6, #0]
 8007166:	1d1a      	adds	r2, r3, #4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6032      	str	r2, [r6, #0]
 800716c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007170:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007174:	2301      	movs	r3, #1
 8007176:	e09e      	b.n	80072b6 <_printf_i+0x1ea>
 8007178:	6833      	ldr	r3, [r6, #0]
 800717a:	6820      	ldr	r0, [r4, #0]
 800717c:	1d19      	adds	r1, r3, #4
 800717e:	6031      	str	r1, [r6, #0]
 8007180:	0606      	lsls	r6, r0, #24
 8007182:	d501      	bpl.n	8007188 <_printf_i+0xbc>
 8007184:	681d      	ldr	r5, [r3, #0]
 8007186:	e003      	b.n	8007190 <_printf_i+0xc4>
 8007188:	0645      	lsls	r5, r0, #25
 800718a:	d5fb      	bpl.n	8007184 <_printf_i+0xb8>
 800718c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007190:	2d00      	cmp	r5, #0
 8007192:	da03      	bge.n	800719c <_printf_i+0xd0>
 8007194:	232d      	movs	r3, #45	@ 0x2d
 8007196:	426d      	negs	r5, r5
 8007198:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800719c:	230a      	movs	r3, #10
 800719e:	4859      	ldr	r0, [pc, #356]	@ (8007304 <_printf_i+0x238>)
 80071a0:	e011      	b.n	80071c6 <_printf_i+0xfa>
 80071a2:	6821      	ldr	r1, [r4, #0]
 80071a4:	6833      	ldr	r3, [r6, #0]
 80071a6:	0608      	lsls	r0, r1, #24
 80071a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80071ac:	d402      	bmi.n	80071b4 <_printf_i+0xe8>
 80071ae:	0649      	lsls	r1, r1, #25
 80071b0:	bf48      	it	mi
 80071b2:	b2ad      	uxthmi	r5, r5
 80071b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80071b6:	6033      	str	r3, [r6, #0]
 80071b8:	bf14      	ite	ne
 80071ba:	230a      	movne	r3, #10
 80071bc:	2308      	moveq	r3, #8
 80071be:	4851      	ldr	r0, [pc, #324]	@ (8007304 <_printf_i+0x238>)
 80071c0:	2100      	movs	r1, #0
 80071c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071c6:	6866      	ldr	r6, [r4, #4]
 80071c8:	2e00      	cmp	r6, #0
 80071ca:	bfa8      	it	ge
 80071cc:	6821      	ldrge	r1, [r4, #0]
 80071ce:	60a6      	str	r6, [r4, #8]
 80071d0:	bfa4      	itt	ge
 80071d2:	f021 0104 	bicge.w	r1, r1, #4
 80071d6:	6021      	strge	r1, [r4, #0]
 80071d8:	b90d      	cbnz	r5, 80071de <_printf_i+0x112>
 80071da:	2e00      	cmp	r6, #0
 80071dc:	d04b      	beq.n	8007276 <_printf_i+0x1aa>
 80071de:	4616      	mov	r6, r2
 80071e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80071e4:	fb03 5711 	mls	r7, r3, r1, r5
 80071e8:	5dc7      	ldrb	r7, [r0, r7]
 80071ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071ee:	462f      	mov	r7, r5
 80071f0:	42bb      	cmp	r3, r7
 80071f2:	460d      	mov	r5, r1
 80071f4:	d9f4      	bls.n	80071e0 <_printf_i+0x114>
 80071f6:	2b08      	cmp	r3, #8
 80071f8:	d10b      	bne.n	8007212 <_printf_i+0x146>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	07df      	lsls	r7, r3, #31
 80071fe:	d508      	bpl.n	8007212 <_printf_i+0x146>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	6861      	ldr	r1, [r4, #4]
 8007204:	4299      	cmp	r1, r3
 8007206:	bfde      	ittt	le
 8007208:	2330      	movle	r3, #48	@ 0x30
 800720a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800720e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007212:	1b92      	subs	r2, r2, r6
 8007214:	6122      	str	r2, [r4, #16]
 8007216:	464b      	mov	r3, r9
 8007218:	4621      	mov	r1, r4
 800721a:	4640      	mov	r0, r8
 800721c:	f8cd a000 	str.w	sl, [sp]
 8007220:	aa03      	add	r2, sp, #12
 8007222:	f7ff fee1 	bl	8006fe8 <_printf_common>
 8007226:	3001      	adds	r0, #1
 8007228:	d14a      	bne.n	80072c0 <_printf_i+0x1f4>
 800722a:	f04f 30ff 	mov.w	r0, #4294967295
 800722e:	b004      	add	sp, #16
 8007230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	f043 0320 	orr.w	r3, r3, #32
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	2778      	movs	r7, #120	@ 0x78
 800723e:	4832      	ldr	r0, [pc, #200]	@ (8007308 <_printf_i+0x23c>)
 8007240:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	6831      	ldr	r1, [r6, #0]
 8007248:	061f      	lsls	r7, r3, #24
 800724a:	f851 5b04 	ldr.w	r5, [r1], #4
 800724e:	d402      	bmi.n	8007256 <_printf_i+0x18a>
 8007250:	065f      	lsls	r7, r3, #25
 8007252:	bf48      	it	mi
 8007254:	b2ad      	uxthmi	r5, r5
 8007256:	6031      	str	r1, [r6, #0]
 8007258:	07d9      	lsls	r1, r3, #31
 800725a:	bf44      	itt	mi
 800725c:	f043 0320 	orrmi.w	r3, r3, #32
 8007260:	6023      	strmi	r3, [r4, #0]
 8007262:	b11d      	cbz	r5, 800726c <_printf_i+0x1a0>
 8007264:	2310      	movs	r3, #16
 8007266:	e7ab      	b.n	80071c0 <_printf_i+0xf4>
 8007268:	4826      	ldr	r0, [pc, #152]	@ (8007304 <_printf_i+0x238>)
 800726a:	e7e9      	b.n	8007240 <_printf_i+0x174>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	f023 0320 	bic.w	r3, r3, #32
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	e7f6      	b.n	8007264 <_printf_i+0x198>
 8007276:	4616      	mov	r6, r2
 8007278:	e7bd      	b.n	80071f6 <_printf_i+0x12a>
 800727a:	6833      	ldr	r3, [r6, #0]
 800727c:	6825      	ldr	r5, [r4, #0]
 800727e:	1d18      	adds	r0, r3, #4
 8007280:	6961      	ldr	r1, [r4, #20]
 8007282:	6030      	str	r0, [r6, #0]
 8007284:	062e      	lsls	r6, r5, #24
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	d501      	bpl.n	800728e <_printf_i+0x1c2>
 800728a:	6019      	str	r1, [r3, #0]
 800728c:	e002      	b.n	8007294 <_printf_i+0x1c8>
 800728e:	0668      	lsls	r0, r5, #25
 8007290:	d5fb      	bpl.n	800728a <_printf_i+0x1be>
 8007292:	8019      	strh	r1, [r3, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	4616      	mov	r6, r2
 8007298:	6123      	str	r3, [r4, #16]
 800729a:	e7bc      	b.n	8007216 <_printf_i+0x14a>
 800729c:	6833      	ldr	r3, [r6, #0]
 800729e:	2100      	movs	r1, #0
 80072a0:	1d1a      	adds	r2, r3, #4
 80072a2:	6032      	str	r2, [r6, #0]
 80072a4:	681e      	ldr	r6, [r3, #0]
 80072a6:	6862      	ldr	r2, [r4, #4]
 80072a8:	4630      	mov	r0, r6
 80072aa:	f000 f859 	bl	8007360 <memchr>
 80072ae:	b108      	cbz	r0, 80072b4 <_printf_i+0x1e8>
 80072b0:	1b80      	subs	r0, r0, r6
 80072b2:	6060      	str	r0, [r4, #4]
 80072b4:	6863      	ldr	r3, [r4, #4]
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	2300      	movs	r3, #0
 80072ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072be:	e7aa      	b.n	8007216 <_printf_i+0x14a>
 80072c0:	4632      	mov	r2, r6
 80072c2:	4649      	mov	r1, r9
 80072c4:	4640      	mov	r0, r8
 80072c6:	6923      	ldr	r3, [r4, #16]
 80072c8:	47d0      	blx	sl
 80072ca:	3001      	adds	r0, #1
 80072cc:	d0ad      	beq.n	800722a <_printf_i+0x15e>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	079b      	lsls	r3, r3, #30
 80072d2:	d413      	bmi.n	80072fc <_printf_i+0x230>
 80072d4:	68e0      	ldr	r0, [r4, #12]
 80072d6:	9b03      	ldr	r3, [sp, #12]
 80072d8:	4298      	cmp	r0, r3
 80072da:	bfb8      	it	lt
 80072dc:	4618      	movlt	r0, r3
 80072de:	e7a6      	b.n	800722e <_printf_i+0x162>
 80072e0:	2301      	movs	r3, #1
 80072e2:	4632      	mov	r2, r6
 80072e4:	4649      	mov	r1, r9
 80072e6:	4640      	mov	r0, r8
 80072e8:	47d0      	blx	sl
 80072ea:	3001      	adds	r0, #1
 80072ec:	d09d      	beq.n	800722a <_printf_i+0x15e>
 80072ee:	3501      	adds	r5, #1
 80072f0:	68e3      	ldr	r3, [r4, #12]
 80072f2:	9903      	ldr	r1, [sp, #12]
 80072f4:	1a5b      	subs	r3, r3, r1
 80072f6:	42ab      	cmp	r3, r5
 80072f8:	dcf2      	bgt.n	80072e0 <_printf_i+0x214>
 80072fa:	e7eb      	b.n	80072d4 <_printf_i+0x208>
 80072fc:	2500      	movs	r5, #0
 80072fe:	f104 0619 	add.w	r6, r4, #25
 8007302:	e7f5      	b.n	80072f0 <_printf_i+0x224>
 8007304:	08008327 	.word	0x08008327
 8007308:	08008338 	.word	0x08008338

0800730c <memmove>:
 800730c:	4288      	cmp	r0, r1
 800730e:	b510      	push	{r4, lr}
 8007310:	eb01 0402 	add.w	r4, r1, r2
 8007314:	d902      	bls.n	800731c <memmove+0x10>
 8007316:	4284      	cmp	r4, r0
 8007318:	4623      	mov	r3, r4
 800731a:	d807      	bhi.n	800732c <memmove+0x20>
 800731c:	1e43      	subs	r3, r0, #1
 800731e:	42a1      	cmp	r1, r4
 8007320:	d008      	beq.n	8007334 <memmove+0x28>
 8007322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800732a:	e7f8      	b.n	800731e <memmove+0x12>
 800732c:	4601      	mov	r1, r0
 800732e:	4402      	add	r2, r0
 8007330:	428a      	cmp	r2, r1
 8007332:	d100      	bne.n	8007336 <memmove+0x2a>
 8007334:	bd10      	pop	{r4, pc}
 8007336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800733a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800733e:	e7f7      	b.n	8007330 <memmove+0x24>

08007340 <_sbrk_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	2300      	movs	r3, #0
 8007344:	4d05      	ldr	r5, [pc, #20]	@ (800735c <_sbrk_r+0x1c>)
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	602b      	str	r3, [r5, #0]
 800734c:	f7f9 fe44 	bl	8000fd8 <_sbrk>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_sbrk_r+0x1a>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_sbrk_r+0x1a>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20002304 	.word	0x20002304

08007360 <memchr>:
 8007360:	4603      	mov	r3, r0
 8007362:	b510      	push	{r4, lr}
 8007364:	b2c9      	uxtb	r1, r1
 8007366:	4402      	add	r2, r0
 8007368:	4293      	cmp	r3, r2
 800736a:	4618      	mov	r0, r3
 800736c:	d101      	bne.n	8007372 <memchr+0x12>
 800736e:	2000      	movs	r0, #0
 8007370:	e003      	b.n	800737a <memchr+0x1a>
 8007372:	7804      	ldrb	r4, [r0, #0]
 8007374:	3301      	adds	r3, #1
 8007376:	428c      	cmp	r4, r1
 8007378:	d1f6      	bne.n	8007368 <memchr+0x8>
 800737a:	bd10      	pop	{r4, pc}

0800737c <_realloc_r>:
 800737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007380:	4680      	mov	r8, r0
 8007382:	4615      	mov	r5, r2
 8007384:	460c      	mov	r4, r1
 8007386:	b921      	cbnz	r1, 8007392 <_realloc_r+0x16>
 8007388:	4611      	mov	r1, r2
 800738a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800738e:	f7ff bc47 	b.w	8006c20 <_malloc_r>
 8007392:	b92a      	cbnz	r2, 80073a0 <_realloc_r+0x24>
 8007394:	f7ff fbda 	bl	8006b4c <_free_r>
 8007398:	2400      	movs	r4, #0
 800739a:	4620      	mov	r0, r4
 800739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a0:	f000 f81a 	bl	80073d8 <_malloc_usable_size_r>
 80073a4:	4285      	cmp	r5, r0
 80073a6:	4606      	mov	r6, r0
 80073a8:	d802      	bhi.n	80073b0 <_realloc_r+0x34>
 80073aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80073ae:	d8f4      	bhi.n	800739a <_realloc_r+0x1e>
 80073b0:	4629      	mov	r1, r5
 80073b2:	4640      	mov	r0, r8
 80073b4:	f7ff fc34 	bl	8006c20 <_malloc_r>
 80073b8:	4607      	mov	r7, r0
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d0ec      	beq.n	8007398 <_realloc_r+0x1c>
 80073be:	42b5      	cmp	r5, r6
 80073c0:	462a      	mov	r2, r5
 80073c2:	4621      	mov	r1, r4
 80073c4:	bf28      	it	cs
 80073c6:	4632      	movcs	r2, r6
 80073c8:	f7ff fbb2 	bl	8006b30 <memcpy>
 80073cc:	4621      	mov	r1, r4
 80073ce:	4640      	mov	r0, r8
 80073d0:	f7ff fbbc 	bl	8006b4c <_free_r>
 80073d4:	463c      	mov	r4, r7
 80073d6:	e7e0      	b.n	800739a <_realloc_r+0x1e>

080073d8 <_malloc_usable_size_r>:
 80073d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073dc:	1f18      	subs	r0, r3, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfbc      	itt	lt
 80073e2:	580b      	ldrlt	r3, [r1, r0]
 80073e4:	18c0      	addlt	r0, r0, r3
 80073e6:	4770      	bx	lr

080073e8 <_init>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr

080073f4 <_fini>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr
